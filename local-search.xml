<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Autowired</title>
    <link href="/Nroma/2021/05/18/@Autowired/"/>
    <url>/Nroma/2021/05/18/@Autowired/</url>
    
    <content type="html"><![CDATA[<p>今天早上在写mybatis-plus项目的时候，在属性上使用@Autowired的时候给出了警告提示</p><blockquote><p>Field injection is not recommended </p></blockquote><p>查阅文档资料后，原因是spring官方认为基于字段注入它有很多缺陷（Ps：虽然用的很ok），</p><p>第一点就是它在final上不起作用（实例化时期）</p><p>第二点就是违反单一职责设计原则（？？）</p><p>第三点与依赖注入容器耦合较为紧密</p><p>第四点就是隐藏了依赖关系了</p><p>官方推荐使用构造器注入和set注入</p><p>对于必须的依赖，使用构造函数注入，设置final，并防止为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleMovieLister</span> &#123;<br><br>    <span class="hljs-comment">// the SimpleMovieLister has a dependency on a MovieFinder</span><br>    <span class="hljs-keyword">private</span> MovieFinder movieFinder;<br><br>    <span class="hljs-comment">// a constructor so that the Spring container can inject a MovieFinder</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleMovieLister</span><span class="hljs-params">(MovieFinder movieFinder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.movieFinder = movieFinder;<br>    &#125;<br><br>    <span class="hljs-comment">// business logic that actually uses the injected MovieFinder is omitted...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于可选依赖，使用set注入就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleMovieLister</span> &#123;<br><br>    <span class="hljs-comment">// the SimpleMovieLister has a dependency on the MovieFinder</span><br>    <span class="hljs-keyword">private</span> MovieFinder movieFinder;<br><br>    <span class="hljs-comment">// a setter method so that the Spring container can inject a MovieFinder</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMovieFinder</span><span class="hljs-params">(MovieFinder movieFinder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.movieFinder = movieFinder;<br>    &#125;<br><br>    <span class="hljs-comment">// business logic that actually uses the injected MovieFinder is omitted...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>官方文档都省去了**@Autowired**注解，经过测试，是可以的</p><blockquote><p>final edit 2021&#x2F;5&#x2F;18 8:58:58</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet运行分析</title>
    <link href="/Nroma/2021/03/22/Servlet%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/Nroma/2021/03/22/Servlet%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、编写Servlet"><a href="#一、编写Servlet" class="headerlink" title="一、编写Servlet"></a>一、编写Servlet</h2><p>1、创建一个MyServlet继承HttpServlet，重写doGet或doPost方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-built_in">super</span>.doGet(req, resp);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-built_in">super</span>.doPost(req, resp);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2、在web.xml配置这个MyServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.nroma.MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器输入的如果是servlet-mapping的url-pattern，那么就找到servlet-mapping的servlet-name</p><p>通过这个servlet-name找到servlet地servlet-name，通过servlet地servlet-name找到对应地servle-class</p><p>通过内容的反射找到servlet类</p><h2 id="二、servlet原理"><a href="#二、servlet原理" class="headerlink" title="二、servlet原理"></a>二、servlet原理</h2><p>1、servlet的生命周期详解</p><p>HttpServlet继承自GenericServlet，而GenericServlet实现了Servlet和ServletConfig接口，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>, ServletConfig, Serializable <br></code></pre></td></tr></table></figure><p>其中，Servlet接口中有三个关键方法：</p><ul><li>init(ServletConfig):void</li><li>service(ServletRequest,ServletResponse):void</li><li>destroy():void</li></ul><p>ServletConfig内有四个关键方法：</p><ul><li>getInitParameter(String):String</li><li>getInitParameterNames():Enumeration&lt;String&gt;</li><li>getServletContext():servletContext</li><li>getServletName():String</li></ul><p>总结可知，由servlet和ServletConfig定义的方法接口，由GenericServlet整合这两个接口的方法后由HttpServlet耦合实现，形成最终的可被继承的HttpServlet类。所以GenericServlet为两者的实现类，其中有九个关键方法：</p><ul><li>init(ServletConfig):void</li><li>getInitParameter(String):String</li><li>getInitParameterNames():Enumeration&lt;String&gt;</li><li>getServletConfig():ServletConfig</li><li>getServletContext():servletContext</li><li>getServletInfo():String</li><li>getServletName():String</li><li>service(ServletRequest,ServletResponse):void</li><li>destroy():void</li></ul><p>观察GenericServlet实现过程可知，通过init方法来传入ServletConfig对象，而service在GenericServlet中仍然是一个抽象方法，所以仍然需要一个子类HttpServlet继承它并且实现这个方法，通过推测可知HttpServlet继承了GenericServlet，其主要功能应该是实现了service的各种细节和设计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericServlet</span><br></code></pre></td></tr></table></figure><p>HttpServlet的主要常量和方法有：</p><ul><li><p>常量</p><ul><li>&#96;&#96;&#96;java<br>private static final String METHOD_GET &#x3D; “GET”;<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br>- ```java<br>  private static final String METHOD_POST = <span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>方法</p><ul><li>doGet(HttpServletRequest,HttpServletResponse):void</li><li>doPost(HttpServletRequest,HttpServletResponse)void</li><li>service(HttpServletRequest,HttpServletResponse):void</li><li>service(ServletRequest,ServletResponse):void</li></ul></li></ul><p>其中，值的关注的是service(ServletRequest,ServletResponse)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        HttpServletRequest request;<br>        HttpServletResponse response;<br>        <span class="hljs-keyword">try</span> &#123;<br>            request = (HttpServletRequest)req;<br>            response = (HttpServletResponse)res;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassCastException var6) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(lStrings.getString(<span class="hljs-string">&quot;http.non_http&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.service(request, response);<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过阅读上述源码可知ServletRequest和ServletResponse是可以强制转换到HttpServletRequest和HttpServletResponse的，单独拿出ServletRequest来说，它的类型实际上为org.apache.catalina.connector.RequestFacade，而RequestFacade的（实现接口）上层为HttpServletRequest，而HttpServletRequest的（继承）上层为ServletRequest，故ServletRequest是可以强制转换为HttpServletRequest的，ServletResponse同理。</p><p>上面强制转换之后，将强制转换后的两个对象传入service(HttpServletRequest,HttpServletResponse)并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br>        <span class="hljs-type">long</span> lastModified;<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;GET&quot;</span>)) &#123;<br>            lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>            <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1L</span>) &#123;<br>                <span class="hljs-built_in">this</span>.doGet(req, resp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> ifModifiedSince;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ifModifiedSince = req.getDateHeader(<span class="hljs-string">&quot;If-Modified-Since&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>                    ifModifiedSince = -<span class="hljs-number">1L</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="hljs-number">1000L</span> * <span class="hljs-number">1000L</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>                    <span class="hljs-built_in">this</span>.doGet(req, resp);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    resp.setStatus(<span class="hljs-number">304</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;HEAD&quot;</span>)) &#123;<br>            lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>            <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>            <span class="hljs-built_in">this</span>.doHead(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doPost(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;PUT&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doPut(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;DELETE&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doDelete(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doOptions(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;TRACE&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doTrace(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);<br>            Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;method&#125;;<br>            errMsg = MessageFormat.format(errMsg, errArgs);<br>            resp.sendError(<span class="hljs-number">501</span>, errMsg);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>这个方法就是用来判断浏览器传过来的请求方式，并将HttpServletRequest和HttpServletResponse传入相应的doXXX()方法执行，如判断为Post方式，执行this.doPost(req, resp);</p><p>故继承HttpServlet只需要重写相应的doXXX方法即可，HttpServletRequest和HttpServletResponse已经被HttpServlet传入了。</p><h2 id="二、Servlet中的一些对象详解"><a href="#二、Servlet中的一些对象详解" class="headerlink" title="二、Servlet中的一些对象详解"></a>二、Servlet中的一些对象详解</h2><h5 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h5><p>在web.xml内可以在每个<code>&lt;servlet&gt;</code>内的 <code>&lt;init-param&gt;</code> 标签内配置一些键值对参数，然后通过ServletConfig 对象获取到这些键值对参数。其中，ServletConfig 对象通过实现GenericServlet的init方法来获取。</p><ul><li>getInitParameter(String)：通过传入键来获取值</li><li>getInitParameterNames():Enumeration&lt;String&gt;：获取所有键值对</li></ul><h5 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h5><p>ServletContext一般被称为context域对象，它是一个web应用中所有Servlet共享的同一个对象，用来实现这个web应用中servlet相互之间的通信</p><p>常用有两种</p><p>一种是类似ServletConfig的键值对共享，只不过ServletConfig的作用域在单个servlet内，而ServletConfig的作用域在当前web的所有servlet内，所以它在web.xml内的键值对通过<code>&lt;context-param&gt;</code>定义在<code>&lt;web-app</code>下，ServletContext对象可以通过getServletContext方法直接调用，得到ServletContext对象之后，可调以下方法：</p><ul><li>getInitParameter(String)：通过传入键获得值</li><li>getInitParameterNames():Enumeration&lt;String&gt; ：获得所有键值对</li></ul><p>另一种是读取资源文件，</p><h5 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h5><h5 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h5><p>TODO ：</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git的基础命令</title>
    <link href="/Nroma/2021/02/22/Git/"/>
    <url>/Nroma/2021/02/22/Git/</url>
    
    <content type="html"><![CDATA[<p>orcl.mshome.net</p><p>123456</p><p>Git的一般步骤</p><p>仓库的搭建或获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>OR<br>git <span class="hljs-built_in">clone</span><br></code></pre></td></tr></table></figure><p>查看文件状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p>忽略文件（.gitignore）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch 列出所有本地分支<br>git branch -r 列出所有远程分支<br>git branch [branch_name] 新建一个分支，但依然停留在当前分支<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge [branch]</span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span><br><br></code></pre></td></tr></table></figure><p>idea test</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理（Proxy）</title>
    <link href="/Nroma/2021/01/12/Proxy/"/>
    <url>/Nroma/2021/01/12/Proxy/</url>
    
    <content type="html"><![CDATA[<h4 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h4><p>控制其他对象的访问。</p><span id="more"></span><h4 id="Design-principle"><a href="#Design-principle" class="headerlink" title="Design principle"></a>Design principle</h4><p>代理分为四类：</p><ul><li>远程代理（Remoto Proxy）:控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。</li><li>虚拟代理（Virtual Proxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。</li><li>保护代理（Protection Proxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。</li><li>智能代理（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</li></ul><p>Subject：抽象主题角色，声明了目标对象和代理对象的共同接口，这样一来在任何可以使用目标对象的地方都可以使用代理对象。</p><p>RealSubject：具体主题角色，也称为委托角色或者被代理角色。定义了代理对象所代表的目标对象。</p><p>Proxy：代理主题角色，也叫委托类、代理类。代理对象内部含有目标对象的引用，从而可以在任何时候操作目标对象；代理对象提供一个与目标对象相同的接口，以便可以在任何时候替代目标对象。代理对象通常在客户端调用传递给目标对象之前或之后，执行某个操作，而不是单纯地将调用传递给目标对象。</p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>主题角色接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">operate</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主题角色实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;RealSubject&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;<br><br><span class="hljs-keyword">private</span> Subject subject=<span class="hljs-literal">null</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">if</span>(subject==<span class="hljs-literal">null</span>) &#123;<br>subject=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RealSubject</span>();<br>System.out.println(<span class="hljs-string">&quot;Proxy&quot;</span>);<br><span class="hljs-built_in">this</span>.subject.operate();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Subject subject=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>();<br>subject.operate();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路：在代理类内代理创建具体角色的对象并处理一些业务之后，调用具体对象的方法后，将Proxy返回出来，用于都继承自Subject，故可以被用户看成具体角色。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例(Singleton)</title>
    <link href="/Nroma/2021/01/12/Singleton/"/>
    <url>/Nroma/2021/01/12/Singleton/</url>
    
    <content type="html"><![CDATA[<h4 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h4><p>确保一个类只有一个实例，并通过该实例的全局访问方法。</p><span id="more"></span><h4 id="Design-principle"><a href="#Design-principle" class="headerlink" title="Design principle"></a>Design principle</h4><p> 使用一个私有构造方法、私有静态变量和一个公有静态方法实现。</p><p>其中，</p><p>私有构造方法保证其他类不能通过构造方法来创建对象实例。</p><p>私有静态变量保证此静态变量不能被其他类调用。</p><p>公有静态方法是全局访问方法。</p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><h5 id="1、懒汉式-线程不安全"><a href="#1、懒汉式-线程不安全" class="headerlink" title="1、懒汉式-线程不安全"></a>1、懒汉式-线程不安全</h5><p>私有静态实例被延迟创建，如果没有用到该实例，可节约资源</p><p>但是如果多个线程同时进入<code>if(uniqueInstance==null)</code>，会导致多次创建实例，故线程不安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInSingleton</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(uniqueInstance==<span class="hljs-literal">null</span>) &#123;<br>uniqueInstance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br><span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="2、饿汉式-线程安全"><a href="#2、饿汉式-线程安全" class="headerlink" title="2、饿汉式-线程安全"></a>2、饿汉式-线程安全</h5><p>预先实例化，不会产生线程安全问题，但是也丢失了延迟实例化带来的节约资源的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">uniqueInstance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInSingleton</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、懒汉式-线程安全"><a href="#3、懒汉式-线程安全" class="headerlink" title="3、懒汉式-线程安全"></a>3、懒汉式-线程安全</h5><p>可以给全局访问方法加一个锁，从而避免一个时间点多个线程进入。</p><p>但是仍然有性能问题，如阻塞问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getUniqueInSingleton</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(uniqueInstance==<span class="hljs-literal">null</span>) &#123;<br>uniqueInstance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br><span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、双重校验锁-线程安全"><a href="#4、双重校验锁-线程安全" class="headerlink" title="4、双重校验锁-线程安全"></a>4、双重校验锁-线程安全</h5><p>对象只需要被实例化一次，之后可以直接使用，所以加锁只需要加部分代码，并在进入时判断是否被实例化，如果没有再加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInSingleton</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(uniqueInstance==<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span>(uniqueInstance == <span class="hljs-literal">null</span>)&#123;<br>             uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>&#125;<br><span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个 if 语句用来避免 uniqueInstance 已经被实例化之后的加锁操作，而第二个 if 语句进行了加锁，所以只能有一个线程进入，就不会出现 uniqueInstance &#x3D;&#x3D; null 时两个线程同时进行实例化操作。</p><h5 id="5、静态内部类实现-线程安全"><a href="#5、静态内部类实现-线程安全" class="headerlink" title="5、静态内部类实现-线程安全"></a>5、静态内部类实现-线程安全</h5><p>当Singleton被加载时，静态内部类并没有被加载，只有当有方法调用全局访问方法时，JVM初始化实例一次。</p><p>既可以延迟初始化，也可以有JVM提供的线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInSingleton</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6、枚举实现"><a href="#6、枚举实现" class="headerlink" title="6、枚举实现"></a>6、枚举实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>INSTANCE;<br><br><span class="hljs-keyword">private</span> String objectName;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> objectName;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObjectName</span><span class="hljs-params">(String objectName)</span> &#123;<br><span class="hljs-built_in">this</span>.objectName=objectName;<br>&#125;<br><br><span class="hljs-comment">//单例测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span> &#123;<br><span class="hljs-type">Singleton</span> <span class="hljs-variable">firstSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>firstSingleton.setObjectName(<span class="hljs-string">&quot;firstName&quot;</span>);<br>System.out.println(firstSingleton.getObject());<br><br><span class="hljs-type">Singleton</span> <span class="hljs-variable">secondSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>secondSingleton.setObjectName(<span class="hljs-string">&quot;secondName&quot;</span>);<br><br><span class="hljs-comment">//创建实例会被覆盖</span><br>System.out.println(firstSingleton.getObject());<br>System.out.println(secondSingleton.getObject());<br><br><span class="hljs-comment">//反射获取</span><br><span class="hljs-keyword">try</span> &#123;<br>Singleton[] enumConstants = Singleton.class.getEnumConstants();<br><span class="hljs-keyword">for</span>(Singleton enumConstant : enumConstants) &#123;<br>System.out.println(enumConstant.getObject());<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以防止反射攻击。因为JVM会保证只实例化一次，且多次序列化后只会覆盖，并不会产生多个实例，不需要用transient 修饰</p><p>反射攻击：通过setAccessible()可以将私有构造方法设置为公有，然后就可以实例化了。</p><p>transient ：用transient关键字标记的成员变量不参与序列化过程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写的类Tomcat的Web服务器：NrmServer</title>
    <link href="/Nroma/2020/11/12/NrmServer/"/>
    <url>/Nroma/2020/11/12/NrmServer/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>手写的一个类Tomcat的轮子，该项目我放在了github中。</p><span id="more"></span><h3 id="2-NroServer介绍"><a href="#2-NroServer介绍" class="headerlink" title="2.NroServer介绍"></a>2.NroServer介绍</h3><p>简单web服务器</p><h5 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h5><p>NrmServer –|src –|cn –|nroma–|Dispatcher.java</p><p>​               |                       |LoginServlet.java</p><p>​               |                           |RegisterServlet.java</p><p>​   |                                   |Request.java</p><p>​       |                       |Response.java</p><p>​   |                       |Server.java</p><p>​                       |                       |Servlet.java</p><p>​   |                       |WebApp.java</p><pre><code class="hljs">                   |                       |WebContext.java</code></pre><p>​   |                       |WebHandler.java</p><p>​   |src –|cn –|nroma–|model –|Servlet.java</p><p>​               |                                    |ServletMapping.java</p><p>​               |         |error.html</p><p>​               |         |index.html</p><p>​           |         |web.xml</p><p>​           |Login.html</p><h5 id="2-2-部署项目"><a href="#2-2-部署项目" class="headerlink" title="2.2 部署项目"></a>2.2 部署项目</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/moonris/</span>NrmServer.git <br></code></pre></td></tr></table></figure><h5 id="2-3-启动项目"><a href="#2-3-启动项目" class="headerlink" title="2.3 启动项目"></a>2.3 启动项目</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">启动<span class="hljs-built_in">Server</span><br></code></pre></td></tr></table></figure><h5 id="2-4-访问项目"><a href="#2-4-访问项目" class="headerlink" title="2.4 访问项目"></a>2.4 访问项目</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>locathost:<span class="hljs-number">8080</span>/<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>locathost:<span class="hljs-number">8080</span>/g<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>locathost:<span class="hljs-number">8080</span>/r<br></code></pre></td></tr></table></figure><h3 id="3、思路"><a href="#3、思路" class="headerlink" title="3、思路"></a>3、思路</h3><h5 id="1-解析web-xml文件，分别将servlet-servlet-mapping放到map集合中去，然后我们根据请求的url-去找到对应的servlet-class的名字，然后根据反射，调用service方法。"><a href="#1-解析web-xml文件，分别将servlet-servlet-mapping放到map集合中去，然后我们根据请求的url-去找到对应的servlet-class的名字，然后根据反射，调用service方法。" class="headerlink" title="1.解析web.xml文件，分别将servlet,servlet-mapping放到map集合中去，然后我们根据请求的url,去找到对应的servlet-class的名字，然后根据反射，调用service方法。"></a>1.解析web.xml文件，分别将servlet,servlet-mapping放到map集合中去，然后我们根据请求的url,去找到对应的servlet-class的名字，然后根据反射，调用service方法。</h5><h5 id="2-对request和response进行封装。"><a href="#2-对request和response进行封装。" class="headerlink" title="2.对request和response进行封装。"></a>2.对request和response进行封装。</h5><h5 id="3-servlet的上下文-封装servlet与请求"><a href="#3-servlet的上下文-封装servlet与请求" class="headerlink" title="3.servlet的上下文,封装servlet与请求"></a>3.servlet的上下文,封装servlet与请求</h5><h5 id="4-响应客户端，响应行，响应头，响应体，通过流的操作发送个客户端。"><a href="#4-响应客户端，响应行，响应头，响应体，通过流的操作发送个客户端。" class="headerlink" title="4.响应客户端，响应行，响应头，响应体，通过流的操作发送个客户端。"></a>4.响应客户端，响应行，响应头，响应体，通过流的操作发送个客户端。</h5><h3 id="4-源码下载"><a href="#4-源码下载" class="headerlink" title="4.源码下载"></a>4.源码下载</h3><h5 id="github-https-github-com-moonris-NroServer"><a href="#github-https-github-com-moonris-NroServer" class="headerlink" title="github:https://github.com/moonris/NroServer"></a>github:<a href="https://github.com/moonris/NroServer">https://github.com/moonris/NroServer</a></h5>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写的类Mybatis的持久层框架NrmMybatis</title>
    <link href="/Nroma/2020/11/12/NrmMybatis/"/>
    <url>/Nroma/2020/11/12/NrmMybatis/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>手写的一个类Mybatis的轮子，该项目我放在了github中。</p><p>只写了select方法，其他可类推</p><span id="more"></span><h3 id="2-NroServer介绍"><a href="#2-NroServer介绍" class="headerlink" title="2.NroServer介绍"></a>2.NroServer介绍</h3><p>简单模拟Mybatis</p><h5 id="2-1-部署项目"><a href="#2-1-部署项目" class="headerlink" title="2.1 部署项目"></a>2.1 部署项目</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/moonris/</span>NrmMybatis.git <br></code></pre></td></tr></table></figure><h5 id="2-2-启动项目"><a href="#2-2-启动项目" class="headerlink" title="2.2 启动项目"></a>2.2 启动项目</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">src<span class="hljs-regexp">/main/</span>java<span class="hljs-regexp">/test/</span>Run<br></code></pre></td></tr></table></figure><h3 id="3、思路"><a href="#3、思路" class="headerlink" title="3、思路"></a>3、思路</h3><h5 id="1-解析xml文件，获得mysql配置文件并建立连接返回"><a href="#1-解析xml文件，获得mysql配置文件并建立连接返回" class="headerlink" title="1.解析xml文件，获得mysql配置文件并建立连接返回"></a>1.解析xml文件，获得mysql配置文件并建立连接返回</h5><h5 id="2-解析mapper文件，获得sql对象并返回"><a href="#2-解析mapper文件，获得sql对象并返回" class="headerlink" title="2.解析mapper文件，获得sql对象并返回"></a>2.解析mapper文件，获得sql对象并返回</h5><h5 id="3-创建Excutor及Excutor实现类"><a href="#3-创建Excutor及Excutor实现类" class="headerlink" title="3.创建Excutor及Excutor实现类"></a>3.创建Excutor及Excutor实现类</h5><h5 id="4-通过Session来搭建Configuration和执行器Excutor的桥梁"><a href="#4-通过Session来搭建Configuration和执行器Excutor的桥梁" class="headerlink" title="4.通过Session来搭建Configuration和执行器Excutor的桥梁"></a>4.通过Session来搭建Configuration和执行器Excutor的桥梁</h5><h5 id="5-创建MapperProxy，使用动态代理生成Mapper对象"><a href="#5-创建MapperProxy，使用动态代理生成Mapper对象" class="headerlink" title="5.创建MapperProxy，使用动态代理生成Mapper对象"></a>5.创建MapperProxy，使用动态代理生成Mapper对象</h5>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC的思考</title>
    <link href="/Nroma/2020/11/08/JUC%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/Nroma/2020/11/08/JUC%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h4 id="一、多个线程同时修改一个值如何保证被修改的值的可见性？"><a href="#一、多个线程同时修改一个值如何保证被修改的值的可见性？" class="headerlink" title="一、多个线程同时修改一个值如何保证被修改的值的可见性？"></a>一、多个线程同时修改一个值如何保证被修改的值的可见性？</h4><p>答：正常情况下，多个线程同时访问且修改一个值，当a线程修改这个值，由于线程是异步的，若b线程想修改这个值，则b线程看到的是在主存中还未被修改的值，所以如果不想上锁来阻塞线程用来等待a同步完成这个值的话，可以利用volatile关键字修饰变量，被修饰地变量会被其他线程注意到，其被修改后会及时刷新到主存中，代码如下：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVolatile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ThreadDame threadDame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDame</span>();<br>        Thread thread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(threadDame);<br>        thread.start();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (threadDame)&#123;<br>                <span class="hljs-keyword">if</span>(threadDame.flag)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;main读取到的flag为&quot;</span>+threadDame.flag);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span><span class="hljs-literal">false</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">200</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        flag=<span class="hljs-literal">true</span>;<br>        System.out.println(<span class="hljs-string">&quot;ThreadDame线程修改后的flag为&quot;</span>+flag);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Volatile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ThreadDame threadDame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDame</span>();<br>        Thread thread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(threadDame);<br>        thread.start();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(threadDame.flag)&#123;<br>                System.out.println(<span class="hljs-string">&quot;main读取到的flag为&quot;</span>+threadDame.flag);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="二、因，i-等操作不是原子操作，那么在java中如何来保证变量的原子性？"><a href="#二、因，i-等操作不是原子操作，那么在java中如何来保证变量的原子性？" class="headerlink" title="二、因，i++等操作不是原子操作，那么在java中如何来保证变量的原子性？"></a>二、因，i++等操作不是原子操作，那么在java中如何来保证变量的原子性？</h4><p>答：例如，若多个线程实例同时例如i++这类操作，可能线程会因为操作不是原语，而获得i++三步操作的任意一步值，从而影响结果，故可以通过AtomicInteger创建原子变量，通过其构造方法赋值，默认为0，通过AtomicInteger的一些方法来达到类似i++等方法的效果，同时也保证了数据的原子性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestIcon</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        AtomicDemo atomicDemo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicDemo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(atomicDemo).start();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    AtomicInteger i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i.getAndIncrement();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">200</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(getI());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="三、如何让线程等待另一个线程执行完毕再执行呢？"><a href="#三、如何让线程等待另一个线程执行完毕再执行呢？" class="headerlink" title="三、如何让线程等待另一个线程执行完毕再执行呢？"></a>三、如何让线程等待另一个线程执行完毕再执行呢？</h4><p>答：线程是并发的，尽管a线程可调用b线程，但如果b线程执行时间太过与长，a线程甚至等不到b线程完毕，自己就先执行完毕了，故可以设置一个等待器，也称为闭锁机制，通过CountDownLatch的构造方法传入一个初始次数值，执行CountDownLatch的countDown方法来减去1，通过CountDownLatch的await()方法等待此次数值等于零，如果等于零，那么执行await()之后的进程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//闭锁机制，线程是并发的，等待当前所有线程执行完成，当前线程才会执行</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCountDownLatch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> CountDownLatch latch=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">10</span>);<br>        LatchDemo id=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LatchDemo</span>(latch);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(id).start();<br>        &#125;<br>        <span class="hljs-keyword">try</span>&#123;<br>            latch.await();  <span class="hljs-comment">//等待计时器==0</span><br>        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span>System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗费时间为&quot;</span>+(end-start));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LatchDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> CountDownLatch latch;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LatchDemo</span><span class="hljs-params">(CountDownLatch latch)</span>&#123;<br>        <span class="hljs-built_in">this</span>.latch=latch;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                        System.out.println(i);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<span class="hljs-comment">//10----&gt;0</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="四、如果多个线程同时访问一个List，则可能出现并发异常（ConcurrentModificationException），如何解决？"><a href="#四、如果多个线程同时访问一个List，则可能出现并发异常（ConcurrentModificationException），如何解决？" class="headerlink" title="四、如果多个线程同时访问一个List，则可能出现并发异常（ConcurrentModificationException），如何解决？"></a>四、如果多个线程同时访问一个List，则可能出现并发异常（ConcurrentModificationException），如何解决？</h4><p>答：正常情况下，如果如果多个线程同时访问一个List，可能出现并发异常，通过阅读源码可知，当遍历集合的同时，又往集合中添加或者删除元素，就可能报并发修改异常。故可以通过CopyOnWriteArrayList来创建arraylist，它内部持有一个ReentrantLock，且底层使用了volatile transient声明数组array，除了读取外，其余操作（增删改）都会获得锁，故它是安全的</p><p>如下代码，用它来代替ArrayList，可以保证数据安全，且无异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//锁分段机制，多个线程访问一个list，不会出现并发异常</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConcurrent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ThreadDemo2 threadDemo2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDemo2</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(threadDemo2).start();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//10个线程同时访问</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CopyOnWriteArrayList&lt;String&gt; list=<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span>&#123;<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        Iterator&lt;String&gt;iterator=list.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>            list.add(<span class="hljs-string">&quot;ddd&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于操作系统实验环境搭建(使用GCC)及实训代码记录与分析</title>
    <link href="/Nroma/2020/10/19/OSCODE/"/>
    <url>/Nroma/2020/10/19/OSCODE/</url>
    
    <content type="html"><![CDATA[<h2 id="实验环境搭建"><a href="#实验环境搭建" class="headerlink" title="实验环境搭建"></a>实验环境搭建</h2><span id="more"></span><h4 id="（一）介绍"><a href="#（一）介绍" class="headerlink" title="（一）介绍"></a>（一）介绍</h4><blockquote><p><strong>Vmware:</strong></p><p>VMWare (Virtual Machine ware)是一个虚拟机软件，它可以使你在一台机器上同时运行二个或更多Windows、DOS、LINUX系统。通过下载安装VMware Workstation，相当于在Windows系统里再安装了一个系统，而且它还可以像应用程序那样进行切换。每个虚拟机操作系统你都可以进行虚拟的分区、配置而不影响真实硬盘的数据，甚至可以通过网卡将几台虚拟机用网卡连接为一个局域网，极其方便</p><p><strong>Redhat:</strong></p><p>红帽，属于Lunux发行版的一种。</p></blockquote><h4 id="（二）、下载"><a href="#（二）、下载" class="headerlink" title="（二）、下载"></a>（二）、下载</h4><blockquote><h6 id="1、下载虚拟机"><a href="#1、下载虚拟机" class="headerlink" title="1、下载虚拟机"></a>1、下载虚拟机</h6><blockquote><p>百度网盘：<a href="https://pan.baidu.com/s/1sZYSzGqluh1_EBYbwUc08g">Vmware-Workstation</a></p><p>提取码v3qt</p><p>或</p><p>官网：<a href="https://www.vmware.com/products/workstation-pro.html">Vmware-Workstation</a></p></blockquote><h6 id="2、下载linux镜像"><a href="#2、下载linux镜像" class="headerlink" title="2、下载linux镜像"></a>2、下载linux镜像</h6><blockquote><p><a href="https://pan.baidu.com/s/1quQlsFrWjNrNvgODe2UIfg">redhat-7.0.iso</a></p><p>提取码wh55</p></blockquote><p>注：如果通过百度网盘下载，redhat-7.0压缩包两个都要下，压缩包有前后置关系，缺一不可</p><p>​也可以网上找别的Linux发行版，效果是一样的。</p></blockquote><h4 id="（三）、安装Vmware-Workstation"><a href="#（三）、安装Vmware-Workstation" class="headerlink" title="（三）、安装Vmware-Workstation"></a>（三）、安装Vmware-Workstation</h4><p>下载后双击安装包，进入安装页面</p><p><img src="/Nroma/1.JPG"></p><p>点击Next</p><p><img src="/Nroma/22.JPG"></p><p>勾选I accept the terms in the License Agreement，之后点击Next</p><p><img src="/Nroma/33.JPG"></p><p>点击Change更改安装位置，Keyboard driver可安可不安，点击Next</p><p><img src="/Nroma/44,JPG"></p><p>勾选所需的快捷方式，点击Next</p><p><img src="/Nroma/55.JPG"></p><p>准备安装，点击Install安装</p><p>等待安装完毕</p><p><img src="/Nroma/66.JPG"></p><p>点击License</p><p><img src="/Nroma/77.JPG"></p><p>此版本内置破解脚本，会自动将许可证复制入文本框内，直接点Enter</p><p><img src="/Nroma/88.JPG"></p><p>点击Finish</p><p>安装结束！！！</p><p>注意：可能会需要重启，也可能需要开启虚拟化，直接在bootloader 或BISO更改</p><h4 id="四、安装Linux镜像文件"><a href="#四、安装Linux镜像文件" class="headerlink" title="四、安装Linux镜像文件"></a>四、安装Linux镜像文件</h4><p>打开Vmware-Workstation后</p><p><img src="/Nroma/99.JPG"></p><p>进入主页面</p><p>点击File-</p><p>​New Virtual Machine Wizard</p><p><img src="/Nroma/9.JPG"></p><p>​选择Custom，点击Next</p><p><img src="/Nroma/a1.JPG"></p><p>Hardware选择Workstation 15.x，点击Next</p><p><img src="/Nroma/a2.JPG"></p><p>选择Installer disc image file，点击Browser选择Linux镜像文件，之后点击Next</p><p><img src="/Nroma/a3.JPG"></p><p>输入Full name，之后输入UserName(用户名)，password(密码)，confirm(确认密码)</p><p>注：此密码适用于root and user </p><p><img src="/Nroma/a4.JPG"></p><p>输入虚拟机名字和更改安装位置，之后点击Next</p><p><img src="/Nroma/a5.JPG"></p><p>选择处理器核心总数，建议1，1，点击Next</p><p><img src="/Nroma/a6.JPG"></p><p>滑动选择运行内存，建议1024MB~2048MB，点击Next</p><p><img src="/Nroma/a7.JPG"></p><p>选择网络类型，建议选择桥接网络或NAT地址转换，也就是第一第二项，点击Next</p><p><img src="/Nroma/a8.JPG"></p><p>选择I&#x2F;O控制器，建议选择LSI Logic默认，点击Next</p><p><img src="/Nroma/a9.JPG"></p><p>选择磁盘结构类型，建议SCSI 或 SATA 或NVMe，点击Next</p><p><img src="/Nroma/a10.JPG"></p><p>选择如何创建使用磁盘，建议选择第一项</p><p><img src="/Nroma/a11.JPG"></p><p>设置磁盘大小，建议10GB~40GB，之后选择最后项Split Virtual disk intomultiple files，点击Next</p><p><img src="/Nroma/a12.JPG"></p><p>设置磁盘文件在windows中的名字（不重要），点击Next</p><p><img src="/Nroma/a13.JPG"></p><p>点击Finish，安装虚拟机</p><p>等待几秒后成功开启虚拟机</p><p>注：如跳出VMware Toole安装对话框，点击Download and Install 安装<strong>Vmware Tools</strong></p><h5 id="设置安装参数，等待系统安装完成，大概分以下几步"><a href="#设置安装参数，等待系统安装完成，大概分以下几步" class="headerlink" title="设置安装参数，等待系统安装完成，大概分以下几步"></a>设置安装参数，等待系统安装完成，大概分以下几步</h5><p>1.选择语言</p><p>2设置时区，语言，键盘布局</p><p>3安装源和软件选择</p><p>4磁盘分区与文件系统设置</p><p>5设置用户密码</p><p>其中，<em><strong>最值得注意的是软件选择，需要安装开发工具，GUI，GNOME桌面等</strong></em></p><p><em><strong>文件系统可以用默认自动分配</strong></em></p><p>之后点击开始安装等待安装完成即可。</p><h2 id="实验三：进程管理和控制API"><a href="#实验三：进程管理和控制API" class="headerlink" title="实验三：进程管理和控制API"></a>实验三：进程管理和控制API</h2><h4 id="获取当前进程及其父进程的ID（get-process-pId-c）"><a href="#获取当前进程及其父进程的ID（get-process-pId-c）" class="headerlink" title="获取当前进程及其父进程的ID（get_process_pId.c）"></a>获取当前进程及其父进程的ID（get_process_pId.c）</h4><h6 id="程序："><a href="#程序：" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/13</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;current process ID is %d\n&quot;</span>,getpid());<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;paerent process ID is %d\n&quot;</span>,getppid());<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[nroma@localhost Desktop]</span>$ gcc get_process_pId.c <br><span class="hljs-string">[nroma@localhost Desktop]</span>$ ./a.<span class="hljs-keyword">out</span><br>current process ID <span class="hljs-keyword">is</span> <span class="hljs-number">12870</span><br>paerent process ID <span class="hljs-keyword">is</span> <span class="hljs-number">12748</span><br><span class="hljs-string">[nroma@localhost Desktop]</span>$<br></code></pre></td></tr></table></figure><h6 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析:"></a>程序分析:</h6><blockquote><p>虚拟机装的redhet7运行99%都是父进程先运行，但是很多低版本的Lunux进程是异步执行的，以下进程执行顺序都是 父&gt;子</p></blockquote><h4 id="使用fork-函数创建子进程-fork-create-child-process-c"><a href="#使用fork-函数创建子进程-fork-create-child-process-c" class="headerlink" title="使用fork()函数创建子进程(fork_create_child_process.c)"></a>使用fork()函数创建子进程(fork_create_child_process.c)</h4><h6 id="程序：-1"><a href="#程序：-1" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/13</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> pid;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;process create test\n&quot;</span>);<br>pid = fork();<br><span class="hljs-keyword">switch</span>( pid )<br>    &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is child process,return id is %d,ppid is %d\n&quot;</span>,pid,getppid());<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this parent process,pid is %d,return id is %d\n&quot;</span>,getpid(),pid);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ gcc fork_create_child_process.c <br>[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ ./a.<span class="hljs-keyword">out</span> <br>process create test<br><span class="hljs-keyword">this</span> parent process,pid <span class="hljs-keyword">is</span> <span class="hljs-number">13376</span>,<span class="hljs-keyword">return</span> id <span class="hljs-keyword">is</span> <span class="hljs-number">13377</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> child process,<span class="hljs-keyword">return</span> id <span class="hljs-keyword">is</span> <span class="hljs-number">0</span>,ppid <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br>[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ <br></code></pre></td></tr></table></figure><h6 id="程序分析："><a href="#程序分析：" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>fork创建子进程过程可以想象为一个链表，父程序的指针域指向子程序的数据域，子程序的指针域指向0。</p><p>当程序执行到fork后，此进程分裂为两个进程并分配两个PID来向下执行，其中，<strong>父程序与子程序并发执行</strong>。</p><p>设先父程序执行，因为执行成功，所以父程序的pid变量值被fork()返回了子进程的PID值，故当进入switch时，条件default成立，依次输出父进程当前PID和父程序的pid属性（也就是子进程的PID），此时，父进程结束。</p><p>子进程此时开始执行，因为fork()执行成功，所以子程序的pid变量值被fork()返回了0，故当进入switch时，条件case成立，依次输出当前的pid变量0和当前的父进程PID，但是由于父进程早已结束，且未调用wait()方法来处理这个子进程，故这个进程变成一个孤儿进程，因其没有父亲，故被linux的进程0（init）或者进程1（systemd）收养，故返回的父进程PID为0或1。</p></blockquote><h4 id="例3-3：孤儿进程的收养（orphan-process-adopted-c）"><a href="#例3-3：孤儿进程的收养（orphan-process-adopted-c）" class="headerlink" title="例3.3：孤儿进程的收养（orphan_process_adopted.c）"></a>例3.3：孤儿进程的收养（orphan_process_adopted.c）</h4><h6 id="程序：-2"><a href="#程序：-2" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/13</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-type">int</span> pid ;<br>pid = fork();<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">-1</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error&quot;</span>);<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;before father dead,pid is %d,ppid is %d\n&quot;</span>,getpid(),getppid());<br>sleep(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after father dead,pid is %d,ppid is %d\n&quot;</span>,getpid(),getppid());<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is father process,pid is %d,child pid is %d\n&quot;</span>,getpid(),pid);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-2"><a href="#运行结果：-2" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ gcc orphan_process_adopted.c <br>[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ ./a.<span class="hljs-keyword">out</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> father process,pid <span class="hljs-keyword">is</span> <span class="hljs-number">3175</span>,child pid <span class="hljs-keyword">is</span> <span class="hljs-number">3176</span><br>before father dead,pid <span class="hljs-keyword">is</span> <span class="hljs-number">3176</span>,ppid <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br>[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ after father dead,pid <span class="hljs-keyword">is</span> <span class="hljs-number">3176</span>,ppid <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h6 id="程序分析：-1"><a href="#程序分析：-1" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>首先通过fork创建子进程，</p><p>设父进程先运行，在创建子进程之后，此时父程程序的pid属性值为子进程的PID，通过判断pid进入父进程，依次输出父进程当前PID与刚刚获取到的pid属性值，程序退出</p><p>其后运行子程序，此时子程序已经没有父进程，被进程0（init）或进程1（systemd）收养，故输出当前子进程的pid的养父pid 0 或 1</p><p>此时程序作为僵尸程序存在与系统中。</p></blockquote><h4 id="例3-4-使用wait-函数等待子进程结束-wait-process-end-c"><a href="#例3-4-使用wait-函数等待子进程结束-wait-process-end-c" class="headerlink" title="例3.4 使用wait()函数等待子进程结束(wait_process_end.c)"></a>例3.4 使用wait()函数等待子进程结束(wait_process_end.c)</h4><h6 id="程序：-3"><a href="#程序：-3" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/14</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> pid;<br><span class="hljs-type">int</span> stat_val;<br><span class="hljs-type">int</span> end_pid;<br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is child process,pid is %d\n&quot;</span>,getpid());<br>sleep(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">27</span>);<br>&#125;<span class="hljs-keyword">else</span><br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is father process,pid is %d\n&quot;</span>,getpid());<br>end_pid=wait(&amp;stat_val);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;end status_val is %d\n&quot;</span>,stat_val);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;end status is %d\n&quot;</span>,WEXITSTATUS(stat_val));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wait return value is %d\n&quot;</span>,end_pid);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;process end pid = %d\n&quot;</span>,getpid());<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-3"><a href="#运行结果：-3" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ gcc wait_process_end.c <br>[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ ./a.<span class="hljs-keyword">out</span> <br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> father process,pid <span class="hljs-keyword">is</span> <span class="hljs-number">3576</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> child process,pid <span class="hljs-keyword">is</span> <span class="hljs-number">3577</span><br>end status_val <span class="hljs-keyword">is</span> <span class="hljs-number">6912</span><br>end status <span class="hljs-keyword">is</span> <span class="hljs-number">27</span><br>wait <span class="hljs-keyword">return</span> value <span class="hljs-keyword">is</span> <span class="hljs-number">3577</span><br>process end pid = <span class="hljs-number">3576</span><br>[<span class="hljs-symbol">nroma@</span>localhost Desktop]$ <br></code></pre></td></tr></table></figure><h6 id="程序分析：-2"><a href="#程序分析：-2" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>首先通过fork创建子进程，</p><p>设父进程先运行，在创建子进程之后，进入else内，输出父进程PID，然后通过wait等待子进程结束</p><p>等待中执行子进程，输出当前PID后，执行sleep10 ，之后通过exit(27)结束，此时父进程等待到子进程结束，把子进程退出时的状态存入stat_val，且将子进程结束的PID传入end_pid中，接着输出整型的状态值stat_val，然后通过宏方法WEXITSTATUS(stat_val)来提取这个子进程的返回值并输出，最后输出end_pid和当前pid，父进程结束。</p></blockquote><h2 id="实验四：进程通信API"><a href="#实验四：进程通信API" class="headerlink" title="实验四：进程通信API"></a>实验四：进程通信API</h2><h4 id="软中断信号处理-忽略信号（singnal-sig-ing-c）"><a href="#软中断信号处理-忽略信号（singnal-sig-ing-c）" class="headerlink" title="软中断信号处理-忽略信号（singnal_sig_ing.c）"></a>软中断信号处理-忽略信号（singnal_sig_ing.c）</h4><h6 id="程序：-4"><a href="#程序：-4" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/14</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>signal(SIGINT,SIG_IGN);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ctrl+c&quot;</span>);<br>sleep(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-4"><a href="#运行结果：-4" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>gcc signal_sig_ing.c <br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>./a.<span class="hljs-keyword">out</span> <br>^C^\Quit (core dumped)<br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><h6 id="程序分析：-3"><a href="#程序分析：-3" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>通过signal来指定接收信号后行为。</p><p>SIGINT 为程序终止信号，通常为Ctrl+C或者Delete。</p><p>SIG_ING 为忽略信号。</p><p>通过传入signal(SIGINT,SIG_INT)来忽略SIGINT信号，也就是Ctrl+C，也就是此句之后Ctrl+C将不起作用，会被忽略。</p><p>设置一个死循环，测试Ctrl+C，之后用Ctrl+\结束死循环。</p></blockquote><h4 id="软中断信号处理-默认处理（signal-sig-dfl-c）"><a href="#软中断信号处理-默认处理（signal-sig-dfl-c）" class="headerlink" title="软中断信号处理-默认处理（signal_sig_dfl.c）"></a>软中断信号处理-默认处理（signal_sig_dfl.c）</h4><h6 id="程序：-5"><a href="#程序：-5" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/14</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>signal(SIGINT,SIG_DFL);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ctrl+c&quot;</span>);<br>sleep(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-5"><a href="#运行结果：-5" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>gcc signal_sig_dfl.c <br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>./a.<span class="hljs-keyword">out</span> <br>^C<br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><h6 id="程序分析：-4"><a href="#程序分析：-4" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>通过signal来指定信号行为。</p><p>SIGINT 为程序终止信号，通常为Ctrl+C或者Delete。</p><p>SIG_DFL 为默认信号。</p><p>通过传入signal(SIGINT,SIG_DFL)来设置默认SIGINT信号，也就是Ctrl+C，执行此句之后Ctrl+C将可以起到默认的作用。</p><p>设置一个死循环，测试，用Ctrl+C结束死循环。</p></blockquote><h4 id="自定义捕捉信号（signal-function-c）"><a href="#自定义捕捉信号（signal-function-c）" class="headerlink" title="自定义捕捉信号（signal_function.c）"></a>自定义捕捉信号（signal_function.c）</h4><h6 id="程序：-6"><a href="#程序：-6" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/14</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">(<span class="hljs-type">int</span> sigNo)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;catch a signal %d\n&quot;</span>,sigNo);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>signal(SIGINT,function);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ctrl+c&quot;</span>);<br>sleep(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-6"><a href="#运行结果：-6" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>gcc signal_function.c <br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>./a.<span class="hljs-keyword">out</span> <br>^Cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+cctrl+ccatch a signal <span class="hljs-number">2</span><br>^\Quit (core dumped)<br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><h6 id="程序分析：-5"><a href="#程序分析：-5" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>通过signal来指定信号行为</p><p>SIGINT 为程序终止信号，通常为Ctrl+C或者Delete</p><p>function 为自定义信号</p><p>通过传入signal(SIGINT,function)来设置SIGINT信号，也就是Ctrl+C，也就是此句之后，按Ctrl+C执行自定义动作，如程序进入死循环，按下Ctrl+C后由于死循环速度过快，输出若干ctrl+c后输出自定义函数中的输出语句，最后用Ctrl+\结束程序。</p></blockquote><h4 id="管道通信机制-pipe-test-c"><a href="#管道通信机制-pipe-test-c" class="headerlink" title="管道通信机制(pipe_test.c )"></a>管道通信机制(pipe_test.c )</h4><p>注：此程序通过与老师讨论，结论为实训指导书代码与描述有误。</p><p>管道是双向的，其一端既可以通过管道文件描述符定义为写端，也可以定义为读端。</p><p>为配合描述，已修改代码！！！</p><h6 id="程序：-7"><a href="#程序：-7" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/14</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> pid;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>];<span class="hljs-comment">//0 r or 1 w</span><br><span class="hljs-type">char</span> Outpipe[<span class="hljs-number">100</span>],Inpipe[<span class="hljs-number">100</span>];<br>pipe(fd);<br><span class="hljs-keyword">while</span>((pid = fork()) == <span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span>(pid != <span class="hljs-number">0</span>)<br>    &#123;<br>lockf(fd[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">sprintf</span>(Outpipe,<span class="hljs-string">&quot;\n Parent process is sending message!\n&quot;</span>);<br>write(fd[<span class="hljs-number">1</span>],Outpipe,<span class="hljs-number">50</span>);<br>lockf(fd[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>read(fd[<span class="hljs-number">0</span>],Inpipe,<span class="hljs-number">50</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,Inpipe);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-7"><a href="#运行结果：-7" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>gcc pipe_test.c <br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>./a.<span class="hljs-keyword">out</span> <br><br> Parent process is sending message!<br><br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><h6 id="程序分析：-6"><a href="#程序分析：-6" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>首先在fork()之前创建一个pipe()，文件描述符fd[0]和fd[1]指向管道的两端，之后通过fork()创建子进程。</p><p>设父进程先运行，在创建子进程之后，父进程通过lockf()给fd[0]上锁，使得父进程在写的时候子进程无法读取指向的管道，可理解为给管道加异步锁，确保父进程能安全写入数据</p><p>之后通过springf()函数将格式化数据送入OutPipe数组中，通过fd[1]文件描述符将数据通过write()函数写入管道。</p><p>此时，数据写入结束，父进程通过lockf()解锁fd[0]，可理解为给管道解异步锁，开放管道读取端，使得子程序可以进入。</p><p>其后运行子程序，通过fd[0]找到管道读取端口，将数据读入InPipe，最后输出，结束进程。</p></blockquote><h2 id="实验五：内存管理命令和共享内存通信"><a href="#实验五：内存管理命令和共享内存通信" class="headerlink" title="实验五：内存管理命令和共享内存通信"></a>实验五：内存管理命令和共享内存通信</h2><h4 id="将内容写入共享存储区-shm-write-c"><a href="#将内容写入共享存储区-shm-write-c" class="headerlink" title="将内容写入共享存储区(shm_write.c)"></a>将内容写入共享存储区(shm_write.c)</h4><h6 id="程序：-8"><a href="#程序：-8" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim </span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/14</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MODE (S_IRWXU|S_IRGRP|S_IROTH)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFSIZE 4096</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> shmid;<br><span class="hljs-type">char</span> *shmbuf;<br><span class="hljs-keyword">if</span>((shmid = shmget(<span class="hljs-number">1526792193</span>,BUFSIZE,MODE|IPC_CREAT)) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>perror(<span class="hljs-string">&quot;shmget&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;segment created:%d\n&quot;</span>,shmid);<br>system(<span class="hljs-string">&quot;ipcs -m&quot;</span>);<br><span class="hljs-keyword">if</span>((shmbuf = shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) &lt; (<span class="hljs-type">char</span>*)<span class="hljs-number">0</span>)<br>    &#123;<br>perror(<span class="hljs-string">&quot;shmat&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after shmget\n&quot;</span>);<br>system(<span class="hljs-string">&quot;ipcs -m&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(shmbuf,<span class="hljs-string">&quot;Hello world&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-8"><a href="#运行结果：-8" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dns">[nroma@localhost Desktop]$ gcc shm_write.c <br>[nroma@localhost Desktop]$ ./a.out <br>segment created:<span class="hljs-number">720902</span><br><br>------ Shared Memory Segments --------<br>key        shmid      owner      perms      bytes      nattch     status      <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">131072</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">229377</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">327682</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">360451</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">458756</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">16777216</span>   <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">557061</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0</span>x<span class="hljs-number">5b010001</span> <span class="hljs-number">720902</span>     nroma      <span class="hljs-number">744</span>        <span class="hljs-number">4096</span>       <span class="hljs-number">0</span>                       <br><br>after shmget<br><br>------ Shared Memory Segments --------<br>key        shmid      owner      perms      bytes      nattch     status      <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">131072</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">229377</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">327682</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">360451</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">458756</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">16777216</span>   <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0x00000000</span> <span class="hljs-number">557061</span>     nroma      <span class="hljs-number">600</span>        <span class="hljs-number">524288</span>     <span class="hljs-number">2</span>          dest         <br><span class="hljs-number">0</span>x<span class="hljs-number">5b010001</span> <span class="hljs-number">720902</span>     nroma      <span class="hljs-number">744</span>        <span class="hljs-number">4096</span>       <span class="hljs-number">1</span>                       <br><br>[nroma@localhost Desktop]$ <br></code></pre></td></tr></table></figure><h6 id="程序分析：-7"><a href="#程序分析：-7" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>int shmget(key_t key, size_t size, int flag);</p><blockquote><p>key:   长整型标识符，两进程若想看到同一共享内存，标识符设置一样即可。</p><p>size:  共享内存的字节数</p><p>flag:  读写的权限还有IPC_CREAT或IPC_EXCL对应文件的O_CREAT或O_EXCL</p></blockquote><p>程序中，MODE为读取模式，三者如下：</p><blockquote><p>S_IRWXU：</p><p>Mode flag: Read, write, execute by user.</p><p>S_IRGRP：</p><p>Mode flag: Read by group.</p><p>S_IROTH：</p><p>Mode flag: Read by others.</p><p>IPC_CREAT：选项打开时,不管是否已存在该块共享内存，则都返回该共享内存的ID，若不存在则创建共享内存。</p></blockquote><p>故程序通过shmget创建共享内存且将ID保存到shmid中，然后输出为：720902</p><p>之后通过system(“ipcs -m”)来分析共享内存</p><p>分析结果如下</p><blockquote><p>key为0x5b010001，显然是将1526792193通过十进制转换为十六进制得到的。</p><p>shmid栏中列出共享内存的ID，这个值是唯一的。</p><p>owner栏中列出创建共享内存的用户是nroma。</p><p>perms栏中列出共享内存的权限为744。</p><p>bytes栏中列出这块共享内存的大小,创建时设置为4096个字节。</p><p>nattch栏中列出连接在关联的共享内存段的进程数为0</p></blockquote><p>然后通过shmat将进程挂接到此共享内存段，返回一个指向此内存段的指针赋给shmbuf。</p><p>之后继续调用system(“ipcs -m”)来分析共享内存.</p><p>分析结果如下:</p><blockquote><p>nattch连接在关联的共享内存段的进程数为1,说明进程已经挂接到此共享内存上</p></blockquote><p>最后在当前共享内存内写入一个“hello world”字符串</p><p>进程结束。</p></blockquote><h4 id="读出共享存储区内容-shm-read-c"><a href="#读出共享存储区内容-shm-read-c" class="headerlink" title="读出共享存储区内容(shm_read.c)"></a>读出共享存储区内容(shm_read.c)</h4><p>注：此程序在实训指导书上的缩进有误</p><h6 id="程序：-9"><a href="#程序：-9" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Date:2020/10/14</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MODE (S_IRWXU|S_IRGRP|S_IROTH)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFSIZE 4096</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> shmid;<br><span class="hljs-type">char</span> *shmbuf;<br><span class="hljs-keyword">if</span>((shmid = shmget(<span class="hljs-number">1526792193</span>,BUFSIZE,MODE|IPC_CREAT)) &lt; <span class="hljs-number">0</span>)&#123;<br>perror(<span class="hljs-string">&quot;shmget&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;segment created\n&quot;</span>);<br><span class="hljs-keyword">if</span>((shmbuf = shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) &lt; (<span class="hljs-type">char</span>*)<span class="hljs-number">0</span>)&#123;<br>perror(<span class="hljs-string">&quot;shmat&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>write(STDOUT_FILENO,shmbuf,<span class="hljs-number">11</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h6><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>gcc shm_read.c <br>[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span>./a.<span class="hljs-keyword">out</span> <br>segment created<br>Hello world[nroma<span class="hljs-variable">@localhost</span> Desktop]<span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><blockquote><p>此进程在创建共享内存后，发现标识符为1526792193的共享内存已经存在了、则返回该共享内存的ID，之后进行挂接，最后通过write读取了上个进程写入此共享内存的“Hello world”</p></blockquote><h4 id="父子进程共享存储区-shm-share-c"><a href="#父子进程共享存储区-shm-share-c" class="headerlink" title="父子进程共享存储区(shm_share.c)"></a>父子进程共享存储区(shm_share.c)</h4><p>注：此程序在实训指导书上的缩进有误</p><h6 id="程序：-10"><a href="#程序：-10" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Data:2020/10/13</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 1024</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> pid,shm_key,shmid;<br><span class="hljs-type">char</span> *shmbuf;<br><span class="hljs-keyword">if</span>((pid=fork())&lt;<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fork&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span>((shm_key = ftok(<span class="hljs-string">&quot;\tmp&quot;</span>,<span class="hljs-number">1</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;ftok&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmid = shmget(shm_key,SIZE,<span class="hljs-number">0600</span>|IPC_CREAT)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmget&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmbuf = shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) &lt; (<span class="hljs-type">char</span>*)<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmat&quot;</span>);<br>&#125;<br><span class="hljs-built_in">strcpy</span>(shmbuf,<span class="hljs-string">&quot;Hello world&quot;</span>);<br>sleep(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child pid is %d,the share memory start at %lx,end at %lx,content is %s\n&quot;</span>,getpid(),shmbuf,shmbuf+SIZE,shmbuf);<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>((shm_key = ftok(<span class="hljs-string">&quot;/tmp&quot;</span>,<span class="hljs-number">1</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;ftok&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmid = shmget(shm_key,SIZE,<span class="hljs-number">0660</span>|IPC_CREAT)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmget&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmbuf = shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) &lt; (<span class="hljs-type">char</span>*)<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmat&quot;</span>);<br>&#125;<br>sleep(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;father pid is %d,the share memory start at %lx,end at %lx,content is %s\n&quot;</span>,getpid(),shmbuf,shmbuf+SIZE,shmbuf);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-9"><a href="#运行结果：-9" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[nroma@localhost Desktop]$ gcc shm_share.c <br>[nroma@localhost Desktop]$ ./a.<span class="hljs-keyword">out</span> <br>ftok: <span class="hljs-keyword">No</span> such file <span class="hljs-keyword">or</span> directory<br>father pid <span class="hljs-keyword">is</span> <span class="hljs-number">6047</span>,the <span class="hljs-keyword">share</span> memory <span class="hljs-keyword">start</span> at <span class="hljs-number">7</span>fe14c6aa000,<span class="hljs-keyword">end</span> at <span class="hljs-number">7</span>fe14c6aa400,content <span class="hljs-keyword">is</span> <br>child pid <span class="hljs-keyword">is</span> <span class="hljs-number">6048</span>,the <span class="hljs-keyword">share</span> memory <span class="hljs-keyword">start</span> at <span class="hljs-number">7</span>fe14c6aa000,<span class="hljs-keyword">end</span> at <span class="hljs-number">7</span>fe14c6aa400,content <span class="hljs-keyword">is</span> Hello world<br>[nroma@localhost Desktop]$ <br></code></pre></td></tr></table></figure><p>注：由于本人redhet7.0运行99%都是父进程先运行，子进程写入的字符串的时候父进程早已结束。故将父子功能其进行调换，故对此程序进行修改，程序如下：</p><h6 id="程序：-11"><a href="#程序：-11" class="headerlink" title="程序："></a>程序：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by RedHat-vim</span><br><span class="hljs-comment"> * Author: Longfei Li</span><br><span class="hljs-comment"> * Data:2020/10/13</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 1024</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> pid,shm_key,shmid;<br><span class="hljs-type">char</span> *shmbuf;<br><span class="hljs-keyword">if</span>((pid=fork())&lt;<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;fork&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span>((shm_key = ftok(<span class="hljs-string">&quot;\tmp&quot;</span>,<span class="hljs-number">1</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;ftok&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmid = shmget(shm_key,SIZE,<span class="hljs-number">0600</span>|IPC_CREAT)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmget&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmbuf = shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) &lt; (<span class="hljs-type">char</span>*)<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmat&quot;</span>);<br>&#125;<br>sleep(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child pid is %d,the share memory start at %lx,end at %lx,content is %s\n&quot;</span>,getpid(),shmbuf,shmbuf+SIZE,shmbuf);<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>((shm_key = ftok(<span class="hljs-string">&quot;/tmp&quot;</span>,<span class="hljs-number">1</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;ftok&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmid = shmget(shm_key,SIZE,<span class="hljs-number">0660</span>|IPC_CREAT)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmget&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmbuf = shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) &lt; (<span class="hljs-type">char</span>*)<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;shmat&quot;</span>);<br>&#125;<br>        <span class="hljs-built_in">strcpy</span>(shmbuf,<span class="hljs-string">&quot;Hello world&quot;</span>);<br>sleep(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;father pid is %d,the share memory start at %lx,end at %lx,content is %s\n&quot;</span>,getpid(),shmbuf,shmbuf+SIZE,shmbuf);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果：-10"><a href="#运行结果：-10" class="headerlink" title="运行结果："></a>运行结果：</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[nroma@localhost Desktop]$ gcc shm_share.c <br>[nroma@localhost Desktop]$ ./a.<span class="hljs-keyword">out</span> <br>ftok: <span class="hljs-keyword">No</span> such file <span class="hljs-keyword">or</span> directory<br>father pid <span class="hljs-keyword">is</span> <span class="hljs-number">6047</span>,the <span class="hljs-keyword">share</span> memory <span class="hljs-keyword">start</span> at <span class="hljs-number">7</span>fe14c6aa000,<span class="hljs-keyword">end</span> at <span class="hljs-number">7</span>fe14c6aa400,content <span class="hljs-keyword">is</span> Hello world<br>child pid <span class="hljs-keyword">is</span> <span class="hljs-number">6048</span>,the <span class="hljs-keyword">share</span> memory <span class="hljs-keyword">start</span> at <span class="hljs-number">7</span>fe14c6aa000,<span class="hljs-keyword">end</span> at <span class="hljs-number">7</span>fe14c6aa400,content <span class="hljs-keyword">is</span> Hello world<br>[nroma@localhost Desktop]$ <br></code></pre></td></tr></table></figure><h6 id="程序分析：-8"><a href="#程序分析：-8" class="headerlink" title="程序分析："></a>程序分析：</h6><blockquote><p>首先程序通过fork()创建子进程。</p><p>设先运行父程序，进入else内,</p><p>通过ftok获取一个共享内存标识符放入shm_key中，</p><p>通过shmget创建共享内存且将ID保存到shmid中，</p><p>挂接共享内存并将内存空间段的指针保存下来</p><p>之后通过strcpy()通过共享存储段指针在当前共享内存内写入一个“Hello world”字符串</p><p>最后输出当前进程的pid&#x3D;6047、共享内存段指针&#x3D;7fe14c6aa000、共享内存段指针+SIZE（1024），由于指针地址为16进制，需将1024转换为16进制，为400H，故结果为7fe14c6aa400，最后输出当前共享内存段指针指向的内容。</p><p>执行子程序，</p><p>通过ftok获取一个共享内存标识符放入shm_key中，</p><p>通过shmget创建共享内存且将ID保存到shmid中，</p><p>挂接共享内存并将共享内存段的指针保存下来，</p><p>最后输出当前进程的pid&#x3D;6048、共享内存段指针&#x3D;7fe14c6aa000、共享内存段指针+SIZE（1024），由于指针地址为16进制，需将1024转换为16进制，为400H，故结果为7fe14c6aa400，最后输出之前被父进程写入的共享内存段指针指向的内容&#x3D;“Hello world”。</p></blockquote><h2 id="实验六：文件系统"><a href="#实验六：文件系统" class="headerlink" title="实验六：文件系统"></a>实验六：文件系统</h2><h4 id="练习文件操作函数-file-c"><a href="#练习文件操作函数-file-c" class="headerlink" title="练习文件操作函数(file.c)"></a>练习文件操作函数(file.c)</h4><h6 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MODE (S_IRWXU|S_IRGRP|S_IROTH)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFSIZE 1024</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">chmodMyFile</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> choice;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;File chmod modification:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 Read and write and execute\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2 Read file\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3 Write file\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4 Execute\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter your choice:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;choice);<br><span class="hljs-keyword">switch</span>(choice)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>chmod(<span class="hljs-string">&quot;mytestfile&quot;</span>,S_IRWXU);<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>chmod(<span class="hljs-string">&quot;mytestfile&quot;</span>,S_IRUSR);<br>            <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>chmod(<span class="hljs-string">&quot;mytestfile&quot;</span>,S_IWUSR);<br>            <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>chmod(<span class="hljs-string">&quot;mytestfile&quot;</span>,S_IXUSR);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sorry,your input is wrong!\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> choice,fd,n;<br>    <span class="hljs-type">char</span> buf[BUFSIZE];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****************************\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 Create new file\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2 Write file\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3 Read file\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4 Modify file permissions\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5 View current file\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 exit\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****************************\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter your choice:\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;choice);<br><span class="hljs-keyword">switch</span>(choice)<br>&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                fd=open(<span class="hljs-string">&quot;/home/mytestfile&quot;</span>,O_RDWR|O_TRUNC|O_CREAT,MODE);<br>         <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)<br>                perror(<span class="hljs-string">&quot;open&quot;</span>);<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;File create success\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter the content to be weitten:\n&quot;</span>);<br>                n=read(<span class="hljs-number">0</span>,buf,BUFSIZE);<br>               <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>)<br>                    perror(<span class="hljs-string">&quot;read&quot;</span>);<br>                <span class="hljs-keyword">if</span>(write(fd,buf,n) &lt; <span class="hljs-number">0</span>)<br>                    perror(<span class="hljs-string">&quot;write&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;View File content:\n&quot;</span>);<br>                lseek(fd,<span class="hljs-number">0</span>,SEEK_SET);<br>                n = read(fd,buf,BUFSIZE);<br>                <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>)<br>                    perror(<span class="hljs-string">&quot;read&quot;</span>);<br>                <span class="hljs-keyword">else</span><br>                    write(<span class="hljs-number">1</span>,buf,n);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                chmodMyFile();<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Permission modified successfully!\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                system(<span class="hljs-string">&quot;ls -l /home/mytestfile&quot;</span>);<br>                system(<span class="hljs-string">&quot;cat /home/mytestfile&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>               close(fd);<br>              <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your input is wrong!\n&quot;</span>);<br>    <br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h6>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[nroma@localhost Desktop]$ su root<br>Password: <br>ABRT has detected 1 problem(s). For more info run: abrt-cli list<br>[root@localhost Desktop]# gcc file.c <br>[root@localhost Desktop]# ./a.out <br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>1 Create new file<br>2 Write file<br>3 Read file<br>4 Modify file permissions<br>5 View current file<br>0 exit<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>Please enter your choice:<br>1<br>File create success<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>1 Create new file<br>2 Write file<br>3 Read file<br>4 Modify file permissions<br>5 View current file<br>0 exit<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>Please enter your choice:<br>2<br>Please enter the content to be weitten:<br>123<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>1 Create new file<br>2 Write file<br>3 Read file<br>4 Modify file permissions<br>5 View current file<br>0 exit<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>Please enter your choice:<br>3<br>View File content:<br>123<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>1 Create new file<br>2 Write file<br>3 Read file<br>4 Modify file permissions<br>5 View current file<br>0 exit<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>Please enter your choice:<br>4<br>File chmod modification:<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>1 Read and write and execute<br>2 Read file<br>3 Write file<br>4 Execute<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>Please enter your choice:<br>1<br>Permission modified successfully!<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>1 Create new file<br>2 Write file<br>3 Read file<br>4 Modify file permissions<br>5 View current file<br>0 exit<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>Please enter your choice:<br>5<br>-rwxr--r--. 1 root root 4 Oct 17 02:19 /home/mytestfile<br>123<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>1 Create new file<br>2 Write file<br>3 Read file<br>4 Modify file permissions<br>5 View current file<br>0 exit<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br>Please enter your choice:<br>0<br>[root@localhost Desktop]# <br></code></pre></td></tr></table></figure><h6 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析:"></a>程序分析:</h6><blockquote><p>创建新文件需要用到open()方法，其参数有三：</p><p>pathname：带路径文件名</p><p>oflag：</p><ul><li>O_RDWR：读、写打开</li><li>O_TRUNC：若存在，将其长度截短为0</li><li>O_CREAT：若不存在，创建它。</li></ul><p>mode：</p><ul><li>S_IRWXU：user读写执行</li><li>S_IRGRP：group读写</li><li>S_IROTH：other读写</li></ul><p>通过fd文件描述符判断文件创建是否成功</p><p>read: </p><ul><li><p>fd：文件描述符，用来指向要操作的文件的文件结构体</p></li><li><p>buf：一块内存空间</p></li><li><p>count：希望读取的字节数</p></li></ul><p><strong>重点：通过read读取键盘输入，将输入的字符串通过read函数保存到buf，其中，0为文件描述符，如果执行成功，通过write将buf写入。</strong></p><p>其他很简单，读代码即可。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AT&amp;T与Intel的汇编指令的区别</title>
    <link href="/Nroma/2020/09/25/AT&amp;T%E4%B8%8EIntel%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/Nroma/2020/09/25/AT&amp;T%E4%B8%8EIntel%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>在学习《深入理解计算机系统》时，发现它的汇编代码与我学的Intel 8086有很大不同，深入了解之后，先总结一下大概：</p><span id="more"></span><ul><li><p>Intel省略指示大小后缀，如intel是push和mov，而不是pushq和movq。</p></li><li><p>Intel省略了寄存器名字前的%符号，如intel是rbx，而不是%rbx。</p></li><li><p>Intel描述内存位置与AT&amp;T不同，如QWORD PTR [rbx]，而不是（%rbx）</p></li><li><p>在带有多个操作数的这指令，列出的操作数与AT&amp;T相反。</p></li></ul><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pushl %eax<br>push eax<br></code></pre></td></tr></table></figure><h4 id="立即数"><a href="#立即数" class="headerlink" title="立即数"></a>立即数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pushl $1<br>push 1<br></code></pre></td></tr></table></figure><h4 id="源操作数和目标操作数位置相反"><a href="#源操作数和目标操作数位置相反" class="headerlink" title="源操作数和目标操作数位置相反"></a>源操作数和目标操作数位置相反</h4><p>Intel目标操作数在源操作数的左边</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">addl $1,%eax<br>add eax,1<br></code></pre></td></tr></table></figure><h4 id="操作数的字长"><a href="#操作数的字长" class="headerlink" title="操作数的字长"></a>操作数的字长</h4><p>Intel操作数的字长不由操作符的最后一个字母决定，而由前缀表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movb val,%al<br>mov al,byte ptr val<br></code></pre></td></tr></table></figure><h4 id="绝对转移和调用指令（jump-x2F-call）"><a href="#绝对转移和调用指令（jump-x2F-call）" class="headerlink" title="绝对转移和调用指令（jump&#x2F;call）"></a>绝对转移和调用指令（jump&#x2F;call）</h4><p>操作数前要加上’*’作为前缀，而在 Intel 格式中则不需要。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h4 id="远程转移指令和远程子调用指令"><a href="#远程转移指令和远程子调用指令" class="headerlink" title="远程转移指令和远程子调用指令"></a>远程转移指令和远程子调用指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ljump $section,$offset<br>jmp far sectionL:offset<br><br>lcall $section,$offset<br>call far section:offset<br></code></pre></td></tr></table></figure><h4 id="返回指令"><a href="#返回指令" class="headerlink" title="返回指令"></a>返回指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lret $stack_adjust<br>ret far stack_adjust<br></code></pre></td></tr></table></figure><h2 id="x2F-x2F-TODO"><a href="#x2F-x2F-TODO" class="headerlink" title="&#x2F;&#x2F;TODO"></a>&#x2F;&#x2F;TODO</h2>]]></content>
    
    
    
    <tags>
      
      <tag>ASS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RedHat+vmware</title>
    <link href="/Nroma/2020/09/16/RedHat+vmware/"/>
    <url>/Nroma/2020/09/16/RedHat+vmware/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>VMware-workstation：<a href="https://pan.baidu.com/s/1sZYSzGqluh1_EBYbwUc08g">百度云：</a>提取码：v3qt</p><p>RedHat：<a href="https://pan.baidu.com/s/1quQlsFrWjNrNvgODe2UIfg">百度云</a>提取码：wh55</p>]]></content>
    
    
    
    <tags>
      
      <tag>资源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编环境搭建</title>
    <link href="/Nroma/2020/09/16/%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/Nroma/2020/09/16/%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、下载工具"><a href="#一、下载工具" class="headerlink" title="一、下载工具"></a>一、下载工具</h2><span id="more"></span><p><strong>1、DOSBox0.74-win32-installer.exe</strong><br>链接：<a href="https://pan.baidu.com/s/1YhlOxBchEy94fzwoT6G1pg">https://pan.baidu.com/s/1YhlOxBchEy94fzwoT6G1pg</a><br>提取码：v2hy </p><p><strong>2、MASM、LINK、DEBUG</strong><br>链接：<a href="https://pan.baidu.com/s/1C4LrEqqcTX8Y3rLp0k5rCA">https://pan.baidu.com/s/1C4LrEqqcTX8Y3rLp0k5rCA</a><br>提取码：23xx</p><p><strong>3、编程使用 notepad++</strong></p><p>链接：<a href="https://en.softonic.com/download/notepad-plus/windows/post-download">https://en.softonic.com/download/notepad-plus/windows/post-download</a></p><p>notepad++中，汇编语言为：语言-A-Assembly</p><p>有智能补全，代码保存到下文的ASM文件夹中</p><h2 id="2、安装DOSBox"><a href="#2、安装DOSBox" class="headerlink" title="2、安装DOSBox"></a>2、安装DOSBox</h2><p>傻瓜式安装</p><h2 id="3、创建文件地址"><a href="#3、创建文件地址" class="headerlink" title="3、创建文件地址"></a>3、创建文件地址</h2><p>创建一个文件夹Assembly，在其中创建两个文件夹ASM、MASM</p><p>汇编程序（ASM）：用来存放要编译的汇编程序</p><p>编译程序（MASM）：用来存放编译程序MASM-5.10、LINK、DEBUG</p><h2 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h2><p>每次都要手动配置很麻烦，在<code>DOSBox 0.74 Options.bat</code> 中添加几行命令，让其<strong>每次打开软件自动配置，直接可以编译调试文件</strong>。<br>**双击打开<code>DOSBox 0.74 Options.bat</code>**，在文本末尾添上以下语句。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 挂载虚拟盘符（将汇编程序、编译工具的文件夹挂载到一个虚拟盘）</span><br>mount <span class="hljs-built_in">F</span><span class="hljs-operator">:</span> D<span class="hljs-operator">:</span><span class="hljs-punctuation">\</span>Assembly<br><span class="hljs-comment"># 添加系统临时变量（此时的 F: 代表的是D:\Assembly）</span><br>set PATH<span class="hljs-operator">=</span><span class="hljs-operator">%PATH%</span>;<span class="hljs-built_in">F</span><span class="hljs-operator">:</span><span class="hljs-punctuation">\</span>MASM;<br><span class="hljs-comment"># 转到 F: </span><br><span class="hljs-built_in">F</span><span class="hljs-operator">:</span> <br><span class="hljs-comment"># 进入ASM文件夹</span><br>cd <span class="hljs-built_in">F</span><span class="hljs-operator">:</span><span class="hljs-punctuation">\</span>ASM<br></code></pre></td></tr></table></figure><p>F为虚拟盘符</p><h2 id="5、放入执行文件"><a href="#5、放入执行文件" class="headerlink" title="5、放入执行文件"></a>5、放入执行文件</h2><p>将MASM.exe、LINK.exe、DEBUG.exe 放入D:\Assembly\MASM中</p><p>将自己写的.asm汇编文件放入D:\Assembly\ASM</p><p>之后就可以打开DOSBox.exe 进行调试汇编文件，如：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos">masm hello.asm <br>link hello.obj <br>debug hello.exe<br></code></pre></td></tr></table></figure><p>这样以后可以不用切换盘符，写好代码后，每次打开软件自动配置路径，直接用masm、link、debug调试</p><p>END</p>]]></content>
    
    
    
    <tags>
      
      <tag>资源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/Nroma/2020/09/12/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/Nroma/2020/09/12/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><hr><ul><li><p>子类继承Thread类</p></li><li><p>重写run()方法</p></li><li><p>启动线程：<strong>子类对象.start()；</strong></p></li></ul><p>cpu的快速切换造成了哪个线程获取到了cpu的执行权，哪个线程就执行。</p><span id="more"></span><h4 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h4><hr><ul><li><p>子类实现Runnable 接口</p></li><li><p>重写run()方法</p></li><li><p>启动线程：<strong>Thread(子类对象).start();</strong></p></li></ul><h4 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h4><hr><ul><li><p>子类实现Callable接口，并声明返回值类型</p></li><li><p>重写返回类型为声明类型的call方法，并抛出异常</p></li><li><p>创建目标对象</p></li><li><p>创建执行服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>提交执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Future &lt;自定义类型&gt; result = ser.submit(目标对象);<br></code></pre></td></tr></table></figure></li><li><p>获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> result.get();<br></code></pre></td></tr></table></figure></li><li><p>关闭服务</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ser.shutdownNow()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><hr><p><img src="https://img-blog.csdn.net/20170629213938736?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYnJpYmx1ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="UML"></p><p>现在用代码模拟业务插入日志</p><p>首先得有一个接口，通用的接口是代理模式实现的基础。这个接口我们命名为 BUSINESS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BUSINESS</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，要有一个真正的实现这个BUSINESS接口的类，和一个只是实现接口的代理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealBUSINESS</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BUSINESS</span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;业务执行中&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个表示真正的业务。它实现了 BUSINESS接口，business() 方法调用时，业务执行，那么，插入代理日志呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BUSINESS</span>&#123;<br>    <br>    RealBUSINESS business;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Log</span><span class="hljs-params">(RealBUSINESS business)</span>&#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.business=business;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">business</span><span class="hljs-params">()</span>&#123;<br>        Log(<span class="hljs-literal">true</span>);<br>        business.business();<br>        Log(<span class="hljs-literal">false</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isStart)</span>&#123;<br>       <span class="hljs-keyword">if</span>(isStart)&#123;<br>           System.out.println(<span class="hljs-string">&quot;业务准备日志&quot;</span>);<br>       &#125; <span class="hljs-keyword">else</span>&#123;<br>           System.out.println(<span class="hljs-string">&quot;业务完成日志&quot;</span>)<br>       &#125;<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>最后，测试代理日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RealBUSINESS</span> <span class="hljs-variable">realbusiness</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealBUSINESS</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log</span>(realbusiness).business();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代理模式可以在不修改被代理对象的基础上，通过扩展代理类，进行一些功能的附加与增强。值得注意的是，代理类和被代理类应该共同实现一个接口，或者是共同继承某个类。</strong></p><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><hr><p><strong>函数式接口定义</strong> ：任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。</p><p>对于函数式接口，通过lambda表达式创建接口对象，来简化代码。</p><p><strong>要点</strong>：一行代码可以简化为行，多行用代码块包裹</p><p>​   多个参数也可以去掉参数类型，但须用括号包裹</p><h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><hr><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setPriority(int newPriority)</td><td>更改线程优先级</td></tr><tr><td>static void sleep(long millis)</td><td>休眠</td></tr><tr><td>void join()</td><td>等待线程终止</td></tr><tr><td>static void yield()</td><td>暂停当前线程对象，执行其他线程</td></tr><tr><td>void interrupt()</td><td>中断线程</td></tr><tr><td>boolean isAlive()</td><td>测试线程是否处于活动状态</td></tr></tbody></table><h4 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h4><hr><p>使用标志位停止线程，对外提供方法改变标识</p><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><hr><p>sleep存在异常InterruptedException</p><p>每一个对象都有一个锁，sleep不会释放锁</p><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><hr><p>让当前正在执行的线程暂停，但不阻塞</p><p>礼让后，线程有可能还是会被cpu优先调度</p><h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><hr><p>待此线程完成后，再执行其他线程，其他线程阻塞</p><h4 id="Thread-State"><a href="#Thread-State" class="headerlink" title="Thread.State"></a>Thread.State</h4><hr><ul><li><p>NEW </p><p>尚未启动的线程处于此状态</p></li><li><p>RUNNABLE</p><p>在Java虚拟机执行的线程处于此状态</p></li><li><p>BLOCKED</p><p>被阻塞等待器锁定的线程处于此状态</p></li><li><p>WAITING</p><p>等待另一个线程执行特定动作的线程处于此状态</p></li><li><p>TIMED WAITING</p><p>等待另一个线程执行特定动作达到特定时间的线程处于此状态</p></li><li><p>TERMINATED</p><p>以退出的线程处于此状态</p></li></ul><h4 id="线程状态检测"><a href="#线程状态检测" class="headerlink" title="线程状态检测"></a>线程状态检测</h4><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.State state=thread.getState();<br></code></pre></td></tr></table></figure><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><hr><p>Java提供一个线程调度器来监控所有就绪状态的线程，调度器按照优先级来确定调度哪个线程。</p><p>1~10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getPriority().setPriority(<span class="hljs-type">int</span> xxx);<br></code></pre></td></tr></table></figure><h4 id="守护-daemon-线程"><a href="#守护-daemon-线程" class="headerlink" title="守护(daemon)线程"></a>守护(daemon)线程</h4><hr><p>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></p><p>虚拟机确保用户线程执行完毕，但不等待守护线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(线程对象).setDaemon(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>默认false为用户线程，true为守护线程</p><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><hr><p>并发：多个线程同时操作同一资源</p><p>为了解决访问冲突，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可。</p><p>同步方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mothod</span><span class="hljs-params">(inrt args)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>同步代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>)&#123; <span class="hljs-comment">//this为锁的对象，</span><br><span class="hljs-comment">//对象的变化</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><hr><p>两个或多个线程都在等待对方释放资源，都停止执行</p><p><strong>产生条件：</strong></p><p><em><strong>互斥条件</strong></em>：一次资源只能被一个进程使用</p><p><em><strong>请求与保持条件</strong></em>：进程因请求资源而阻塞时，对已经获得的资源保持不放</p><p><em><strong>不剥夺条件</strong></em>：进程以获得的资源，在未使用完之前，不能强行剥夺</p><p><em><strong>循环等待条件</strong></em>：两个或多个进程之间形成头尾相接的互相等待资源关系</p><p>破坏以上一个或多个条件就能避免死锁发生</p><h4 id="LOCK"><a href="#LOCK" class="headerlink" title="LOCK"></a>LOCK</h4><hr><p>java.util.concurrent.locks.Lock接口提供了对共享资源的独占访问，每次只能有一个线程对Lock加锁，线程开始访问共享资源之前先获得Lock对象</p><p>ReentrantLock实现了上述接口，与synchronized有相同的并发性和内存语义，可以显式加锁，释放锁</p><p>ReentrantLock的创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br></code></pre></td></tr></table></figure><p>ReentrantLock的加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">lock.lock();<br></code></pre></td></tr></table></figure><p>ReentrantLock的解锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">lock.unlock();<br></code></pre></td></tr></table></figure><p>Lock&gt;synchronized代码块&gt;synchronized方法</p><h4 id="线程同步（Object-class）"><a href="#线程同步（Object-class）" class="headerlink" title="线程同步（Object class）"></a>线程同步（Object class）</h4><hr><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>一直等待其他线程通知，但会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待中的线程</td></tr><tr><td>notifyAll()</td><td>唤醒同一对象上所有调用wait()方法的线程，优先级别高的线程先调用</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.wait()<br></code></pre></td></tr></table></figure><p>只能在同步方法或同步代码块中使用，否则会抛出异常lllegalMonitorStateException </p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><hr><p>ExecutorService：线程池接口。常见子类ThreadPoolRExecutor</p><ul><li>void execute(Runnable command):执行命令，没有返回值，一般用来执行Runnable</li><li><T>Future<T> submit(Callable<T> task):执行命令，有返回值，一般用来执行Callable</li><li>void shutdown():关闭线程池</li></ul><p>Executors：工具类，线程池的工厂类，用于创建并返回不同类型的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-type">int</span> 线程池大小);<br>service。execute(放入线程对象);<br>service.shutdown();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO流</title>
    <link href="/Nroma/2020/09/12/Io%E6%B5%81/"/>
    <url>/Nroma/2020/09/12/Io%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="一、File"><a href="#一、File" class="headerlink" title="一、File"></a>一、File</h1><blockquote><p>java.io.File类只能对文件本身进行操作，不能对文件内容进行操作，主要用于文件和目录的创建、查找和删除等&lt;操作。</p></blockquote><span id="more"></span><h3 id="（一）构造方法"><a href="#（一）构造方法" class="headerlink" title="（一）构造方法"></a>（一）构造方法</h3><hr><blockquote><p><code>public File(String pathname)</code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。</p><p><code>public File(String parent, String child)</code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</p><p><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名实例和子路径名字符串</strong>创建新的 File实例。</p></blockquote><h3 id="（二）常用方法"><a href="#（二）常用方法" class="headerlink" title="（二）常用方法"></a>（二）常用方法</h3><hr><blockquote><h4 id="1、获取功能方法"><a href="#1、获取功能方法" class="headerlink" title="1、获取功能方法"></a>1、获取功能方法</h4><blockquote><p>1、<code>public String getAbsolutePath()</code> ：返回此File的绝对路径名字符串。</p><p>2、<code>public String getPath()</code> ：将此File转换为路径名字符串。</p><p>3、<code>public String getName()</code> ：返回由此File表示的文件或目录的名称。</p><p>4、<code>public long length()</code> ：返回由此File表示的文件的长度。</p><p>注：优先文件，其次目录，路径是不区分大小写</p></blockquote></blockquote><blockquote><h4 id="2、判断功能方法"><a href="#2、判断功能方法" class="headerlink" title="2、判断功能方法"></a>2、判断功能方法</h4><blockquote><p>1、<code>public boolena exists()</code>：判断此File表示的文件或目录是否存在</p><p>2、<code>public boolean isDirectory()</code> ：判断此File表示的是否为可以读取到的目录。</p><p>3、<code>public boolean isFile()</code> ：判断此File表示的是否为可以读取到的文件。</p></blockquote></blockquote><blockquote><h4 id="3、创建和删除方法"><a href="#3、创建和删除方法" class="headerlink" title="3、创建和删除方法"></a>3、创建和删除方法</h4><blockquote><p>1、<code>public boolean createNewFile()</code> ：文件不存在，创建一个新的空文件并返回<code>true</code>，文件存在，不创建文件并返回<code>false</code>。</p><p>2、<code>public boolean delete()</code> ：删除由此File表示的文件或目录。</p><p>3、<code>public boolean mkdir()</code> ：创建由此File表示的目录。</p><p>4、<code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</p><p>注：<code>delete</code>方法，如果此<code>File</code>表示目录，则目录必须为空才能删除一个低级目录。</p></blockquote></blockquote><h3 id="（三）目录遍历"><a href="#（三）目录遍历" class="headerlink" title="（三）目录遍历"></a>（三）目录遍历</h3><hr><blockquote><p>1、<code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</p><p>2、<code>public File[] listFiles()</code> ：返回一个File数组（文件绝对路径数组），表示该File目录中的所有的子文件或目录。</p></blockquote><h3 id="（四）递归遍历文件夹下所所有文件及子文件"><a href="#（四）递归遍历文件夹下所所有文件及子文件" class="headerlink" title="（四）递归遍历文件夹下所所有文件及子文件"></a>（四）递归遍历文件夹下所所有文件及子文件</h3><hr><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nroma.JUC;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVolatile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:/Blog&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        Recursion(file);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Recursion</span><span class="hljs-params">(File file)</span>&#123;<br>    <br>        <span class="hljs-keyword">if</span> (!file.isDirectory())&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        File[] file1=file.listFiles();<br>        <span class="hljs-keyword">for</span> (File file2 : file1) &#123;<br>             <span class="hljs-keyword">if</span>(file2.isDirectory())&#123;<br>                Recursion(file2);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(file2.getName());<br>            &#125;<br>        &#125;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h1 id="二、IO流"><a href="#二、IO流" class="headerlink" title="二、IO流"></a>二、IO流</h1><blockquote><p>根据数据流向分为<strong>输入流</strong>和<strong>输出流</strong></p><p><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。</p><p><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</p><p>根据数据类型分为字节流和字符流</p><p><strong>字节流</strong> ：以字节为单位，读写数据的流。</p><p><strong>字符流</strong> ：以字符为单位，读写数据的流。</p><table><thead><tr><th></th><th>输入流</th><th>输出流</th></tr></thead><tbody><tr><td>字节流</td><td>字节输入流 <strong>InputStream</strong></td><td>字节输出流 <strong>OutputStream</strong></td></tr><tr><td>字符流</td><td>字符输入流 <strong>Reader</strong></td><td>字符输出流 <strong>Writer</strong></td></tr></tbody></table></blockquote><h3 id="（一）字节输出流（OutputStream）"><a href="#（一）字节输出流（OutputStream）" class="headerlink" title="（一）字节输出流（OutputStream）"></a>（一）字节输出流（OutputStream）</h3><blockquote><blockquote><h4 id="1、基本共性方法"><a href="#1、基本共性方法" class="headerlink" title="1、基本共性方法"></a>1、基本共性方法</h4><p> 1、 <code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。</p><p> 2、 <code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。</p><p> 3、 <code>public void write(byte[] b)</code>：将 b.length个字节从指定的字节数组写入此输出流。</p><p> 4、 <code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。 <strong>也就是说从off个字节数开始读取一直到len个字节结束</strong></p><p>5、 <code>public abstract void write(int b)</code> ：将指定的字节输出流。</p><p> 注：以上五个方法则是字节输出流都具有的方法，由父类OutputStream定义提供，子类都会共享以上方法</p></blockquote><blockquote><h4 id="2、FileOutputStream构造方法"><a href="#2、FileOutputStream构造方法" class="headerlink" title="2、FileOutputStream构造方法"></a>2、FileOutputStream构造方法</h4><p>1、 <code>public FileOutputStream(File file)</code>：根据File对象为参数创建对象。</p><p>2、 <code>public FileOutputStream(String name)</code>： 根据名称字符串为参数创建对象。</p><p>注：创建输出流对象的时候，系统会自动去对应位置创建对应文件，而创建输出入对象的时候，文件不存在则会报FileNotFoundException异常，也就是系统找不到指定的文件异常。</p></blockquote><blockquote><h4 id="3、FileOutputStream写出字节与字节数组"><a href="#3、FileOutputStream写出字节与字节数组" class="headerlink" title="3、FileOutputStream写出字节与字节数组"></a>3、FileOutputStream写出字节与字节数组</h4><p><code>write(int b)</code>：写出ASCLL字节到文件，写出会清空目标文件中的数据</p><p><code>write(byte[] b)</code>：写出字节数组到文件，写出会清空目标文件中的数据</p><p><code>write(byte[] b,int off,int len)</code>：写出字节数组到文件，从off开始，长度为len位，写出会清空目标文件中的数据</p></blockquote><blockquote><h4 id="4、-FileOutputStream数据追加换换行"><a href="#4、-FileOutputStream数据追加换换行" class="headerlink" title="4、 FileOutputStream数据追加换换行"></a>4、 FileOutputStream数据追加换换行</h4><p>FileOutputStream有其他构造方法可以实现保留数据，追加数据，并换行</p><p>1、<code>public FileOutputStream(File file, boolean append)</code></p><p>2、<code>public FileOutputStream(String name, boolean append)</code></p><p>注：append的<code>true</code> 表示追加数据，<code>false</code> 表示不追加也就是清空原有数据</p><p>3、换行<code>outputStream.write(&quot;\r\n&quot;.getBytes());</code></p></blockquote></blockquote><h3 id="（二）字节输入流（InputStream）"><a href="#（二）字节输入流（InputStream）" class="headerlink" title="（二）字节输入流（InputStream）"></a>（二）字节输入流（InputStream）</h3><blockquote><blockquote><h4 id="1、基本共性方法-1"><a href="#1、基本共性方法-1" class="headerlink" title="1、基本共性方法"></a>1、基本共性方法</h4><p>1、 <code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。</p><p>2、 <code>public abstract int read()</code> ：从输入流读取数据的下一个字节</p><p>3、<code>public int read(byte[] b)</code>： 该方法返回的int值代表的是读取了多少个字节，读到几个返回几个，读取不到返回-1</p></blockquote><blockquote><h4 id="2、FileInputStream构造方法"><a href="#2、FileInputStream构造方法" class="headerlink" title="2、FileInputStream构造方法"></a>2、FileInputStream构造方法</h4><p>1、 <code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</p><p>2、 <code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名name命名。</p></blockquote><blockquote><h4 id="3、FileInputStream读取字节数据"><a href="#3、FileInputStream读取字节数据" class="headerlink" title="3、FileInputStream读取字节数据"></a>3、FileInputStream读取字节数据</h4><p>1、<code>read()</code>：每次可以读取一个字节的数据，为int类型，读取到文件末尾，返回<code>-1</code></p><p>2、<code>read(byte[] b)</code>：每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code></p><p>数组读取文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len=inputStream.read(b))!=-<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b,<span class="hljs-number">0</span>,len));<br>    &#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><h4 id="4、文件复制"><a href="#4、文件复制" class="headerlink" title="4、文件复制"></a>4、文件复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">inputStream= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;E:\\test.JPG&quot;</span>);<br>outputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;E:\\test.copy.jpg&quot;</span>);<br>    <span class="hljs-type">byte</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len=inputStream.read(b))!=-<span class="hljs-number">1</span>)&#123;<br>        outputStream.write(b,<span class="hljs-number">0</span>,len);<br>    &#125;<br></code></pre></td></tr></table></figure></blockquote></blockquote><h3 id="（三）字符输入流（Reader）"><a href="#（三）字符输入流（Reader）" class="headerlink" title="（三）字符输入流（Reader）"></a>（三）字符输入流（Reader）</h3><blockquote><blockquote><h4 id="1、基本共性方法-2"><a href="#1、基本共性方法-2" class="headerlink" title="1、基本共性方法"></a>1、基本共性方法</h4><p>1、<code>public void close()</code>：关闭此流并释放与此流相关联的任何系统资源</p><p>2、<code>public int read()</code>：从输入流读取一个字符。</p><p>3、<code>public int read(char[] cbuf)</code>：从输入流读取一些字符，并存储到cbuf中</p></blockquote><blockquote><h4 id="2、FileReader构造方法"><a href="#2、FileReader构造方法" class="headerlink" title="2、FileReader构造方法"></a>2、FileReader构造方法</h4><p>1、<code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的<strong>File对象</strong>。<br>2、 <code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的<strong>字符串名称</strong>。</p></blockquote><blockquote><h4 id="3、FileReader读取字符数据"><a href="#3、FileReader读取字符数据" class="headerlink" title="3、FileReader读取字符数据"></a>3、FileReader读取字符数据</h4><p>1、<code>read()</code>：每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code></p></blockquote></blockquote><h3 id="（四）字符输出流（Writer）"><a href="#（四）字符输出流（Writer）" class="headerlink" title="（四）字符输出流（Writer）"></a>（四）字符输出流（Writer）</h3><blockquote><blockquote><h4 id="1、基本共性方法-3"><a href="#1、基本共性方法-3" class="headerlink" title="1、基本共性方法"></a>1、基本共性方法</h4><p>1、<code>void write(int c)</code> 写入单个字符。</p><p>2、<code>void write(char[] cbuf)</code>写入字符数组。</p><p>3、 <code>abstract void write(char[] cbuf, int off, int len)</code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</p><p>4、 <code>void write(String str)</code>写入字符串。</p><p>5、<code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</p><p>6、<code>void flush()</code>刷新该流的缓冲。</p><p>7、<code>void close()</code> 关闭此流，但要先刷新它。</p></blockquote><blockquote><h4 id="2、FileWriter构造方法"><a href="#2、FileWriter构造方法" class="headerlink" title="2、FileWriter构造方法"></a>2、FileWriter构造方法</h4><p>1、 <code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。</p><p>2、<code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。</p></blockquote><blockquote><h4 id="3、FileWriter写出数据"><a href="#3、FileWriter写出数据" class="headerlink" title="3、FileWriter写出数据"></a>3、FileWriter写出数据</h4><p>1、<code>void write(int b)</code> 写入单个字符</p><p>2、<code>flush</code>：刷新缓冲区，流对象可以继续使用。</p><p>3、<code>close</code>：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p><p>注：与FileOutputStream不同的是，数据是在关闭流的时候，从缓冲区保存到文件的，如果我们不想关闭流又想保存到缓冲区的话，可以使用Flush方法</p><p>注：创建输出流对象的时候，系统会自动去对应位置创建对应文件，而创建输出入对象的时候，文件不存在则会报FileNotFoundException异常，也就是系统找不到指定的文件异常。</p></blockquote><blockquote><h4 id="4、File的续写和换行"><a href="#4、File的续写和换行" class="headerlink" title="4、File的续写和换行"></a>4、File的续写和换行</h4><p>续写和FileOutputStream类似，都是在构造方法上加参数，</p><p>换行在写出换行符就可。</p></blockquote></blockquote><h3 id="（五）缓冲流"><a href="#（五）缓冲流" class="headerlink" title="（五）缓冲流"></a>（五）缓冲流</h3><blockquote><blockquote><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>缓冲流：也叫高效流，是对4个<code>File</code> 流的“增强流”。</p><p>缓冲流的基本原理：</p><blockquote><p>1、使用了底层流对象从具体设备上获取数据，并将数据存储到缓冲区的数组内。</p><p>2、通过缓冲区的read()方法从缓冲区获取具体的字符数据，这样就提高了效率。</p><p>3、如果用read方法读取字符数据，并存储到另一个容器中，直到读取到了换行符时，将另一个容器临时存储的数据转成字符串返回，就形成了readLine()功能。</p><p>也就是说在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><p>缓冲书写格式为<code>BufferedXxx</code>，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code></li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul></blockquote></blockquote><blockquote><h4 id="2、字节缓冲流"><a href="#2、字节缓冲流" class="headerlink" title="2、字节缓冲流"></a>2、字节缓冲流</h4><p>构造方法</p><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>InputStream</strong>。</li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>OutputStream</strong>。</li></ul><p>字节缓冲流读写与字节输入输出流类似</p></blockquote><blockquote><h4 id="3、字符缓冲流"><a href="#3、字符缓冲流" class="headerlink" title="3、字符缓冲流"></a>3、字符缓冲流</h4><p>构造方法</p><ul><li><p><code>public BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>Reader</strong>。</p></li><li><p><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>Writer</strong>。</p></li></ul><p>字符缓冲流特有方法</p><p>字符缓冲流的基本方法与普通字符流调用方式一致，然而字符缓冲流还具备一下<strong>特有</strong>方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: <strong>读一行数据</strong>。 读取到最后返回null</li><li>BufferedWriter：<code>public void newLine()</code>: <strong>换行</strong>,由系统属性定义符号。</li></ul></blockquote></blockquote><h3 id="（六）转换流"><a href="#（六）转换流" class="headerlink" title="（六）转换流"></a>（六）转换流</h3><blockquote><blockquote><h4 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h4><p>计算机中存储的信息都是用二进制表示的，按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。</p><ul><li>编码:字符(能看懂的)–字节(看不懂的)</li><li>解码:字节(看不懂的)–&gt;字符(能看懂的)</li></ul></blockquote><blockquote><h4 id="2、InputStreamReader（字节流到字符流）"><a href="#2、InputStreamReader（字节流到字符流）" class="headerlink" title="2、InputStreamReader（字节流到字符流）"></a>2、InputStreamReader（字节流到字符流）</h4><p>构造方法</p><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul></blockquote><blockquote><h4 id="3、OutputStreamWriter（字符流到字节流）"><a href="#3、OutputStreamWriter（字符流到字节流）" class="headerlink" title="3、OutputStreamWriter（字符流到字节流）"></a>3、OutputStreamWriter（字符流到字节流）</h4><p>构造方法</p><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>为了达到<strong>最高效率</strong>，可以在 <code>BufferedReader</code> 内包装 <code>InputStreamReader</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">BufferedReader</span> <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>))；<br></code></pre></td></tr></table></figure></blockquote></blockquote><h3 id="（七）序列化流"><a href="#（七）序列化流" class="headerlink" title="（七）序列化流"></a>（七）序列化流</h3><blockquote><blockquote><h4 id="1、概述-2"><a href="#1、概述-2" class="headerlink" title="1、概述"></a>1、概述</h4><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。<br>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。</p></blockquote><blockquote><h4 id="2、ObjectOutputStream"><a href="#2、ObjectOutputStream" class="headerlink" title="2、ObjectOutputStream"></a>2、ObjectOutputStream</h4><ul><li>构造方法</li></ul><p>  <code>public ObjectOutputStream(OutputStream out)</code></p><ul><li><p>写出序列化对象的准备</p><p>1、该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</p><p>2、、该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</p></li><li><p>序列化写出对象</p><p><code>writeObject(对象)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        employee employee=<span class="hljs-keyword">new</span> <span class="hljs-title class_">employee</span>();<br>        employee.name=<span class="hljs-string">&quot;abc&quot;</span>;<br>        employee.age=<span class="hljs-number">12</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span><br>                    <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;abc.txt&quot;</span>));<br>            objectOutputStream.writeObject(employee);<br>            objectOutputStream.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><h4 id="3、ObjectInputStream"><a href="#3、ObjectInputStream" class="headerlink" title="3、ObjectInputStream"></a>3、ObjectInputStream</h4><ul><li><p>构造方法</p><p><code>public ObjectInputStream(InputStream in)</code></p></li><li><p>反序列化</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        employee employee=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span><br>                    <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;abc.txt&quot;</span>));<br>            employee=(employee) objectInputStream.readObject();<br>            objectInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><h4 id="4、Serializable"><a href="#4、Serializable" class="headerlink" title="4、Serializable"></a>4、Serializable</h4><ul><li><p>反序列化的不足</p><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong></p><p>所以反序列化也是需要序列化时的类来做载体的</p><p>然而，当JVM反序列化对象时，能找到class文件，但是class文件<strong>在序列化对象之后发生了修改</strong>，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。发生这个异常的原因如下：</p><p>1、该类的序列版本号与从流中读取的类描述符的版本号不匹配<br>2、该类包含未知数据类型<br>2、该类没有可访问的无参数构造方法</p></li><li><p>序列号版本</p><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><p>如果和编译之前的<code>serialVersionUID</code> 匹配，则忽略未知数据类型，否则抛出<code>InvalidClassException</code>异常，<code>serialVersionUID</code> 不匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span>  <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> eid;<span class="hljs-comment">//新的数据类型，被忽略</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><h3 id="（八）打印流"><a href="#（八）打印流" class="headerlink" title="（八）打印流"></a>（八）打印流</h3><blockquote><blockquote><h4 id="1、字节输出打印流PrintStream"><a href="#1、字节输出打印流PrintStream" class="headerlink" title="1、字节输出打印流PrintStream"></a>1、字节输出打印流PrintStream</h4><p>按字节打印输出，可能需要一个输入对象，无论字节还是字符，两者无耦合</p></blockquote><blockquote><h4 id="2、字符输出打印流PrintWriter"><a href="#2、字符输出打印流PrintWriter" class="headerlink" title="2、字符输出打印流PrintWriter"></a>2、字符输出打印流PrintWriter</h4><p>按字符打印输出，可能需要一个输入对象，无论字节还是字符，两者无耦合</p></blockquote></blockquote><h3 id="（九）Properties"><a href="#（九）Properties" class="headerlink" title="（九）Properties"></a>（九）Properties</h3><blockquote><blockquote><h4 id="1、概述-3"><a href="#1、概述-3" class="headerlink" title="1、概述"></a>1、概述</h4><p><code>java.util.Properties</code> 继承于<code>Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。</p></blockquote><blockquote><h4 id="2、Properties构造方法"><a href="#2、Properties构造方法" class="headerlink" title="2、Properties构造方法"></a>2、Properties构造方法</h4><p><code>public Propertes()</code>：创建一个空的属性列表。</p></blockquote><blockquote><h4 id="3、基本存储方法"><a href="#3、基本存储方法" class="headerlink" title="3、基本存储方法"></a>3、基本存储方法</h4><ul><li><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。</li><li><code>public String getProperty(String key)</code> ：搜索键，获得值，如果没有，返回null</li><li><code>public Set stringPropertyNames()</code> ：所有键的名称的集合，显然，它会返回一个Set集合，，通过集合保存，然后可以遍历。</li></ul><p>如何通过键来匹配所有值呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; strings=properties.stringPropertyNames();<br>    <span class="hljs-keyword">for</span> (String key:<br>         strings) &#123;<br>             System.out.println(key+<span class="hljs-string">&quot;=&quot;</span>+properties.getProperty(key));<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><h4 id="4、与流相关"><a href="#4、与流相关" class="headerlink" title="4、与流相关"></a>4、与流相关</h4><p><code>public void load(InputStream inStream)</code>： 从字节输入流中加载键值对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Properties properties=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileInputStream fileInputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;abc.txt&quot;</span>);<br>            properties.load(fileInputStream);<br>            Set&lt;String&gt; strings=properties.stringPropertyNames();<br>            <span class="hljs-keyword">for</span> (String key:<br>                 strings) &#123;<br>                System.out.println(key+<span class="hljs-string">&quot;=&quot;</span>+properties.getProperty(key));<br>            &#125;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础定时任务</title>
    <link href="/Nroma/2020/05/02/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/Nroma/2020/05/02/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>在Application上开启定时任务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndApplication</span> &#123;<br></code></pre></td></tr></table></figure><p>在需要定时启动的方法上通过注解设置它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncService</span> &#123;<br><br>    <span class="hljs-meta">@Scheduled(cron =&quot;0 29 16 * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Schedule&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础异步任务</title>
    <link href="/Nroma/2020/05/02/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
    <url>/Nroma/2020/05/02/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>Application类内开启异步注解支持，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndApplication</span> &#123;<br></code></pre></td></tr></table></figure><p>在耗时方法上注解这个方法为异步任务，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>        System.out.println(<span class="hljs-string">&quot;3s&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>调用者在调用它之后不会等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        service.Test();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;333&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weagger基础</title>
    <link href="/Nroma/2020/04/10/Swagger/"/>
    <url>/Nroma/2020/04/10/Swagger/</url>
    
    <content type="html"><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>第一步是导入jar包，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后写一个配置类，它不需要实现任何接口，只需要添加配置注解和开启Swaggwe注解就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableOpenApi</span><br></code></pre></td></tr></table></figure><p>其中，修改配置可以通过Docket来实现，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>               .groupName(<span class="hljs-string">&quot;Test1&quot;</span>)<br>               .apiInfo(apiInfo()).enable(<span class="hljs-literal">true</span>)<br>               .select()<br>               .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.example.springbootswagger.controller&quot;</span>))<br>               .build();<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>               .title(<span class="hljs-string">&quot;Test项目接口文档&quot;</span>)<br>               .description(<span class="hljs-string">&quot;Test项目描述&quot;</span>)<br>               .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;作者：李龙飞&quot;</span>, <span class="hljs-string">&quot;http://www.nroma.cn&quot;</span>, <span class="hljs-string">&quot;1990783167@qq.com&quot;</span>))<br>               .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>               .build();<br>   &#125;<br></code></pre></td></tr></table></figure><p>Model方面可以通过一些注解来生成API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;User实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> name;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 移动轮盘绘制</title>
    <link href="/Nroma/2020/04/01/Android%20%E7%A7%BB%E5%8A%A8%E8%BD%AE%E7%9B%98%E7%BB%98%E5%88%B6/"/>
    <url>/Nroma/2020/04/01/Android%20%E7%A7%BB%E5%8A%A8%E8%BD%AE%E7%9B%98%E7%BB%98%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>今天下午做了一个类王者荣耀移动轮盘的简单绘制，主要为方便控制小车移动，通过广播接受的坐标判断用户意图，从而发送通信协议，控制小车移动，本文主要说的是绘制和发送广播，其他的还未完成。 </p><span id="more"></span><h4 id="首先是效果图如下："><a href="#首先是效果图如下：" class="headerlink" title="首先是效果图如下："></a>首先是效果图如下：</h4><p><img src="https://cdn.jsdelivr.net/gh/moonris/img@v1.1.6/img/lp.jpg"></p><h4 id="编写步骤如下："><a href="#编写步骤如下：" class="headerlink" title="编写步骤如下："></a>编写步骤如下：</h4><h4 id="创建一个自定义控件"><a href="#创建一个自定义控件" class="headerlink" title="创建一个自定义控件"></a>创建一个自定义控件</h4><p>并创建所需的各种参数及构造方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DisView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">View</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> Paint paint;<br>    <span class="hljs-comment">//手指触摸位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> toX,toY;<br>    <span class="hljs-comment">//外圆位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> circleX;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> circleY;<br>    <span class="hljs-comment">//圆半径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> radiuse;<br><br>    <span class="hljs-comment">//离开广播</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  String BroadCast=<span class="hljs-string">&quot;co.nroma.bluetooth.DisView&quot;</span>;<br>    <span class="hljs-keyword">private</span> LocalBroadcastManager manager;<br><br>    <span class="hljs-comment">//主程序调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisView</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>    &#125;<br>    <span class="hljs-comment">//Xml中创建控件调用，默认</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br>    &#125;<br>    <span class="hljs-comment">//Xml创建控件是，指定Style是调用，</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DisView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr);<br>        manager=LocalBroadcastManager.getInstance(context);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Select-Methods-to-Override，也就是重写方法"><a href="#Select-Methods-to-Override，也就是重写方法" class="headerlink" title="Select Methods to Override，也就是重写方法"></a>Select Methods to Override，也就是重写方法</h4><p>有两个需要重写</p><p>1、onDraw（Canvas canvas）；</p><p>主管绘制</p><p>2、onTouchEvent(MotionEvent event)；</p><p>主管触摸动作操作</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDraw</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>       <span class="hljs-built_in">super</span>.onDraw(canvas);<br>       <span class="hljs-comment">//绘图</span><br>       canvas.drawColor(Color.TRANSPARENT);<span class="hljs-comment">//透明</span><br>       <span class="hljs-comment">//圆半径</span><br>       radiuse=getWidth()/<span class="hljs-number">3</span>;<br>       <span class="hljs-comment">//内圆半径</span><br>       <span class="hljs-type">int</span> radiusep=getWidth()/<span class="hljs-number">8</span>;<br>       <span class="hljs-comment">//圆心位置</span><br>       circleX=getWidth()/<span class="hljs-number">2</span>;<br>       circleY=getWidth()/<span class="hljs-number">2</span>;<br><br>       <span class="hljs-keyword">if</span> (paint==<span class="hljs-literal">null</span>)&#123;<br>           paint=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>();<br>       &#125;<br>       paint.setAntiAlias(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢.</span><br>       paint.setDither(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</span><br>       paint.setStyle(Paint.Style.FILL);<br>       <span class="hljs-type">int</span> color=Color.rgb(<span class="hljs-number">30</span>,<span class="hljs-number">144</span>,<span class="hljs-number">255</span>);<br>       paint.setColor(color);<span class="hljs-comment">//背景圆Color</span><br>       canvas.drawCircle(circleX,circleY,radiuse,paint);<br><br>       <span class="hljs-keyword">if</span> (toX&lt;=<span class="hljs-number">0</span> &amp;&amp; toY&lt;=<span class="hljs-number">0</span>)&#123;<br><br>           <span class="hljs-type">int</span> color2=Color.rgb(<span class="hljs-number">205</span>,<span class="hljs-number">186</span>,<span class="hljs-number">150</span>);<br>           paint.setColor(color2);   <span class="hljs-comment">//内圆颜色</span><br>           paint.setAntiAlias(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢.</span><br>           <span class="hljs-comment">//paint.setDither(true);//设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</span><br><br>           canvas.drawCircle(circleX,circleY,radiusep,paint);<br>           canvas.save();<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-type">int</span> color3=Color.rgb(<span class="hljs-number">205</span>,<span class="hljs-number">186</span>,<span class="hljs-number">150</span>);<br>       paint.setColor(color3);<br>       canvas.drawCircle(toX,toY,radiusep,paint);<br>       canvas.save();<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouchEvent</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br><br>       <span class="hljs-keyword">switch</span> (event.getAction())&#123;<br>           <span class="hljs-keyword">case</span> MotionEvent.ACTION_MOVE:<span class="hljs-comment">//当触点在屏幕上移动时触发，触点在屏幕上停留也是会触发</span><br>               toX = (<span class="hljs-type">int</span>) event.getX();<span class="hljs-comment">//获得X and Y坐标</span><br>               toY = (<span class="hljs-type">int</span>) event.getY();<br>               <span class="hljs-comment">//勾股定理</span><br>               <span class="hljs-keyword">if</span>((toY-circleY)*(toY-circleY)+(toX-circleX)*(toX-circleX)&gt;=radiuse*radiuse)&#123;<span class="hljs-comment">//判断滑动超出外圆</span><br>                   <span class="hljs-comment">//相似比</span><br>                   <span class="hljs-type">double</span> <span class="hljs-variable">similarity</span> <span class="hljs-operator">=</span> Math.sqrt((radiuse* radiuse) / ((toY - circleY)*(toY - circleY) + (toX - circleX)*(toX - circleX)));<br>                   toX = (<span class="hljs-type">int</span>) ((toX - circleX)*similarity + circleX);<br>                   toY = (<span class="hljs-type">int</span>) ((toY - circleY)*similarity + circleY);<br>               &#125;<br>               <span class="hljs-built_in">this</span>.invalidate();<span class="hljs-comment">//刷新</span><br>               <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">case</span> MotionEvent.ACTION_UP:<span class="hljs-comment">//如果抬起手指</span><br>               <span class="hljs-comment">//发送广播</span><br>               Intent intent=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(BroadCast);<br>               intent.putExtra(<span class="hljs-string">&quot;move&quot;</span>,(toX-circleX)+<span class="hljs-string">&quot; &quot;</span>+(toY-circleY));<br>               <span class="hljs-comment">//清空值</span><br>               toX=<span class="hljs-number">0</span>;<br>               toY=<span class="hljs-number">0</span>;<br>               <span class="hljs-built_in">this</span>.invalidate();<span class="hljs-comment">//刷新</span><br>               <span class="hljs-keyword">break</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p> 此时，自定义View基本创建完毕。</p><h4 id="在activity-main-xml中使用它"><a href="#在activity-main-xml中使用它" class="headerlink" title="在activity_main.xml中使用它"></a>在activity_main.xml中使用它</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">co.nroma.bluetooth.DisView</span>    </span><br><span class="hljs-tag"> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/DisView&quot;</span>    </span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;280dp&quot;</span>  </span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;280dp&quot;</span>   </span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_marginStart</span>=<span class="hljs-string">&quot;20dp&quot;</span>    </span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_marginLeft</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">&quot;120dp&quot;</span>   </span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_marginEnd</span>=<span class="hljs-string">&quot;631dp&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_marginRight</span>=<span class="hljs-string">&quot;631dp&quot;</span>   </span><br><span class="hljs-tag"> <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">&quot;30dp&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span>    <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.02&quot;</span>    <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span>   </span><br><span class="hljs-tag"> <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span>   </span><br><span class="hljs-tag"> <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">co.nroma.bluetooth.DisView</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后在activity里面使用它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> co.nroma.bluetooth;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.BroadcastReceiver;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.content.pm.ActivityInfo;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.Window;<br><span class="hljs-keyword">import</span> android.view.WindowManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String mess;<br>    <span class="hljs-keyword">private</span> MyBoradCastReceiver receiver;<br>    <span class="hljs-keyword">private</span>  DisView disView;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        requestWindowFeature(Window.FEATURE_NO_TITLE);<span class="hljs-comment">//隐藏标题</span><br>        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);<span class="hljs-comment">//设置全屏</span><br>        setContentView(R.layout.activity_main);<br>        disView = findViewById(R.id.DisView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 设置为横屏</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(getRequestedOrientation()!= ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE)&#123;<br>            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);<br>        &#125;<br>        <span class="hljs-built_in">super</span>.onResume();<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBoradCastReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            String str=intent.getStringExtra(<span class="hljs-string">&quot;move&quot;</span>);<br>            <span class="hljs-comment">//TODO</span><br>            <span class="hljs-comment">//  TODO通过XY值来判断方向</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​</p><p>​</p><p>2020&#x2F;4&#x2F;04&#x2F;19 : 38</p><p>​by Li Long Fei editor</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库笔记</title>
    <link href="/Nroma/2020/04/01/Mysql_Note/"/>
    <url>/Nroma/2020/04/01/Mysql_Note/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库笔记"><a href="#数据库笔记" class="headerlink" title="数据库笔记"></a>数据库笔记</h1><span id="more"></span><h2 id="一、数据库的概念"><a href="#一、数据库的概念" class="headerlink" title="一、数据库的概念"></a>一、数据库的概念</h2><h4 id="DB-DataBase"><a href="#DB-DataBase" class="headerlink" title="DB(DataBase):"></a>DB(DataBase):</h4><p>按照数据结构来组织、存储和管理数据的仓库。</p><h4 id="DBMS-DataBase-Management-System"><a href="#DBMS-DataBase-Management-System" class="headerlink" title="DBMS(DataBase Management System):"></a>DBMS(DataBase Management System):</h4><h5 id="1-、基于文件共享系统的DBMS-ACCESS"><a href="#1-、基于文件共享系统的DBMS-ACCESS" class="headerlink" title="(1)、基于文件共享系统的DBMS(ACCESS)"></a>(1)、基于文件共享系统的DBMS(ACCESS)</h5><h5 id="2-、基于C-x2F-S的DBMS-MySQL，ORACLE，SQLSERVER"><a href="#2-、基于C-x2F-S的DBMS-MySQL，ORACLE，SQLSERVER" class="headerlink" title="(2)、基于C&#x2F;S的DBMS(MySQL，ORACLE，SQLSERVER)"></a>(2)、基于C&#x2F;S的DBMS(MySQL，ORACLE，SQLSERVER)</h5><h4 id="SQL-Structured-Query-Language"><a href="#SQL-Structured-Query-Language" class="headerlink" title="SQL(Structured Query Language):"></a>SQL(Structured Query Language):</h4><p>结构化查询语言。</p><h2 id="二、MySQL的使用"><a href="#二、MySQL的使用" class="headerlink" title="二、MySQL的使用"></a>二、MySQL的使用</h2><h4 id="服务的启动与停止："><a href="#服务的启动与停止：" class="headerlink" title="服务的启动与停止："></a>服务的启动与停止：</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br></code></pre></td></tr></table></figure><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> stop mysql<br></code></pre></td></tr></table></figure><h4 id="服务的登陆与退出："><a href="#服务的登陆与退出：" class="headerlink" title="服务的登陆与退出："></a>服务的登陆与退出：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -h localhost -<span class="hljs-selector-tag">P</span> <span class="hljs-number">3306</span> -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">classification</th><th align="left">description</th></tr></thead><tbody><tr><td align="left">h</td><td align="left">host address</td></tr><tr><td align="left">P</td><td align="left">POST</td></tr><tr><td align="left">u</td><td align="left">user</td></tr><tr><td align="left">p</td><td align="left">password</td></tr></tbody></table><h4 id="常见命令："><a href="#常见命令：" class="headerlink" title="常见命令："></a>常见命令：</h4><h5 id="1-、查看当前所有数据库"><a href="#1-、查看当前所有数据库" class="headerlink" title="(1)、查看当前所有数据库"></a>(1)、查看当前所有数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW databases;<br></code></pre></td></tr></table></figure><h5 id="2-、打开指定数据库"><a href="#2-、打开指定数据库" class="headerlink" title="(2)、打开指定数据库"></a>(2)、打开指定数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE 库名;<br></code></pre></td></tr></table></figure><h5 id="3-、查看当前库的数据表"><a href="#3-、查看当前库的数据表" class="headerlink" title="(3)、查看当前库的数据表"></a>(3)、查看当前库的数据表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW tables;<br></code></pre></td></tr></table></figure><h5 id="4-、创建表"><a href="#4-、创建表" class="headerlink" title="(4)、创建表"></a>(4)、创建表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>    `字段1` int,<br>    `字段2` varchar(20)<br>);<br><br></code></pre></td></tr></table></figure><h5 id="5-、查看表结构"><a href="#5-、查看表结构" class="headerlink" title="(5)、查看表结构"></a>(5)、查看表结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC 表名;<br></code></pre></td></tr></table></figure><h4 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h4><h5 id="1-、不区分大小写"><a href="#1-、不区分大小写" class="headerlink" title="(1)、不区分大小写"></a>(1)、不区分大小写</h5><h5 id="2-、命令用-或-c结尾"><a href="#2-、命令用-或-c结尾" class="headerlink" title="(2)、命令用;或\c结尾"></a>(2)、命令用;或\c结尾</h5><h5 id="3-、缩进或换行无影响（建议关键字一行）"><a href="#3-、缩进或换行无影响（建议关键字一行）" class="headerlink" title="(3)、缩进或换行无影响（建议关键字一行）"></a>(3)、缩进或换行无影响（建议关键字一行）</h5><h5 id="4-、注释"><a href="#4-、注释" class="headerlink" title="(4)、注释"></a>(4)、注释</h5><table><thead><tr><th>classification</th><th>description</th></tr></thead><tbody><tr><td>单行注释</td><td>#XXXXXX<br/>– XXXXXX</td></tr><tr><td>多行注释</td><td>&#x2F;<em>XXXXXX</em>&#x2F;</td></tr></tbody></table><h2 id="三、DQL-Data-Query-Language"><a href="#三、DQL-Data-Query-Language" class="headerlink" title="三、DQL(Data Query Language)"></a>三、DQL(Data Query Language)</h2><h4 id="基础查询："><a href="#基础查询：" class="headerlink" title="基础查询："></a>基础查询：</h4><h5 id="1-、基础语法"><a href="#1-、基础语法" class="headerlink" title="(1)、基础语法"></a>(1)、基础语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    [查询列表]<br>FROM<br>    表名;<br></code></pre></td></tr></table></figure><h5 id="2-、查询单个字段"><a href="#2-、查询单个字段" class="headerlink" title="(2)、查询单个字段"></a>(2)、查询单个字段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    `字段`<br>FROM<br>    表名;<br></code></pre></td></tr></table></figure><h5 id="3-、查询多个字段"><a href="#3-、查询多个字段" class="headerlink" title="(3)、查询多个字段"></a>(3)、查询多个字段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    `字段1`,`字段2`<br>FROM <br>    表名;<br></code></pre></td></tr></table></figure><h5 id="4-、查询常量值"><a href="#4-、查询常量值" class="headerlink" title="(4)、查询常量值"></a>(4)、查询常量值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>100;<br></code></pre></td></tr></table></figure><h5 id="5-、查询表达式"><a href="#5-、查询表达式" class="headerlink" title="(5)、查询表达式"></a>(5)、查询表达式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>100%98;<br></code></pre></td></tr></table></figure><h5 id="6-、查询函数"><a href="#6-、查询函数" class="headerlink" title="(6)、查询函数"></a>(6)、查询函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>version();<br></code></pre></td></tr></table></figure><h5 id="7-、起别名"><a href="#7-、起别名" class="headerlink" title="(7)、起别名"></a>(7)、起别名</h5><h6 id="1-、AS"><a href="#1-、AS" class="headerlink" title="1)、AS"></a>1)、AS</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>`字段1` AS &quot;字段1别名&quot;，<br>`字段2` AS &quot;字段2别名&quot; <br>FROM <br>表名;<br></code></pre></td></tr></table></figure><h6 id="2-、空格"><a href="#2-、空格" class="headerlink" title="2)、空格"></a>2)、空格</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>`字段1` &quot;字段1别名&quot;,<br>`字段2` &quot;字段2别名&quot;<br>FROM <br>表名;<br></code></pre></td></tr></table></figure><h5 id="8-、去重"><a href="#8-、去重" class="headerlink" title="(8)、去重"></a>(8)、去重</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>DISTINCT<br>`查询且去重字段`<br>FROM <br>表名;<br></code></pre></td></tr></table></figure><h5 id="9-、-号"><a href="#9-、-号" class="headerlink" title="(9)、+ 号"></a>(9)、+ 号</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#两个操作数都为数值型，则做加法运算<br>#如果一方为字符型，则将其尝试转化为数值型<br>#如果转换失败，则默认为0<br>#如果一方为NULL，则都为NULL<br></code></pre></td></tr></table></figure><h5 id="10-、连接函数"><a href="#10-、连接函数" class="headerlink" title="(10)、连接函数"></a>(10)、连接函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">concat(str1,str2,...)<br></code></pre></td></tr></table></figure><h5 id="11-、判断NULL"><a href="#11-、判断NULL" class="headerlink" title="(11)、判断NULL"></a>(11)、判断NULL</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">IFNULL(`xxx`,xx)<br></code></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><h5 id="1-、基础条件查询语法"><a href="#1-、基础条件查询语法" class="headerlink" title="(1)、基础条件查询语法"></a>(1)、基础条件查询语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>[查询列表]<br>FROM<br>表名<br>WHERE<br>    [条件];<br></code></pre></td></tr></table></figure><h5 id="2-、条件运算符-gt-lt-x3D-x3D-lt-gt-gt-x3D-lt-x3D"><a href="#2-、条件运算符-gt-lt-x3D-x3D-lt-gt-gt-x3D-lt-x3D" class="headerlink" title="(2)、条件运算符(&gt;  &lt;  &#x3D;  !&#x3D;  &lt;&gt;  &gt;&#x3D;  &lt;&#x3D;)"></a>(2)、条件运算符(&gt;  &lt;  &#x3D;  !&#x3D;  &lt;&gt;  &gt;&#x3D;  &lt;&#x3D;)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>*<br>FROM<br>表名<br>WHERE<br>`需要判断的字段`&lt;&gt;10;<br></code></pre></td></tr></table></figure><h5 id="3-、逻辑运算符-amp-amp-！"><a href="#3-、逻辑运算符-amp-amp-！" class="headerlink" title="(3)、逻辑运算符(&amp;&amp;   ||  ！)"></a>(3)、逻辑运算符(&amp;&amp;   ||  ！)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#AND  OR  NOT <br></code></pre></td></tr></table></figure><h5 id="4-、模糊查询-LIKE"><a href="#4-、模糊查询-LIKE" class="headerlink" title="(4)、模糊查询(LIKE)"></a>(4)、模糊查询(LIKE)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    *<br>FROM<br>    表名<br>WHERE<br>    `字段`<br>LIKE<br>&#x27;%查询字段%&#x27;;<br></code></pre></td></tr></table></figure><p>其中，通配符：</p><table><thead><tr><th align="left">classification</th><th align="left">description</th></tr></thead><tbody><tr><td align="left">%</td><td align="left">任意多个字符，包含零个字符</td></tr><tr><td align="left">_</td><td align="left">任意单个字符</td></tr><tr><td align="left">\_</td><td align="left">如果冲突，可用转义字符</td></tr><tr><td align="left">escape ‘字符’</td><td align="left">也可自定义转义字符</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    *<br>FROM<br>    表名<br>WHERE<br>    `字段` <br>LIKE<br>&#x27;%查询字段&amp;&#x27; <br>ESCAPE<br>&#x27;&amp;&#x27;;<br></code></pre></td></tr></table></figure><h5 id="5-、between-and-在…之间"><a href="#5-、between-and-在…之间" class="headerlink" title="(5)、between and(在…之间)"></a>(5)、between and(在…之间)</h5><p>完全等价于：&gt;&#x3D; &lt;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT <br>*<br>FROM <br>表名<br>WHERE<br>`字段` BETWEEN 100 AND 120;<br></code></pre></td></tr></table></figure><h5 id="6-IN-一个字段的多个查询结果的条件判断"><a href="#6-IN-一个字段的多个查询结果的条件判断" class="headerlink" title="(6)IN(一个字段的多个查询结果的条件判断)"></a>(6)IN(一个字段的多个查询结果的条件判断)</h5><h6 id="1-、用来替代多个OR"><a href="#1-、用来替代多个OR" class="headerlink" title="1)、用来替代多个OR"></a>1)、用来替代多个OR</h6><h6 id="2-、IN列表值类型必须统一或可隐式转换"><a href="#2-、IN列表值类型必须统一或可隐式转换" class="headerlink" title="2)、IN列表值类型必须统一或可隐式转换"></a>2)、IN列表值类型必须统一或可隐式转换</h6><h6 id="3-、不可以使用通配符"><a href="#3-、不可以使用通配符" class="headerlink" title="3)、不可以使用通配符"></a>3)、不可以使用通配符</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>*<br>FROM<br>表名<br>WHERE<br>`需要判断的字段` <br>IN(&#x27;str1&#x27;,&#x27;str2&#x27;,&#x27;str3&#x27;);<br></code></pre></td></tr></table></figure><h5 id="7-、IS-NULL"><a href="#7-、IS-NULL" class="headerlink" title="(7)、IS NULL"></a>(7)、IS NULL</h5><p>由于&#x3D;号不能判断NULL</p><p>所以使用<strong>IS NULL</strong> OR <strong>IS NOT NULL</strong> 来判断是否为NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>*<br>FROM <br>表名<br>WHERE<br>`字段` <br>IS NULL;<br></code></pre></td></tr></table></figure><h5 id="8-、-lt-x3D-gt"><a href="#8-、-lt-x3D-gt" class="headerlink" title="(8)、&lt;&#x3D;&gt;"></a>(8)、&lt;&#x3D;&gt;</h5><p>既可以判断NULL，又可以作为&#x3D;使用</p><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询:"></a>排序查询:</h4><h5 id="1-、基础语法-1"><a href="#1-、基础语法-1" class="headerlink" title="(1)、基础语法"></a>(1)、基础语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>*<br>FROM<br>表名<br>ORDER BY <br>`待排字段` <br>DESC;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">classification</th><th align="left">description</th></tr></thead><tbody><tr><td align="left">ASC(默认)</td><td align="left">升序</td></tr><tr><td align="left">DESC</td><td align="left">降序</td></tr></tbody></table><p>一般order by放在最后（除limit子句）</p><h5 id="2-、单个多个字段及表达式排序"><a href="#2-、单个多个字段及表达式排序" class="headerlink" title="(2)、单个多个字段及表达式排序"></a>(2)、单个多个字段及表达式排序</h5><h5 id="3-、别名排序"><a href="#3-、别名排序" class="headerlink" title="(3)、别名排序"></a>(3)、别名排序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>`字段` &#x27;别名&#x27;<br>FROM<br>表名<br>ORDER BY <br>&#x27;别名&#x27;<br>DESC;<br></code></pre></td></tr></table></figure><h5 id="4-、按函数排序"><a href="#4-、按函数排序" class="headerlink" title="(4)、按函数排序"></a>(4)、按函数排序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT<br>length(`待排字段`) <br>FROM<br>表名<br>ORDER BY <br>length(`待排字段`) <br>DESC;<br></code></pre></td></tr></table></figure><h5 id="5-多个字段排序"><a href="#5-多个字段排序" class="headerlink" title="(5)多个字段排序"></a>(5)多个字段排序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT <br>*<br>FROM<br>表名<br>ORDER BY<br>`字段1`<br>ASC<br>`字段2`<br>DESC;<br></code></pre></td></tr></table></figure><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数:"></a>常见函数:</h4><h5 id="1-、基础查询"><a href="#1-、基础查询" class="headerlink" title="(1)、基础查询"></a>(1)、基础查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>[函数名(实参列表)] <br>FROM<br>`表名`;<br></code></pre></td></tr></table></figure><h5 id="2-、-单行函数"><a href="#2-、-单行函数" class="headerlink" title="(2)、 单行函数"></a>(2)、 单行函数</h5><h6 id="1-、字符函数"><a href="#1-、字符函数" class="headerlink" title="1)、字符函数"></a>1)、字符函数</h6><table><thead><tr><th align="left">classification</th><th align="left">description</th></tr></thead><tbody><tr><td align="left">length(str)</td><td align="left">获取字节数</td></tr><tr><td align="left">concat(str,str2,…)</td><td align="left">拼接字符串</td></tr><tr><td align="left">upper(str)</td><td align="left">将字符串转换为大写</td></tr><tr><td align="left">lower(str)</td><td align="left">将字符串转换为小写</td></tr><tr><td align="left">substr(str pos)</td><td align="left">pos从1开始,截取pos后面的所有的str</td></tr><tr><td align="left">substr(str,pos,len)</td><td align="left">pos从1开始，截取pos后面的len字符长度的str</td></tr><tr><td align="left">left(str,len)</td><td align="left">从左开始截取len字符长度的str</td></tr><tr><td align="left">right(str,len)</td><td align="left">从右开始截取len字符长度的str</td></tr><tr><td align="left">instr(str,substr)</td><td align="left">返回子串substr第一次出现在str的索引,如果没有，返回0</td></tr><tr><td align="left">trim(‘str’)</td><td align="left">去除str前后空格并返回字符串</td></tr><tr><td align="left">trim(‘pos’ from ‘str’)</td><td align="left">去除str前后的pos并返回字符串</td></tr><tr><td align="left">lpad</td><td align="left">用padstr从左边填充str，直到str长度等于len</td></tr><tr><td align="left">rpad</td><td align="left">用padstr从右边填充str，直到str长度等于len</td></tr><tr><td align="left">replace(str,from_str,to_str)</td><td align="left">将str里的所有from_str替换为to_str</td></tr></tbody></table><h6 id="2-、数学函数"><a href="#2-、数学函数" class="headerlink" title="2)、数学函数"></a>2)、数学函数</h6><table><thead><tr><th align="left">classification</th><th align="left">description</th></tr></thead><tbody><tr><td align="left">round(X)</td><td align="left">X的四舍五入</td></tr><tr><td align="left">round(X,D)</td><td align="left">X的四舍五入，保留D位</td></tr><tr><td align="left">ceil(x)</td><td align="left">向上取整</td></tr><tr><td align="left">floor(x)</td><td align="left">向下取整</td></tr><tr><td align="left">truncate(X,D)</td><td align="left">截断X，保留D位</td></tr><tr><td align="left">mod(n,M)</td><td align="left">为n取模M，求余数</td></tr><tr><td align="left">rand()</td><td align="left">随机数（0-1）</td></tr></tbody></table><h6 id="3-、日期函数"><a href="#3-、日期函数" class="headerlink" title="3)、日期函数"></a>3)、日期函数</h6><table><thead><tr><th>classification</th><th>description</th></tr></thead><tbody><tr><td>now()</td><td>返回系统当日期时间</td></tr><tr><td>curdate()</td><td>返回系统当前日期</td></tr><tr><td>curtime()</td><td>返回系统当前的时间</td></tr><tr><td>year(date)</td><td>获取date的年部分</td></tr><tr><td>month(date)</td><td>获取date的月部分</td></tr><tr><td>monthname(date)</td><td>获取date的月部分并以英文显示</td></tr><tr><td>str_to_date(str，format)</td><td>将str转换成format格式的日期</td></tr><tr><td>date_format(date，format)</td><td>将date转换成format格式的字符串</td></tr><tr><td>datadiff(datepart,strdate,enddate)</td><td>相差天数,返回datepart格式</td></tr></tbody></table><h6 id="4-、其他函数"><a href="#4-、其他函数" class="headerlink" title="4)、其他函数"></a>4)、其他函数</h6><table><thead><tr><th>classification</th><th>description</th></tr></thead><tbody><tr><td>version()</td><td></td></tr><tr><td>database()</td><td></td></tr><tr><td>user()</td><td></td></tr></tbody></table><h6 id="5-、流程控制函数"><a href="#5-、流程控制函数" class="headerlink" title="5)、流程控制函数"></a>5)、流程控制函数</h6><table><thead><tr><th>classification</th><th>description</th></tr></thead><tbody><tr><td>if(expr1,expr2,expr3)</td><td>类三元运算符</td></tr><tr><td>case</td><td></td></tr></tbody></table><p>CASE语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>CASE &#x27;字段or表达式&#x27;<br>WHEN 常量1 THEN &#x27;值or语句&#x27;<br>WHEN 常量2 THEN &#x27;值or语句&#x27;<br>......<br>ELSE &#x27;值or语句&#x27;<br>END<br>FROM<br>表名;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>CASE<br>WHEN 条件1 THEN &#x27;值or语句&#x27;<br>WHEN 条件2 THEN &#x27;值or语句&#x27;<br>......<br>ELSE &#x27;值or语句&#x27;<br>END<br>FROM `表名`;<br></code></pre></td></tr></table></figure><h5 id="3-、分组函数-统计函数、聚合函数、组函数"><a href="#3-、分组函数-统计函数、聚合函数、组函数" class="headerlink" title="(3)、分组函数(统计函数、聚合函数、组函数)"></a>(3)、分组函数(统计函数、聚合函数、组函数)</h5><table><thead><tr><th>classification</th><th>description</th></tr></thead><tbody><tr><td>sum([DISTINCT] expr)</td><td>求和，数值型，忽略NULL</td></tr><tr><td>avg([DISTINCT] expr)</td><td>平均，数值型，忽略NULL</td></tr><tr><td>max([DISTINCT] expr)</td><td>最大值，可比较，数值，字符，日期，忽略NULL</td></tr><tr><td>min([DISTINCT] expr)</td><td>最小值，可比较，数值，字符，日期，忽略NULL</td></tr><tr><td>count(x)</td><td>个数，非NULL都支持</td></tr><tr><td>count(x,x)</td><td></td></tr><tr><td>count(expr)</td><td></td></tr><tr><td>count(DISTINCT expr,[expr…])</td><td></td></tr><tr><td>datediff(‘date1’,’date2’)</td><td>间隔天数</td></tr></tbody></table><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询:"></a>分组查询:</h4><h5 id="1-、基础查询-1"><a href="#1-、基础查询-1" class="headerlink" title="(1)、基础查询"></a>(1)、基础查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>分组函数,[查询列表]<br>FROM<br>表名<br>GROUP BY<br>[查询列表];<br></code></pre></td></tr></table></figure><h5 id="2-、分组后的筛选"><a href="#2-、分组后的筛选" class="headerlink" title="(2)、分组后的筛选"></a>(2)、分组后的筛选</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT<br>分组函数,[查询列表]<br>FROM<br>表名<br>GROUP by<br>[查询列表]<br>HAVING <br>追加分组函数条件;<br></code></pre></td></tr></table></figure><p>多个字段分组用逗号隔开</p><p>也可以用表达式分组</p><p>也可以添加排序，放在分组查询之后</p><h4 id="连接查询-多表查询"><a href="#连接查询-多表查询" class="headerlink" title="连接查询(多表查询):"></a>连接查询(多表查询):</h4><table><thead><tr><th align="center">年代分类</th><th align="center">sql92</th><th align="center">sql99</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">仅支持内连</td><td align="center">内连接+外连接(左外+右外)+交叉连接</td></tr></tbody></table><table><thead><tr><th align="center">功能分类</th><th align="center">内连接</th><th align="center">外连接</th><th align="center">交叉连接</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">等值+非等值+自连接</td><td align="center">左右+全外连</td><td align="center"></td></tr></tbody></table><h5 id="1-、SQL92"><a href="#1-、SQL92" class="headerlink" title="(1)、SQL92"></a>(1)、SQL92</h5><h6 id="1-、等值连接"><a href="#1-、等值连接" class="headerlink" title="1)、等值连接"></a>1)、等值连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>`字段1`,`字段2`<br>FROM<br>表1,表2<br>WHERE <br>表1.`字段`=表2.`字段`;<br></code></pre></td></tr></table></figure><h6 id="2-、非等值连接"><a href="#2-、非等值连接" class="headerlink" title="2)、非等值连接"></a>2)、非等值连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>`字段1`,`字段2`<br>FROM<br>表1,表2<br>WHERE<br>`字段` BETWEEN `字段` AND `字段`;<br></code></pre></td></tr></table></figure><h6 id="3-、自连接"><a href="#3-、自连接" class="headerlink" title="3)、自连接"></a>3)、自连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>别名1.`字段`,别名2.`字段`<br>FROM<br>表 别名1,表 别名2<br>WHERE<br>别名1.`字段`=别名2.`字段`;<br></code></pre></td></tr></table></figure><h5 id="2-、SQL99"><a href="#2-、SQL99" class="headerlink" title="(2)、SQL99"></a>(2)、SQL99</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>查询列表<br>FROM<br>表1 <br>[连接类型]<br>JOIN<br>表2<br>ON <br>连接条件<br></code></pre></td></tr></table></figure><table><thead><tr><th>classification</th><th>description</th></tr></thead><tbody><tr><td>内连接：两表交集</td><td>inner</td></tr><tr><td>左外连接：左表+右表与它的交集</td><td>left outer</td></tr><tr><td>右外连接：右表+左表与它的交集</td><td>right outer</td></tr><tr><td>全外连接：两表全部</td><td>full outer</td></tr><tr><td>交叉连接：笛卡尔乘积</td><td>cross join</td></tr></tbody></table><h6 id="1-、内连接之等值连接"><a href="#1-、内连接之等值连接" class="headerlink" title="1)、内连接之等值连接"></a>1)、内连接之等值连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>[查询列表]<br>FROM<br>表1<br>INNER JOIN<br>表2<br>ON<br>连接条件;<br></code></pre></td></tr></table></figure><p>三表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>a.`字段1`,<br>b.`字段2`,<br>c.`字段2`<br>FROM<br>表1 a<br>INNER JOIN<br>表2 b<br>ON<br>连接条件<br>INNER JOIN<br>表3 c<br>ON<br>连接条件;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>a.`字段1`,<br>b.`字段2`,<br>c.`字段2`<br>FROM<br>表1 a<br>INNER JOIN<br>表2 b<br>INNER JOIN<br>表3 c<br>ON<br>连接条件<br>AND<br>连接条件;<br></code></pre></td></tr></table></figure><h6 id="2-、内连接之非等值"><a href="#2-、内连接之非等值" class="headerlink" title="2)、内连接之非等值"></a>2)、内连接之非等值</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>`字段1`,`字段2`<br>FROM<br>表1<br>INNER JOIN<br>表2<br>ON<br>`连接条件字段` <br>BETWEEN `XXX` AND `XXX`;<br></code></pre></td></tr></table></figure><h6 id="3-、内连接之自连接"><a href="#3-、内连接之自连接" class="headerlink" title="3)、内连接之自连接"></a>3)、内连接之自连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>a.`字段`,b.`字段`<br>FROM<br>表1 a<br>INNER JOIN<br>表1 b<br>ON<br>a.`连接字段`=b.`连接字段`<br></code></pre></td></tr></table></figure><h6 id="4-、外连接之左外"><a href="#4-、外连接之左外" class="headerlink" title="4)、外连接之左外"></a>4)、外连接之左外</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>b.`name`<br>FROM <br>表1 a<br>LEFT OUTER JOIN<br>表2 b<br>ON<br>连接条件;<br></code></pre></td></tr></table></figure><h6 id="5-、外连接之右外"><a href="#5-、外连接之右外" class="headerlink" title="5)、外连接之右外"></a>5)、外连接之右外</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>a.`字段``<br>FROM <br>表1 a<br>RIGHT OUTER JOIN<br>表2 b<br>ON<br>连接条件;<br></code></pre></td></tr></table></figure><h6 id="6-、外连接之全外"><a href="#6-、外连接之全外" class="headerlink" title="6)、外连接之全外"></a>6)、外连接之全外</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>a.`字段``<br>FROM <br>表1 a<br>FULL OUTER JOIN<br>表2 b<br>ON<br>连接条件;<br></code></pre></td></tr></table></figure><p>7)、交叉连接</p><p>笛卡尔乘积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT<br>a.*,b.*<br>FROM<br>表1 a<br>CROSS JOIN <br>表2 b;<br></code></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询:"></a>子查询:</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">()<br></code></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询:"></a>分页查询:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">limit</span><br></code></pre></td></tr></table></figure><h4 id="union联合查询"><a href="#union联合查询" class="headerlink" title="union联合查询:"></a>union联合查询:</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">select</span><span class="hljs-number">1</span><br>union<br><span class="hljs-keyword">select</span><span class="hljs-number">2</span><br>union<br><span class="hljs-keyword">select</span><span class="hljs-number">3</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML(Data Manipulation Language):"></a>DML(Data Manipulation Language):</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="DDL-Data-Definition-Language"><a href="#DDL-Data-Definition-Language" class="headerlink" title="DDL(Data Definition Language):"></a>DDL(Data Definition Language):</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="TCL-Transaction-Control-Language"><a href="#TCL-Transaction-Control-Language" class="headerlink" title="TCL(Transaction Control Language):"></a>TCL(Transaction Control Language):</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arduino智能小车开发日志</title>
    <link href="/Nroma/2020/03/28/Car/"/>
    <url>/Nroma/2020/03/28/Car/</url>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>This is not the end</p><blockquote><p>DOTO：android，wifi </p></blockquote><span id="more"></span><h2 id="2020-x2F-07-x2F-06"><a href="#2020-x2F-07-x2F-06" class="headerlink" title="2020&#x2F;07&#x2F;06"></a>2020&#x2F;07&#x2F;06</h2><p>在上次的基础上添加红外遥控功能</p><p>红外数据的发送和接受对PWM模拟输出影响非常大，只能用自带的信号输出就很烦，不能调速度，烦躁！！！</p><p>总是不能完美一点！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 作者: 李龙飞</span><br><span class="hljs-comment">* 时间: 2020/7/6</span><br><span class="hljs-comment">* Arduino智能小车</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;IRremote.h&gt;</span><span class="hljs-comment">//库文件</span></span><br><br><span class="hljs-comment">//****************************红外引脚定义****************************//</span><br><span class="hljs-type">int</span> Recv_Pin = A4;<br><br><span class="hljs-comment">//****************初始化*******************//</span><br><span class="hljs-type">int</span> on = <span class="hljs-number">0</span>;<span class="hljs-comment">//标志位</span><br>IRrecv <span class="hljs-title function_">irrecv</span><span class="hljs-params">(Recv_Pin)</span>;<br>decode_results results;<span class="hljs-comment">////解码结果放在 decode results结构的 result中</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> last = millis();<br><br><span class="hljs-comment">//***************************按键初始化******************************//</span><br><span class="hljs-type">long</span> run_car = <span class="hljs-number">0x00FF629D</span>;<span class="hljs-comment">//按键CH</span><br><span class="hljs-type">long</span> back_car = <span class="hljs-number">0x00FFA857</span>;<span class="hljs-comment">//按键+</span><br><span class="hljs-type">long</span> left_car = <span class="hljs-number">0x00FF22DD</span>;<span class="hljs-comment">//按键&lt;&lt;</span><br><span class="hljs-type">long</span> right_car = <span class="hljs-number">0x00FFC23D</span>;<span class="hljs-comment">//按键&gt;||</span><br><span class="hljs-type">long</span> stop_car = <span class="hljs-number">0x00FF02FD</span>;<span class="hljs-comment">//按键&gt;&gt;|</span><br><span class="hljs-type">long</span> left_turn = <span class="hljs-number">0x00ffE01F</span>;<span class="hljs-comment">//按键-</span><br><span class="hljs-type">long</span> right_turn = <span class="hljs-number">0x00FF906F</span>;<span class="hljs-comment">//按键EQ</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//************串口初始化*************//</span><br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  <span class="hljs-comment">//************电机引脚初始化*********//</span><br>  pinMode(LeftA, OUTPUT); <span class="hljs-comment">// PIN 8  不可PWM</span><br>  pinMode(LeftB, OUTPUT); <span class="hljs-comment">// PIN 9  可PWM，也可电平</span><br>  pinMode(RightA, OUTPUT);<span class="hljs-comment">// PIN 10 可PWM，也可电平</span><br>  pinMode(RightB, OUTPUT);<span class="hljs-comment">// PIN 11 可PWM，也可电平</span><br>  <span class="hljs-comment">//**** 按键引脚和蜂鸣器引脚初始化****//</span><br>  pinMode(A2, INPUT);<br>  pinMode(A3, OUTPUT);<br>  <span class="hljs-comment">//*******循迹传感器引脚初始化********//</span><br>  pinMode(SensorR, INPUT);<br>  pinMode(SensorL, INPUT);<br>  <span class="hljs-comment">//******超声波传感器引脚初始化*******//</span><br>  pinMode(Trig, OUTPUT);<br>  pinMode(Echo, INPUT);<br>  <span class="hljs-comment">//**********舵机引脚初始化***********//</span><br>  <span class="hljs-comment">//myServo.attach(servo);</span><br>  <span class="hljs-comment">//***********初始化舵机方向***********//</span><br>  <span class="hljs-comment">//myServo.write(90);  //旋转到中间</span><br>  <span class="hljs-comment">//********启动接收器*******//</span><br>  irrecv.enableIRIn();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dump</span><span class="hljs-params">(decode_results *results)</span> &#123;<br>  <span class="hljs-keyword">if</span> (results-&gt;decode_type == UNKNOWN)<br>  &#123;<br>    motorRun(STOP);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  函数: infrared</span><br><span class="hljs-comment">  功能: 红外控制</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">infrared</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (irrecv.decode(&amp;results)) &#123;<br>    <span class="hljs-keyword">if</span> (millis() - last &gt; <span class="hljs-number">250</span>) &#123;<br>      on = !on;<br>      digitalWrite(<span class="hljs-number">13</span>, on ? HIGH : LOW);<br>      dump(&amp;results);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (results.value == run_car) &#123;<br>      motorRun(FORWARD);<br>      Serial.println(results.value, HEX);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (results.value == back_car) &#123;<br>      motorRun(BACKWARD);<br>      Serial.println(results.value, HEX);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (results.value == left_car) &#123;<br>      motorRun(TURNLEFT);<br>      Serial.println(results.value, HEX);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (results.value == right_car) &#123;<br>      motorRun(TURNRIGHT);<br>      Serial.println(results.value, HEX);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (results.value == stop_car) &#123;<br>      motorRun(STOP);<br>      Serial.println(results.value, HEX);<br>    &#125;<br>    last = millis;<br>    irrecv.resume();<span class="hljs-comment">// 接收下一个值  </span><br>  &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  函数: loop</span><br><span class="hljs-comment">  功能: 循环执行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    infrared();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2020-x2F-04-x2F-24"><a href="#2020-x2F-04-x2F-24" class="headerlink" title="2020&#x2F;04&#x2F;24"></a>2020&#x2F;04&#x2F;24</h2><p>推翻上次所有的代码，决定重写</p><p>car.ino</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 作者: 李龙飞</span><br><span class="hljs-comment">* 时间: 2020/4/24</span><br><span class="hljs-comment">* Arduino智能小车</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Servo.h&gt;</span></span><br><br><span class="hljs-comment">//****************************电机引脚定义****************************//</span><br><span class="hljs-type">int</span> LeftA = <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> LeftB = <span class="hljs-number">9</span>;<br><span class="hljs-type">int</span> RightA = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> RightB = <span class="hljs-number">11</span>;<br><span class="hljs-comment">//************************按键和蜂鸣器引脚定义*************************//</span><br><span class="hljs-type">int</span> button = A2; <span class="hljs-comment">//按键</span><br><span class="hljs-type">int</span> beep = A3; <span class="hljs-comment">//蜂鸣器</span><br><span class="hljs-comment">//*************************循迹传感器引脚定义**************************//</span><br><span class="hljs-type">int</span> SensorR = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> SensorL = <span class="hljs-number">4</span>;<br><span class="hljs-comment">//*******************************指令集******************************//</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STOP 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FORWARD 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKWARD 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TURNLEFT 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TURNRIGHT 4</span><br><span class="hljs-comment">//****************************超声波引脚*****************************//</span><br><span class="hljs-type">int</span> Trig = A0; <span class="hljs-comment">//  Trig 触发脚(P2.1)</span><br><span class="hljs-type">int</span> Echo = A1;  <span class="hljs-comment">// Echo回声脚(P2.0)</span><br><span class="hljs-comment">//****************************舵机引脚*******************************//</span><br><span class="hljs-type">int</span> servo = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//***************舵机对象****************//</span><br>Servo myServo;<br><span class="hljs-comment">//***************距离值******************//</span><br><span class="hljs-type">int</span> dis = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: setup</span><br><span class="hljs-comment">* 功能: 程序运行仅调用一，用来初始化一些输入输出等</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//************串口初始化*************//</span><br>  Serial.begin(<span class="hljs-number">9600</span>);<br>  <span class="hljs-comment">//************电机引脚初始化*********//</span><br>  pinMode(LeftA, OUTPUT); <span class="hljs-comment">// PIN 8  不可PWM</span><br>  pinMode(LeftB, OUTPUT); <span class="hljs-comment">// PIN 9  可PWM，也可电平</span><br>  pinMode(RightA, OUTPUT);<span class="hljs-comment">// PIN 10 可PWM，也可电平</span><br>  pinMode(RightB, OUTPUT);<span class="hljs-comment">// PIN 11 可PWM，也可电平</span><br>  <span class="hljs-comment">//**** 按键引脚和蜂鸣器引脚初始化****//</span><br>  pinMode(A2, INPUT);<br>  pinMode(A3, OUTPUT);<br>  <span class="hljs-comment">//*******循迹传感器引脚初始化********//</span><br>  pinMode(SensorR, INPUT);<br>  pinMode(SensorL, INPUT);<br>  <span class="hljs-comment">//******超声波传感器引脚初始化*******//</span><br>  pinMode(Trig, OUTPUT);<br>  pinMode(Echo, INPUT);<br>  <span class="hljs-comment">//**********舵机引脚初始化***********//</span><br>  myServo.attach(servo);<br> <span class="hljs-comment">//***********初始化舵机方向***********//</span><br>  myServo.write(<span class="hljs-number">90</span>);  <span class="hljs-comment">//旋转到中间</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: clean</span><br><span class="hljs-comment">* 功能: 清除运行状态</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span> &#123;<br>  digitalWrite(RightA, LOW);<br>  digitalWrite(RightB, LOW);<br>  digitalWrite(LeftA, LOW);<br>  digitalWrite(LeftB, LOW);<br>  Serial.println(<span class="hljs-string">&quot;clean!&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: motorRun_time</span><br><span class="hljs-comment">* 参数: cmd:运行状态   time:运行时间</span><br><span class="hljs-comment">* 功能: 传入运行状态，程序运行到传入的时间，清除运行状态</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">motorRun_time</span><span class="hljs-params">(<span class="hljs-type">int</span> cmd, <span class="hljs-type">int</span> time)</span> &#123;<br>  <span class="hljs-keyword">switch</span> (cmd) &#123;<br>    <span class="hljs-keyword">case</span> STOP:<br>      Serial.println(<span class="hljs-string">&quot;STOP&quot;</span>);<br>      digitalWrite(RightA, LOW);<br>      digitalWrite(RightB, LOW);<br>      digitalWrite(LeftA, LOW);<br>      digitalWrite(LeftB, LOW);<br>      delay(time * <span class="hljs-number">100</span>);<br>      clean();<br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> FORWARD:<br>      Serial.println(<span class="hljs-string">&quot;FORWARD&quot;</span>);<br>      digitalWrite(RightA, HIGH); <span class="hljs-comment">// 右电机前进</span><br>      digitalWrite(RightB, LOW);<br>      digitalWrite(LeftA, LOW); <span class="hljs-comment">// 左电机前进</span><br>      digitalWrite(LeftB, HIGH);<br>      delay(time * <span class="hljs-number">100</span>);<br>      clean();<br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> BACKWARD:<br>      Serial.println(<span class="hljs-string">&quot;BACKWARD&quot;</span>);<br>      digitalWrite(RightA, LOW); <span class="hljs-comment">//右电机后退</span><br>      digitalWrite(RightB, HIGH);<br>      digitalWrite(LeftA, HIGH); <span class="hljs-comment">// 左电机后退</span><br>      digitalWrite(LeftB, LOW);<br>      delay(time * <span class="hljs-number">100</span>);<br>      clean();<br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> TURNLEFT:<br>      Serial.println(<span class="hljs-string">&quot;TURNLEFT&quot;</span>);<br>      digitalWrite(RightA, HIGH); <span class="hljs-comment">// 右前</span><br>      digitalWrite(RightB, LOW);<br>      digitalWrite(LeftA, HIGH);  <span class="hljs-comment">//左后</span><br>      digitalWrite(LeftB, LOW);<br>      delay(time * <span class="hljs-number">100</span>);<br>      clean();<br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> TURNRIGHT:<br>      Serial.println(<span class="hljs-string">&quot;TURNRIGHT&quot;</span>);<br>      digitalWrite(RightA, LOW);  <span class="hljs-comment">//右电机后退</span><br>      digitalWrite(RightB, HIGH);<br>      digitalWrite(LeftA, LOW); <span class="hljs-comment">//左电机前进</span><br>      digitalWrite(LeftB, HIGH);<br>      delay(time * <span class="hljs-number">100</span>);<br>      clean();<br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: motorRun</span><br><span class="hljs-comment">* 参数: cmd:运行状态</span><br><span class="hljs-comment">* 功能: 传入运行状态，不清除运行状态</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">motorRun</span><span class="hljs-params">(<span class="hljs-type">int</span> cmd)</span> &#123;<br>  <span class="hljs-keyword">switch</span> (cmd) &#123;<br>    <span class="hljs-keyword">case</span> STOP:<br>      Serial.println(<span class="hljs-string">&quot;STOP&quot;</span>);<br>      digitalWrite(RightA, LOW)<br>  digitalWrite(RightB, LOW)<br>  digitalWrite(LeftA, LOW);<br>  digitalWrite(LeftB, LOW);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> FORWARD:<br>      Serial.println(<span class="hljs-string">&quot;FORWARD&quot;</span>);<br>      analogWrite(RightA, <span class="hljs-number">100</span>); <span class="hljs-comment">//PWM比例0~255调速，左右轮差异略增减</span><br>      analogWrite(RightB, <span class="hljs-number">0</span>);<br>      analogWrite(LeftA, <span class="hljs-number">0</span>); <span class="hljs-comment">//PWM比例0~255调速，左右轮差异略增减</span><br>      analogWrite(LeftB, <span class="hljs-number">100</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> BACKWARD:<br>      Serial.println(<span class="hljs-string">&quot;BACKWARD&quot;</span>);<br>      digitalWrite(RightA, LOW); <span class="hljs-comment">//右电机后退</span><br>      digitalWrite(RightB, HIGH);<br>      digitalWrite(LeftA, HIGH); <span class="hljs-comment">// 左电机后退</span><br>      digitalWrite(LeftB, LOW);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TURNLEFT:<br>      Serial.println(<span class="hljs-string">&quot;TURNLEFT&quot;</span>);<br>      digitalWrite(RightA, HIGH); <span class="hljs-comment">// 右前</span><br>      digitalWrite(RightB, LOW);<br>      digitalWrite(LeftA, HIGH);  <span class="hljs-comment">//左后</span><br>      digitalWrite(LeftB, LOW);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TURNRIGHT:<br>      Serial.println(<span class="hljs-string">&quot;TURNRIGHT&quot;</span>);<br>      digitalWrite(RightA, LOW);  <span class="hljs-comment">//右电机后退</span><br>      digitalWrite(RightB, HIGH);<br>      digitalWrite(LeftA, LOW); <span class="hljs-comment">//左电机前进</span><br>      digitalWrite(LeftB, HIGH);<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: tracking</span><br><span class="hljs-comment">* 功能: 循迹</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">tracking</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> data[<span class="hljs-number">2</span>];<br>  data[<span class="hljs-number">0</span>] = digitalRead(SensorR); <span class="hljs-comment">//有信号表明在白色区域，车子底板上L1亮；没信号表明压在黑线上，车子底板上L1灭</span><br>  data[<span class="hljs-number">1</span>] = digitalRead(SensorL);<span class="hljs-comment">//有信号表明在白色区域，车子底板上L2亮；没信号表明压在黑线上，车子底板上L2灭</span><br>  <span class="hljs-keyword">if</span> (data[<span class="hljs-number">0</span>] == LOW &amp;&amp; data[<span class="hljs-number">1</span>] == LOW) &#123;<br>    motorRun(FORWARD);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data[<span class="hljs-number">1</span>] == HIGH &amp;&amp; data[<span class="hljs-number">0</span>] == LOW) &#123; <span class="hljs-comment">// 左循迹红外传感器,检测到信号，车子向右偏离轨道，向左转</span><br>    motorRun(TURNLEFT);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data[<span class="hljs-number">0</span>] == HIGH &amp;&amp; data[<span class="hljs-number">1</span>] == LOW) &#123; <span class="hljs-comment">// 右循迹红外传感器,检测到信号，车子向左偏离轨道，向右转</span><br>    motorRun(TURNRIGHT);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data[<span class="hljs-number">0</span>] == HIGH &amp;&amp; data[<span class="hljs-number">1</span>] == HIGH) &#123;<br>    <span class="hljs-comment">// 都是黑色, 停止</span><br>    motorRun(STOP);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: Distance</span><br><span class="hljs-comment">* 功能: 超声波测距</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Distance</span><span class="hljs-params">()</span> &#123;<br>  digitalWrite(Trig, LOW);<br>  delayMicroseconds(<span class="hljs-number">2</span>);<span class="hljs-comment">//2微秒延迟,无符号整型</span><br>  digitalWrite(Trig, HIGH);<br>  delayMicroseconds(<span class="hljs-number">10</span>);<span class="hljs-comment">//至少10微秒延迟,无符号整型</span><br>  digitalWrite(Trig, LOW);<br>  <span class="hljs-type">float</span> FDis = pulseIn(Echo, HIGH) / <span class="hljs-number">58.00</span>;<br>  <span class="hljs-keyword">return</span> FDis;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: avoid</span><br><span class="hljs-comment">* 功能: 超声波+舵机+避障</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">avoid</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> pos;<br>  motorRun(FORWARD);<br>  <span class="hljs-type">int</span> data[<span class="hljs-number">3</span>];<br>  data[<span class="hljs-number">1</span>] = Distance(); <span class="hljs-comment">//记录中间的距离</span><br>  Serial.println(<span class="hljs-string">&quot;data[1]:&quot;</span>);<br>  Serial.println(data[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">if</span> (data[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">20</span>) &#123;<br>    motorRun(STOP);<br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">90</span>; pos &lt;= <span class="hljs-number">150</span>; pos += <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//旋转到左边</span><br>      myServo.write(pos);<br>      delay(<span class="hljs-number">15</span>);<br>    &#125;<br>    data[<span class="hljs-number">2</span>] = Distance(); <span class="hljs-comment">//记录左边的距离</span><br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">150</span>; pos &gt;= <span class="hljs-number">30</span>; pos -= <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">////旋转到右边</span><br>      myServo.write(pos);<br>      delay(<span class="hljs-number">15</span>);<br>    &#125;<br>    data[<span class="hljs-number">0</span>] = Distance(); <span class="hljs-comment">//记录右边的距离</span><br>    <span class="hljs-comment">//最后将舵机旋转到中间</span><br>    <span class="hljs-keyword">for</span> (pos = <span class="hljs-number">30</span>; pos &lt; <span class="hljs-number">90</span>; pos += <span class="hljs-number">1</span>)<br>    &#123;<br>      myServo.write(pos);<br>      delay(<span class="hljs-number">1</span>);<br>    &#125;<br>    delay(<span class="hljs-number">50</span>);<br>    <span class="hljs-comment">//判断三个方向的距离</span><br>    <span class="hljs-keyword">if</span> (data[<span class="hljs-number">0</span>] &gt; data[<span class="hljs-number">2</span>]) &#123;<br>      <span class="hljs-comment">//右转</span><br>      motorRun_time(BACKWARD, <span class="hljs-number">1</span>);<br>      motorRun_time(TURNRIGHT, <span class="hljs-number">4</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//左转</span><br>      motorRun_time(BACKWARD, <span class="hljs-number">1</span>);<br>      motorRun_time(TURNLEFT, <span class="hljs-number">4</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 函数: loop</span><br><span class="hljs-comment">* 功能: 循环执行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2020-x2F-04-x2F-18"><a href="#2020-x2F-04-x2F-18" class="headerlink" title="2020&#x2F;04&#x2F;18"></a>2020&#x2F;04&#x2F;18</h2><p>基础代码写了一部分，没有系统的学习过C++，但是我认为在项目中学习效果会更好，明天测试</p><p>基础代码有误，已删除</p><h2 id="2020-x2F-04-x2F-01"><a href="#2020-x2F-04-x2F-01" class="headerlink" title="2020&#x2F;04&#x2F;01"></a>2020&#x2F;04&#x2F;01</h2><p>取到快递且焊接完成。</p><p>测试正常</p><p>​</p><h2 id="2020-x2F-03-x2F-28"><a href="#2020-x2F-03-x2F-28" class="headerlink" title="2020&#x2F;03&#x2F;28"></a>2020&#x2F;03&#x2F;28</h2><p>开发资料准备，淘宝购入小车散件：</p><p>统计如下：</p><p>（1）、 Arduino Uno核心板 （328P芯片）一快</p><p>（2）、 未焊接的扩展板一块，它扩展了：arduino引脚，L293D（芯片）电机驱动，舵机、电源、蜂鸣器、红外、蓝牙接口、电源开关、按键、超声波等。</p><p>（3）、未焊接的小车底板一块，它包括了：五金铜柱自攻沉头螺丝螺母若干、阻值不同的色环电阻若干、电池电池座，红外发送接收、LM393电压比较器，电机、轮胎、未焊接的循迹模块等</p><p>最后搭建Arduino开发环境</p><p>​</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>疫情期间，闲的无聊，做个arduino小车玩一玩，开发个比较简单的。感兴趣兴趣的可相互讨论哈</p><h3 id="开发过程遇到一些问题，-总结一下遇到的坑"><a href="#开发过程遇到一些问题，-总结一下遇到的坑" class="headerlink" title="开发过程遇到一些问题， 总结一下遇到的坑"></a>开发过程遇到一些问题， 总结一下遇到的坑</h3><h4 id="一、淘宝店家提供的参考代码，把数字输出和模拟输出都放在一起，导致了如下三个问题："><a href="#一、淘宝店家提供的参考代码，把数字输出和模拟输出都放在一起，导致了如下三个问题：" class="headerlink" title="一、淘宝店家提供的参考代码，把数字输出和模拟输出都放在一起，导致了如下三个问题："></a>一、淘宝店家提供的参考代码，把数字输出和模拟输出都放在一起，导致了如下三个问题：</h4><p>（1）、顺序执行且没有加延时函数导致脉冲波动不对<br>（2）、数字输出和模拟输出一起调速，引起速度错误。</p><p>（3）、给没有PWM的引脚做高电平，且又PWM输入125以下做默认低电平······</p><p>PS:感觉就是在网上抄的代码，然后改了一下不同的引脚，因为我在网上见过好多一样的代码</p><h4 id="二、然后就是电路板的设计"><a href="#二、然后就是电路板的设计" class="headerlink" title="二、然后就是电路板的设计"></a>二、然后就是电路板的设计</h4><p>它的电机驱动是用的<strong>L293D</strong>芯片，然后左电机连接的是arduino的<strong>8，9引脚</strong>，右电机连接的是arduino的<strong>10，11引脚</strong>，众所周知，8引脚是不能进行模拟（PWM）输出的</p><p>如果只能输出三个引脚的话，在电机轮胎旋转方向是前后转的前提下。能一起使用PWM的只能是前进（把8引脚输出的为零，默认为低电平，刚好不能模拟输出，且又不需要模拟输出，可以算钻空子了，其他按模拟输出）和停止（和信号输出没区别，因为它都是置为0，也就是125以下默认低电平）。</p><p>不过我想也是可以解决的，想法如下：</p><p>（1）、把L293D驱动放在面包板上，然后接杜邦线来设置引脚，应该是可以规避掉8号引脚的，但是接线太混乱了，暂时先不考虑。</p><p>（2）、自定义PWM模拟输出，占空比可以通过arduino自带的delay及delayMicroseconds实现，也就是自定义所谓的脉冲函数实现调速</p><p>不当之处，敬请谅解</p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro基础</title>
    <link href="/Nroma/2020/03/20/Shiro/"/>
    <url>/Nroma/2020/03/20/Shiro/</url>
    
    <content type="html"><![CDATA[<h2 id="Shiro学习日志"><a href="#Shiro学习日志" class="headerlink" title="Shiro学习日志"></a>Shiro学习日志</h2><p>本篇记录一下使用Shiro来做登录判断和请求权限拦截</p><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--shiro--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="一、拦截器编写流程"><a href="#一、拦截器编写流程" class="headerlink" title="一、拦截器编写流程"></a>一、拦截器编写流程</h4><p>编写Realm类，继承AuthorizingRealm并实现其授权和认证方法</p><p>编写Config类，将Realm类注册到Config类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserRealm <span class="hljs-title function_">userRealm</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRealm</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>编写DefaultWebSecurityManager方法，将方法注册到Config类中，将Realm类的对象传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title function_">getDefaultWebSecurityManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;<br>       DefaultWebSecurityManager securityManager=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>       securityManager.setRealm(userRealm);<br>       <span class="hljs-keyword">return</span> securityManager;<br>   &#125;<br></code></pre></td></tr></table></figure><p>编写ShiroFilterFactoryBean类，将方法注册到Config类中，将DefaultWebSecurityManager类的对象传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">getShiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager getDefaultWebSecurityManager)</span>&#123;<br>        ShiroFilterFactoryBean shiroFilterFactoryBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>        shiroFilterFactoryBean.setSecurityManager(getDefaultWebSecurityManager);<br>        <span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="二、登录拦截流程"><a href="#二、登录拦截流程" class="headerlink" title="二、登录拦截流程"></a>二、登录拦截流程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username,String password,Model model)</span>&#123;<br>        Subject subject= SecurityUtils.getSubject();<br>        UsernamePasswordToken usernamePasswordToken=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(username,password);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//用户登录</span><br>            subject.login(usernamePasswordToken);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException uae) &#123;<br>            <span class="hljs-comment">//如果用户名不存在</span><br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException ice) &#123;<br>            <span class="hljs-comment">//如果密码错误</span><br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过SecurityUtils.getSubject()获取到当前用户信息，将含有账号密码的Token传入login方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        UsernamePasswordToken usernamePasswordToken=(UsernamePasswordToken) authenticationToken;<br>        <span class="hljs-comment">//System.out.println(usernamePasswordToken.getUsername());</span><br>        User user=userService.queryUserByName(usernamePasswordToken.getUsername());<br>        <span class="hljs-comment">//TODO USER</span><br>        <span class="hljs-keyword">if</span> (user==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//密码校验</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(user, user.getPwd(), <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>在Realm的doGetAuthenticationInfo通过参数获取到Token的账号，</p><p>将其传入数据库进行查找，最后通过SimpleAuthenticationInfo进行密码校验。</p><h4 id="三、权限验证流程"><a href="#三、权限验证流程" class="headerlink" title="三、权限验证流程"></a>三、权限验证流程</h4><p>请求拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加shiro的内置过滤器</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            anon:无需认证就能访问</span><br><span class="hljs-comment">            authc:必须认证才能访问</span><br><span class="hljs-comment">            user:必须拥有记住我功能才能访问</span><br><span class="hljs-comment">            perms:拥有某个资源的权限才能访问</span><br><span class="hljs-comment">            role:拥有某个角色权限才能访问</span><br><span class="hljs-comment">         */</span><br><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">getShiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager getDefaultWebSecurityManager)</span>&#123;<br>        ShiroFilterFactoryBean shiroFilterFactoryBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>        shiroFilterFactoryBean.setSecurityManager(getDefaultWebSecurityManager);<br><br>        Map&lt;String,String&gt; filterMap =<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        filterMap.put(<span class="hljs-string">&quot;/add&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<br>        filterMap.put(<span class="hljs-string">&quot;/update&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<br><br>        <span class="hljs-comment">//filterMap.put(&quot;/add&quot;,&quot;authc&quot;);</span><br>        <span class="hljs-comment">//filterMap.put(&quot;/update&quot;,&quot;authc&quot;);</span><br><br>        shiroFilterFactoryBean.setLoginUrl(<span class="hljs-string">&quot;/toLogin&quot;</span>);<br>        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);<br><br>        <span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Shape And  Color Recognition(二)</title>
    <link href="/Nroma/2020/03/11/Android%20Shape%20And%20%20Color%20Recognition%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/Nroma/2020/03/11/Android%20Shape%20And%20%20Color%20Recognition%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>为上回的图形图像识别提供一个思路，由于编写匆忙，只写了主要的思路代码，Code不可直接运行，需要对Android及Opencv等有一定理解，进而补充。</p><span id="more"></span><h5 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a><strong>MainActivity.java</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_1;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.graphics.Bitmap;<br><span class="hljs-keyword">import</span> android.graphics.BitmapFactory;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    Button button;<br>    String str;<span class="hljs-comment">//结果</span><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        button=findViewById(R.id.button);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;  <span class="hljs-comment">//点击事件</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(getApplicationContext().getResources(), R.drawable.img);<span class="hljs-comment">//img为要识别的图，此步意为普通图转位图</span><br>                str=colorAndShape(bitmap);                                                                           <span class="hljs-comment">//将位图传入，返回识别结果</span><br>                Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,str,Toast.LENGTH_LONG).show();                                      <span class="hljs-comment">//提示</span><br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//识别方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">colorAndShape</span><span class="hljs-params">(Bitmap bitmap)</span> &#123;<br>        timer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-type">Util</span> <span class="hljs-variable">cvut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Util</span>();<br>            ArrayList&lt;ColorShapeInfo&gt; resultList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">erzhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">130</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">// timer线程</span><br>                Log.d(<span class="hljs-string">&quot;pzj&quot;</span>, <span class="hljs-string">&quot;in to cv !!&quot;</span>);<br>                <span class="hljs-comment">// new FileService().savePhoto(bitmap, &quot;CV/doit.png&quot;);</span><br>                <span class="hljs-comment">// Mat image = cvut.getImageAsFile(&quot;CV/doit.png&quot;);</span><br>                <span class="hljs-type">Mat</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> cvut.bitmapToMat(bitmap);<br>                <span class="hljs-type">Mat</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> cvut.cloneMat(image);<br>                <span class="hljs-type">Mat</span> <span class="hljs-variable">declarMat</span> <span class="hljs-operator">=</span> cvut.cloneMat(image);<br>                cvut.toReverseColorMat(image);<span class="hljs-comment">// 反色</span><br>                cvut.toGaussUnClearMat(declarMat, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>);<span class="hljs-comment">// 模糊图像，用于推测颜色</span><br>                <span class="hljs-type">Mat</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> cvut.cloneMat(declarMat);<br>                <span class="hljs-type">Mat</span> <span class="hljs-variable">srcWrite</span> <span class="hljs-operator">=</span> cvut.cloneMat(declarMat);<br>                cvut.toDilate(image, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 膨胀</span><br>                cvut.toGrayMat(image);<span class="hljs-comment">// 灰度化</span><br>                <span class="hljs-type">Mat</span> <span class="hljs-variable">binary</span> <span class="hljs-operator">=</span> cvut.cloneMat(image);<br>                cvut.toBinaryMat(binary, erzhi, <span class="hljs-number">255</span>);<span class="hljs-comment">// 二值化</span><br>                cvut.coverBackGroundToBlack(binary);<span class="hljs-comment">// 背景变黑</span><br>                cvut.saveMatAsPngFileAndTimestamp(binary, <span class="hljs-string">&quot;binary&quot;</span>);<span class="hljs-comment">// SAVE</span><br>                List&lt;MatOfPoint&gt; contoursList = cvut.findContoursList(binary);<span class="hljs-comment">// 找到轮廓</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; contoursList.size()<br>                        &amp;&amp; contoursList.size() &lt;= <span class="hljs-number">9</span>; i++) &#123;<span class="hljs-comment">// 处理单个轮廓</span><br>                    <span class="hljs-type">Mat</span> <span class="hljs-variable">mat</span> <span class="hljs-operator">=</span> cvut.makeBGRMat(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">// 黑色背景</span><br>                    cvut.drawContoursToMat(mat, contoursList, i, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 白色描边</span><br>                    Point[] points = cvut.findp(mat);<span class="hljs-comment">// 找到描边点</span><br>                    Point[] checkedPoints = cvut.checkPoint(points);<span class="hljs-comment">// 清除同一条直线上的点</span><br>                    <span class="hljs-comment">//ColorShapeInfo csi = ;</span><br>                    <span class="hljs-comment">//String shape = cvut.findShape(checkedPoints);// 确定形状</span><br>                    <span class="hljs-comment">//String color = cvut.findColor(declarMat, checkedPoints);// 确定颜色</span><br>                    resultList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ColorShapeInfo</span>(cvut.findColor(declarMat, checkedPoints), cvut.findShape(checkedPoints)));<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; checkedPoints.length; j++) &#123;<br>                        cvut.drawCircleByPoint(mat, checkedPoints[j]);<br>                    &#125;<br>                    cvut.saveMatAsPngFile(mat, <span class="hljs-string">&quot;Shape&quot;</span> + i);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (resultList.size() != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//结果resultList通过Log打印出来了</span><br>                    Log.d(<span class="hljs-string">&quot;CvResoult&quot;</span>, Arrays.toString(resultList.toArray()));<br>                    str=Arrays.toString(resultList.toArray());<br>                    cvut.saveMatAsPngFileAndTimestamp(m2, <span class="hljs-string">&quot;declar&quot;</span>);<span class="hljs-comment">// SAVE</span><br>                    cvut.saveMatAsPngFileAndTimestamp(m1, <span class="hljs-string">&quot;image&quot;</span>);<span class="hljs-comment">// SAVE</span><br>                    timer.cancel();<br>                    <span class="hljs-built_in">this</span>.cancel();<br>                    String text;<br>                    <span class="hljs-keyword">return</span> text=Arrays.toString(resultList.toArray());<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    resultList.clear();<br>                    <span class="hljs-keyword">if</span> (erzhi &lt;= <span class="hljs-number">180</span>) &#123;<br>                        erzhi += <span class="hljs-number">5</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        erzhi = <span class="hljs-number">150</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Java Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_1;<br><br><span class="hljs-comment">//JavaBean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorShapeInfo</span> &#123;<br>    String Color;<br>    String Shape;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(String color)</span> &#123;<br>        Color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getShape</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Shape;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setShape</span><span class="hljs-params">(String shape)</span> &#123;<br>        Shape = shape;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是上文的工具类</p><p><strong>Util</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_1;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.opencv.android.Utils;<br><span class="hljs-keyword">import</span> org.opencv.core.Core;<br><span class="hljs-keyword">import</span> org.opencv.core.CvType;<br><span class="hljs-keyword">import</span> org.opencv.core.Mat;<br><span class="hljs-keyword">import</span> org.opencv.core.MatOfPoint;<br><span class="hljs-keyword">import</span> org.opencv.core.Point;<br><span class="hljs-keyword">import</span> org.opencv.core.Scalar;<br><span class="hljs-keyword">import</span> org.opencv.core.Size;<br><span class="hljs-keyword">import</span> org.opencv.imgcodecs.Imgcodecs;<br><span class="hljs-keyword">import</span> org.opencv.imgproc.Imgproc;<br><br><span class="hljs-keyword">import</span> android.graphics.Bitmap;<br><span class="hljs-keyword">import</span> android.os.Environment;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CVUT2&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 得到图形中心点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Point <span class="hljs-title function_">getCenterPoint</span><span class="hljs-params">(Point[] points)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">centerX</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">centerY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (Point point : points) &#123;<br>            centerX += point.x;<br>            centerY += point.y;<br>        &#125;<br>        <span class="hljs-type">Point</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();<br>        result.x = (<span class="hljs-type">int</span>) (centerX / points.length);<br>        result.y = (<span class="hljs-type">int</span>) (centerY / points.length);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得角点 传入单调且不能是二值化的图像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Point[] findp(Mat mat) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxCorners</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>, blockSize = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">qualityLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.01</span>, minDistance = <span class="hljs-number">20.0</span>, k = <span class="hljs-number">0.04</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">userHarrisDetector</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">MatOfPoint</span> <span class="hljs-variable">corners</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatOfPoint</span>();<span class="hljs-comment">// 省略了转化成灰度图像</span><br>        <span class="hljs-built_in">this</span>.toGrayMat(mat);<br>        <span class="hljs-comment">// 计算角点</span><br>        <span class="hljs-comment">// image：8位或32位浮点型输入图像，单通道</span><br>        <span class="hljs-comment">// corners：保存检测出的角点</span><br>        <span class="hljs-comment">// maxCorners：角点数目最大值，如果实际检测的角点超过此值，则只返回前maxCorners个强角点</span><br>        <span class="hljs-comment">// qualityLevel：角点的品质因子---------重要</span><br>        <span class="hljs-comment">// minDistance：对于初选出的角点而言，如果在其周围minDistance范围内存在其他更强角点，则将此角点删除</span><br>        <span class="hljs-comment">// mask：指定感兴趣区，如不需在整幅图上寻找角点，则用此参数指定ROI。也可以new Mat()来代替，这样就是没有mask.</span><br>        <span class="hljs-comment">// blockSize：计算协方差矩阵时的窗口大小</span><br>        <span class="hljs-comment">// useHarrisDetector：指示是否使用Harris角点检测，如不指定，则计算shi-tomasi角点</span><br>        <span class="hljs-comment">// harrisK：Harris角点检测需要的k值</span><br>        Imgproc.goodFeaturesToTrack(mat, corners, maxCorners, qualityLevel,<br>                minDistance, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>(), blockSize, userHarrisDetector, k);<br>        Point[] pCorners = corners.toArray();<br>        <span class="hljs-keyword">return</span> pCorners;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 画个圈圈祝福你</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawCircleByPoint</span><span class="hljs-params">(Mat mat, Point point)</span> &#123;<br>        Imgproc.circle(mat, point, <span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 横向填充杂色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">coverBackGroundToBlack</span><span class="hljs-params">(Mat mat)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> blackPixle[] = &#123; <span class="hljs-number">0.0</span> &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; mat.height(); y++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; mat.width(); x++) &#123;<br>                <span class="hljs-type">double</span> pixle[] = mat.get(y, x);<br>                <span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">0</span>] == <span class="hljs-number">255.0</span>) &#123;<span class="hljs-comment">// 如果是白色</span><br>                    mat.put(y, x, blackPixle);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 遇到黑色</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> mat.width() - <span class="hljs-number">1</span>; x &gt; <span class="hljs-number">0</span>; x--) &#123;<br>                <span class="hljs-type">double</span> pixle[] = mat.get(y, x);<br>                <span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">0</span>] == <span class="hljs-number">255.0</span>) &#123;<span class="hljs-comment">// 如果是白色</span><br>                    mat.put(y, x, blackPixle);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 遇到黑色</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        Log.d(tag, <span class="hljs-string">&quot;背景涂黑完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从Bitmap得到Mat</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">bitmapToMat</span><span class="hljs-params">(Bitmap bitmap)</span> &#123;<br>        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bit</span> <span class="hljs-operator">=</span> bitmap.copy(Bitmap.Config.ARGB_8888, <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Mat</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>(bit.getHeight(), bit.getWidth(), CvType.CV_8UC(<span class="hljs-number">3</span>));<br>        Utils.bitmapToMat(bit, src);<br>        Log.d(tag, <span class="hljs-string">&quot;Bitmap转换Mat完成&quot;</span>);<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 膨胀处理 参数 3,3,1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toDilate</span><span class="hljs-params">(Mat mat, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> iterations)</span> &#123;<br>        Imgproc.dilate(mat, mat, Imgproc.getStructuringElement(<br>                Imgproc.MORPH_RECT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(i, j)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>),<br>                iterations);<br>        Log.d(tag, <span class="hljs-string">&quot;膨胀完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 腐蚀处理 参数3,3,1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toErode</span><span class="hljs-params">(Mat mat, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> iterations)</span> &#123;<br>        Imgproc.erode(mat, mat, Imgproc.getStructuringElement(<br>                Imgproc.MORPH_RECT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(i, j)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>),<br>                iterations);<br>        Log.d(tag, <span class="hljs-string">&quot;腐蚀完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 复制Mat对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">cloneMat</span><span class="hljs-params">(Mat mat)</span> &#123;<br>        <span class="hljs-keyword">return</span> mat.clone();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成纯色Mat对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">makeBGRMat</span><span class="hljs-params">(<span class="hljs-type">int</span> b, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>(<span class="hljs-number">360</span>, <span class="hljs-number">640</span>, CvType.CV_8UC3, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(b, g, r));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查找轮廓并返回轮廓数组 最好传入阈值图</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;MatOfPoint&gt; <span class="hljs-title function_">findContoursList</span><span class="hljs-params">(Mat mat)</span> &#123;<br>        List&lt;MatOfPoint&gt; contours = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;MatOfPoint&gt;();<br>        <span class="hljs-type">Mat</span> <span class="hljs-variable">hierarchy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>();<br>        Imgproc.findContours(mat, contours, hierarchy, Imgproc.RETR_LIST,<br>                Imgproc.CHAIN_APPROX_SIMPLE);<br>        Log.d(tag, <span class="hljs-string">&quot;找到轮廓&quot;</span> + contours.size() + <span class="hljs-string">&quot;个&quot;</span>);<br>        <span class="hljs-keyword">return</span> contours;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 画出轮廓 根据轮廓数组在一张图上画 需指定数组下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawContoursToMat</span><span class="hljs-params">(Mat mat, List&lt;MatOfPoint&gt; contours,</span><br><span class="hljs-params">                                  <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> size)</span> &#123;<br>        Imgproc.drawContours(mat, contours, index, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(b, g, r, <span class="hljs-number">0</span>), size);<br>        Log.v(tag, <span class="hljs-string">&quot;绘制第&quot;</span> + index + <span class="hljs-string">&quot;个轮廓&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二值化图片 参数i,j参考150,255</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toBinaryMat</span><span class="hljs-params">(Mat from, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        Imgproc.threshold(from, from, i, j, Imgproc.THRESH_BINARY);<br>        Log.d(tag, <span class="hljs-string">&quot;二值化完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 灰度化图像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toGrayMat</span><span class="hljs-params">(Mat from)</span> &#123;<br>        Imgproc.cvtColor(from, from, Imgproc.COLOR_BGR2GRAY);<br>        Log.d(tag, <span class="hljs-string">&quot;灰度化完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图像颜色反转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toReverseColorMat</span><span class="hljs-params">(Mat from)</span> &#123;<br>        Core.bitwise_not(from, from);<br>        Log.d(tag, <span class="hljs-string">&quot;颜色反转完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模糊图像，参数i,j,k参考5,5,0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toGaussUnClearMat</span><span class="hljs-params">(Mat from, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span> &#123;<br>        Imgproc.GaussianBlur(from, from, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(i, j), k);<br>        Log.d(tag, <span class="hljs-string">&quot;高斯模糊完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在图上写字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printWordsOnMat</span><span class="hljs-params">(Mat mat, Point p, String text)</span> &#123;<br>        p.x = p.x - <span class="hljs-number">100</span>;<br>        Imgproc.putText(mat, text, p, <span class="hljs-number">18</span>, <span class="hljs-number">0.5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 合并直线上的点[汇总]</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> points</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Point[] checkPoint(Point[] points) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastLength</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">thisLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        Point[] lp = points;<br>        Point[] np;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            np = checkPointOnce(lp);<br>            thisLength = np.length;<br>            <span class="hljs-keyword">if</span> (thisLength == lastLength) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            lastLength = thisLength;<br>            lp = np;<br>        &#125;<br>        Log.d(tag, <span class="hljs-string">&quot;数组变化:&quot;</span> + points.length + <span class="hljs-string">&quot; -&gt; &quot;</span> + np.length);<br>        <span class="hljs-keyword">return</span> np;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 合并直线上的点[分步]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Point[] checkPointOnce(Point[] points) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> points.length;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 是否找到可删除点</span><br>        <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">return</span> points;<span class="hljs-comment">// 如果小于四个点 免了判断</span><br>        &#125;<br>        label: <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<span class="hljs-comment">// 得到点1</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<span class="hljs-comment">// 得到点2</span><br>                <span class="hljs-keyword">if</span> (j == i) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; length; k++) &#123;<span class="hljs-comment">// 得到点3</span><br>                    <span class="hljs-keyword">if</span> (k == j || k == i) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// int slope = 0;//斜率</span><br>                    <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> twoPointsAngel(points[i], points[j]);<span class="hljs-comment">// i,j直线角度</span><br>                    <span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> twoPointsAngel(points[i], points[k]);<span class="hljs-comment">// i,k直线角度</span><br>                    <span class="hljs-type">double</span> <span class="hljs-variable">angelMin</span> <span class="hljs-operator">=</span> d1 - d2;<br>                    <span class="hljs-keyword">if</span> (Math.abs(angelMin) &lt; <span class="hljs-number">10</span>) &#123;<span class="hljs-comment">// 如果倾角非常接近，删除中间的点</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">needDelete</span> <span class="hljs-operator">=</span> deleteMiddlePointToNull(points[i],<br>                                points[j], points[k]);<br>                        <span class="hljs-keyword">if</span> (needDelete == <span class="hljs-number">1</span>) &#123;<br>                            points[i] = <span class="hljs-literal">null</span>;<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (needDelete == <span class="hljs-number">2</span>) &#123;<br>                            points[j] = <span class="hljs-literal">null</span>;<br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (needDelete == <span class="hljs-number">3</span>) &#123;<br>                            points[k] = <span class="hljs-literal">null</span>;<br>                        &#125;<br>                        flag = <span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">break</span> label;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            Point[] newPoints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>[length - <span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (Point p : points) &#123;<span class="hljs-comment">// 准备一个没有空值的新数组</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != p) &#123;<br>                    newPoints[index] = p;<br>                    index++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> newPoints;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> points;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除三点中处于中间的点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteMiddlePointToNull</span><span class="hljs-params">(Point p1, Point p2, Point p3)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> p1.x + p1.y;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> p2.x + p2.y;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p3.x + p3.y;<br>        <span class="hljs-keyword">if</span> ((a &gt; b &amp;&amp; b &gt; c) || (a &lt; b &amp;&amp; b &lt; c)) &#123;<span class="hljs-comment">// b在中间</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((c &gt; a &amp;&amp; a &gt; b) || (c &lt; a &amp;&amp; a &lt; b)) &#123;<span class="hljs-comment">// a在中间</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过描边点得出形状</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findShape</span><span class="hljs-params">(Point[] checkedPoints)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> checkedPoints.length;<br>        <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ShapeError&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SanJiao&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">5</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;WuJiao&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length &gt; <span class="hljs-number">5</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;YuanXing&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">4</span>) &#123;<span class="hljs-comment">// 四边形</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], checkedPoints[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], checkedPoints[<span class="hljs-number">2</span>]);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], checkedPoints[<span class="hljs-number">3</span>]);<br>            Point[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>[<span class="hljs-number">2</span>];<br>            <span class="hljs-comment">// 找与第一个点相邻的两个点(舍弃最远的那个点)</span><br>            <span class="hljs-keyword">if</span> (d1 &gt; d2 &amp;&amp; d1 &gt; d3) &#123;<span class="hljs-comment">// d1最大，舍弃下标1</span><br>                p[<span class="hljs-number">0</span>] = checkedPoints[<span class="hljs-number">2</span>];<br>                p[<span class="hljs-number">1</span>] = checkedPoints[<span class="hljs-number">3</span>];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d2 &gt; d1 &amp;&amp; d2 &gt; d3) &#123;<span class="hljs-comment">// d2最大，舍弃下标2</span><br>                p[<span class="hljs-number">0</span>] = checkedPoints[<span class="hljs-number">1</span>];<br>                p[<span class="hljs-number">1</span>] = checkedPoints[<span class="hljs-number">3</span>];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                p[<span class="hljs-number">0</span>] = checkedPoints[<span class="hljs-number">1</span>];<br>                p[<span class="hljs-number">1</span>] = checkedPoints[<span class="hljs-number">2</span>];<br>            &#125;<span class="hljs-comment">// 现在数组p中是两个最近的点</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">angelL1</span> <span class="hljs-operator">=</span> twoPointsAngel(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">angelL2</span> <span class="hljs-operator">=</span> twoPointsAngel(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">angelP</span> <span class="hljs-operator">=</span> Math.abs(angelL1 - angelL2);<br>            Log.d(tag, String.format(<span class="hljs-string">&quot;四边形某顶点角度为%.2f&quot;</span>, angelP));<br>            <span class="hljs-keyword">if</span> (angelP &gt; <span class="hljs-number">80</span> &amp;&amp; angelP &lt; <span class="hljs-number">100</span>) &#123;<span class="hljs-comment">// 直角</span><br>                <span class="hljs-type">double</span> <span class="hljs-variable">dis1</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">0</span>]);<br>                <span class="hljs-type">double</span> <span class="hljs-variable">dis2</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">1</span>]);<br>                <span class="hljs-type">double</span> <span class="hljs-variable">distanceRatio</span> <span class="hljs-operator">=</span> dis1 / dis2;<br>                Log.d(tag, String.format(<span class="hljs-string">&quot;四边形临边长度差距比为%.2f&quot;</span>, distanceRatio));<br>                <span class="hljs-keyword">if</span> (distanceRatio &gt; <span class="hljs-number">0.80</span> &amp;&amp; distanceRatio &lt; <span class="hljs-number">1.20</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ZhengFang&quot;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ChangFang&quot;</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;LingXing&quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ShapeError&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 求两点之间距离</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">twoPointsDistance</span><span class="hljs-params">(Point p1, Point p2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.sqrt(Math.pow(p1.x - p2.x, <span class="hljs-number">2</span>) + Math.pow(p1.y - p2.y, <span class="hljs-number">2</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 求两点所在直线水平夹角</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">twoPointsAngel</span><span class="hljs-params">(Point p1, Point p2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p1.y == p2.y) &#123;<br>            p1.y += <span class="hljs-number">0.01</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.toDegrees(Math.atan((p1.x - p2.x) / (p1.y - p2.y)));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将Mat对象保存到文件系统</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveMatAsPngFile</span><span class="hljs-params">(Mat mat, String filename)</span> &#123;<br>        Log.d(tag, <span class="hljs-string">&quot;储存Mat&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Imgcodecs.imwrite(Environment.getExternalStorageDirectory()<br>                    + <span class="hljs-string">&quot;/CV/&quot;</span> + filename + <span class="hljs-string">&quot;.png&quot;</span>, mat);<br>            Log.i(tag, <span class="hljs-string">&quot;Mat存储完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(tag, <span class="hljs-string">&quot;Mat存储出错&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将Mat对象保存到文件系统</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveMatAsPngFileAndTimestamp</span><span class="hljs-params">(Mat mat, String filename)</span> &#123;<br>        Log.d(tag, <span class="hljs-string">&quot;储存Mat&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Imgcodecs.imwrite(Environment.getExternalStorageDirectory()<br>                            + <span class="hljs-string">&quot;/CV/&quot;</span> + filename + System.currentTimeMillis() + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>                    mat);<br>            Log.i(tag, <span class="hljs-string">&quot;Mat存储完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Log.e(tag, <span class="hljs-string">&quot;Mat存储出错&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//private static final int[] RED = &#123; 255, 0, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] GREEN = &#123; 0, 255, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] BLUE = &#123; 0, 0, 255 &#125;;</span><br><span class="hljs-comment">//private static final int[] YELLOW = &#123; 255, 255, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] PIN = &#123; 255, 0, 255 &#125;;</span><br><span class="hljs-comment">//private static final int[] QING = &#123; 0, 255, 255 &#125;;</span><br><span class="hljs-comment">//private static final int[] BLACK = &#123; 0, 0, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] WHITE = &#123; 255, 255, 255 &#125;;</span><br><span class="hljs-comment">//</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] RED = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] GREEN = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] BLUE = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] YELLOW = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] PIN = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] QING = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] BLACK = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] WHITE = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span> &#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;<span class="hljs-type">int</span>[]&gt; COLORS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        COLORS.add(RED);<br>        COLORS.add(GREEN);<br>        COLORS.add(BLUE);<br>        COLORS.add(YELLOW);<br>        COLORS.add(PIN);<br>        COLORS.add(QING);<br>        COLORS.add(BLACK);<br>        COLORS.add(WHITE);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 确定形状的颜色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findColor</span><span class="hljs-params">(Mat colorfulMat, Point[] checkedPoints)</span> &#123;<br>        <span class="hljs-type">Point</span> <span class="hljs-variable">centerPoint</span> <span class="hljs-operator">=</span> getCenterPoint(checkedPoints);<br>        <span class="hljs-type">double</span>[] colorBGR = colorfulMat.get((<span class="hljs-type">int</span>) centerPoint.y,<br>                (<span class="hljs-type">int</span>) centerPoint.x);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">maxlightR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 确定亮度增大系数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">maxlightG</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">maxlightB</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; colorfulMat.height(); y++) &#123;<span class="hljs-comment">// 遍历图片 找到最亮的点做参考</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; colorfulMat.width(); x++) &#123;<br>                <span class="hljs-type">double</span> pixle[] = colorfulMat.get(y, x);<br>                <span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">0</span>] &gt; maxlightB)<br>                    maxlightB = pixle[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">1</span>] &gt; maxlightG)<br>                    maxlightG = pixle[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">2</span>] &gt; maxlightR)<br>                    maxlightR = pixle[<span class="hljs-number">2</span>];<br>            &#125;<br>        &#125;<span class="hljs-comment">// 用于去除亮度和色调影响</span><br>        maxlightR = <span class="hljs-number">255</span> / maxlightR;<br>        maxlightG = <span class="hljs-number">255</span> / maxlightG;<br>        maxlightB = <span class="hljs-number">255</span> / maxlightB;<br>        <span class="hljs-type">int</span>[] colorRGB = &#123; (<span class="hljs-type">int</span>) (colorBGR[<span class="hljs-number">2</span>] * maxlightR),<br>                (<span class="hljs-type">int</span>) (colorBGR[<span class="hljs-number">1</span>] * maxlightG),<br>                (<span class="hljs-type">int</span>) (colorBGR[<span class="hljs-number">0</span>] * maxlightB) &#125;;<br>        <span class="hljs-type">int</span>[] missNmuber = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            missNmuber[i] = colorMiss(colorRGB, COLORS.get(i));<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minNumb</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; missNmuber.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (missNmuber[i] &lt; minNumb) &#123;<br>                minNumb = missNmuber[i];<br>                minIndex = i;<br>            &#125;<br>        &#125;<br>        Log.d(tag, String.format(<br>                <span class="hljs-string">&quot;R:%d, G:%d, B:%d, light:[%.2f * %.2f * %.2f]  =&gt;  &quot;</span>,<br>                colorRGB[<span class="hljs-number">0</span>], colorRGB[<span class="hljs-number">1</span>], colorRGB[<span class="hljs-number">2</span>], maxlightR, maxlightG,<br>                maxlightB));<br>        <span class="hljs-keyword">switch</span> (minIndex) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hong&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Lv&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Lan&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Huang&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Pin&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Qing&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hei&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bai&quot;</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ColorError&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算颜色差距</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">colorMiss</span><span class="hljs-params">(<span class="hljs-type">int</span>[] c1, <span class="hljs-type">int</span>[] c2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.abs(c1[<span class="hljs-number">0</span>] - c2[<span class="hljs-number">2</span>]) + Math.abs(c1[<span class="hljs-number">1</span>] - c2[<span class="hljs-number">1</span>])<br>                + Math.abs(c1[<span class="hljs-number">2</span>] - c2[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从文件系统图片读取Mat对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">getImageAsFile</span><span class="hljs-params">(String filename)</span> &#123;<span class="hljs-comment">// FIXME</span><br>        Log.d(tag, <span class="hljs-string">&quot;读取Mat&quot;</span>);<br>        <span class="hljs-type">Mat</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> Imgcodecs.imread(Environment.getExternalStorageDirectory()<br>                + <span class="hljs-string">&quot;/CV/&quot;</span> + filename);<br>        Log.i(tag, <span class="hljs-string">&quot;Mat读取完成&quot;</span>);<br>        <span class="hljs-keyword">return</span> image;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>十分乐意探讨</p><p><code>本人QQ：272982721</code></p><p><code>WeChat：Evaminfei</code></p><p><code>End...</code></p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Shape And  Color Recognition(一)</title>
    <link href="/Nroma/2020/02/16/Android%20Shape%20And%20%20Color%20Recognition%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/Nroma/2020/02/16/Android%20Shape%20And%20%20Color%20Recognition%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>代码记录</p><p>环境：Open CV 3.4.3</p><span id="more"></span><h5 id="工具类"><a href="#工具类" class="headerlink" title="#工具类"></a>#工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.opencv.android.Utils;<br><span class="hljs-keyword">import</span> org.opencv.core.Core;<br><span class="hljs-keyword">import</span> org.opencv.core.CvType;<br><span class="hljs-keyword">import</span> org.opencv.core.Mat;<br><span class="hljs-keyword">import</span> org.opencv.core.MatOfPoint;<br><span class="hljs-keyword">import</span> org.opencv.core.Point;<br><span class="hljs-keyword">import</span> org.opencv.core.Scalar;<br><span class="hljs-keyword">import</span> org.opencv.core.Size;<br><span class="hljs-keyword">import</span> org.opencv.imgcodecs.Imgcodecs;<br><span class="hljs-keyword">import</span> org.opencv.imgproc.Imgproc;<br><br><span class="hljs-keyword">import</span> android.graphics.Bitmap;<br><span class="hljs-keyword">import</span> android.os.Environment;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenCvUtils</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CVUT2&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 得到图形中心点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Point <span class="hljs-title function_">getCenterPoint</span><span class="hljs-params">(Point[] points)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">centerX</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">centerY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><span class="hljs-keyword">for</span> (Point point : points) &#123;<br>centerX += point.x;<br>centerY += point.y;<br>&#125;<br><span class="hljs-type">Point</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();<br>result.x = (<span class="hljs-type">int</span>) (centerX / points.length);<br>result.y = (<span class="hljs-type">int</span>) (centerY / points.length);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获得角点 传入单调且不能是二值化的图像</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Point[] findp(Mat mat) &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxCorners</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>, blockSize = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">qualityLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.01</span>, minDistance = <span class="hljs-number">20.0</span>, k = <span class="hljs-number">0.04</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">userHarrisDetector</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">MatOfPoint</span> <span class="hljs-variable">corners</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatOfPoint</span>();<span class="hljs-comment">// 省略了转化成灰度图像</span><br><span class="hljs-built_in">this</span>.toGrayMat(mat);<br><span class="hljs-comment">// 计算角点</span><br><span class="hljs-comment">// image：8位或32位浮点型输入图像，单通道</span><br><span class="hljs-comment">// corners：保存检测出的角点</span><br><span class="hljs-comment">// maxCorners：角点数目最大值，如果实际检测的角点超过此值，则只返回前maxCorners个强角点</span><br><span class="hljs-comment">// qualityLevel：角点的品质因子---------重要</span><br><span class="hljs-comment">// minDistance：对于初选出的角点而言，如果在其周围minDistance范围内存在其他更强角点，则将此角点删除</span><br><span class="hljs-comment">// mask：指定感兴趣区，如不需在整幅图上寻找角点，则用此参数指定ROI。也可以new Mat()来代替，这样就是没有mask.</span><br><span class="hljs-comment">// blockSize：计算协方差矩阵时的窗口大小</span><br><span class="hljs-comment">// useHarrisDetector：指示是否使用Harris角点检测，如不指定，则计算shi-tomasi角点</span><br><span class="hljs-comment">// harrisK：Harris角点检测需要的k值</span><br>Imgproc.goodFeaturesToTrack(mat, corners, maxCorners, qualityLevel,<br>minDistance, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>(), blockSize, userHarrisDetector, k);<br>Point[] pCorners = corners.toArray();<br><span class="hljs-keyword">return</span> pCorners;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 画个圈圈祝福你</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawCircleByPoint</span><span class="hljs-params">(Mat mat, Point point)</span> &#123;<br>Imgproc.circle(mat, point, <span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 横向填充杂色</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">coverBackGroundToBlack</span><span class="hljs-params">(Mat mat)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">double</span> blackPixle[] = &#123; <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; mat.height(); y++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; mat.width(); x++) &#123;<br><span class="hljs-type">double</span> pixle[] = mat.get(y, x);<br><span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">0</span>] == <span class="hljs-number">255.0</span>) &#123;<span class="hljs-comment">// 如果是白色</span><br>mat.put(y, x, blackPixle);<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 遇到黑色</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> mat.width() - <span class="hljs-number">1</span>; x &gt; <span class="hljs-number">0</span>; x--) &#123;<br><span class="hljs-type">double</span> pixle[] = mat.get(y, x);<br><span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">0</span>] == <span class="hljs-number">255.0</span>) &#123;<span class="hljs-comment">// 如果是白色</span><br>mat.put(y, x, blackPixle);<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 遇到黑色</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>Log.d(tag, <span class="hljs-string">&quot;背景涂黑完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从Bitmap得到Mat</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">bitmapToMat</span><span class="hljs-params">(Bitmap bitmap)</span> &#123;<br><span class="hljs-type">Bitmap</span> <span class="hljs-variable">bit</span> <span class="hljs-operator">=</span> bitmap.copy(Bitmap.Config.ARGB_8888, <span class="hljs-literal">false</span>);<br><span class="hljs-type">Mat</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>(bit.getHeight(), bit.getWidth(), CvType.CV_8UC(<span class="hljs-number">3</span>));<br>Utils.bitmapToMat(bit, src);<br>Log.d(tag, <span class="hljs-string">&quot;Bitmap转换Mat完成&quot;</span>);<br><span class="hljs-keyword">return</span> src;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 膨胀处理 参数 3,3,1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toDilate</span><span class="hljs-params">(Mat mat, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> iterations)</span> &#123;<br>Imgproc.dilate(mat, mat, Imgproc.getStructuringElement(<br>Imgproc.MORPH_RECT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(i, j)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>),<br>iterations);<br>Log.d(tag, <span class="hljs-string">&quot;膨胀完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 腐蚀处理 参数3,3,1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toErode</span><span class="hljs-params">(Mat mat, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> iterations)</span> &#123;<br>Imgproc.erode(mat, mat, Imgproc.getStructuringElement(<br>Imgproc.MORPH_RECT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(i, j)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>),<br>iterations);<br>Log.d(tag, <span class="hljs-string">&quot;腐蚀完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复制Mat对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">cloneMat</span><span class="hljs-params">(Mat mat)</span> &#123;<br><span class="hljs-keyword">return</span> mat.clone();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成纯色Mat对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">makeBGRMat</span><span class="hljs-params">(<span class="hljs-type">int</span> b, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> r)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>(<span class="hljs-number">360</span>, <span class="hljs-number">640</span>, CvType.CV_8UC3, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(b, g, r));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查找轮廓并返回轮廓数组 最好传入阈值图</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> List&lt;MatOfPoint&gt; <span class="hljs-title function_">findContoursList</span><span class="hljs-params">(Mat mat)</span> &#123;<br>List&lt;MatOfPoint&gt; contours = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;MatOfPoint&gt;();<br><span class="hljs-type">Mat</span> <span class="hljs-variable">hierarchy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mat</span>();<br>Imgproc.findContours(mat, contours, hierarchy, Imgproc.RETR_LIST,<br>Imgproc.CHAIN_APPROX_SIMPLE);<br>Log.d(tag, <span class="hljs-string">&quot;找到轮廓&quot;</span> + contours.size() + <span class="hljs-string">&quot;个&quot;</span>);<br><span class="hljs-keyword">return</span> contours;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 画出轮廓 根据轮廓数组在一张图上画 需指定数组下标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawContoursToMat</span><span class="hljs-params">(Mat mat, List&lt;MatOfPoint&gt; contours,</span><br><span class="hljs-params"><span class="hljs-type">int</span> index, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> size)</span> &#123;<br>Imgproc.drawContours(mat, contours, index, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(b, g, r, <span class="hljs-number">0</span>), size);<br>Log.v(tag, <span class="hljs-string">&quot;绘制第&quot;</span> + index + <span class="hljs-string">&quot;个轮廓&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二值化图片 参数i,j参考150,255</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toBinaryMat</span><span class="hljs-params">(Mat from, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>Imgproc.threshold(from, from, i, j, Imgproc.THRESH_BINARY);<br>Log.d(tag, <span class="hljs-string">&quot;二值化完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 灰度化图像</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toGrayMat</span><span class="hljs-params">(Mat from)</span> &#123;<br>Imgproc.cvtColor(from, from, Imgproc.COLOR_BGR2GRAY);<br>Log.d(tag, <span class="hljs-string">&quot;灰度化完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图像颜色反转</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toReverseColorMat</span><span class="hljs-params">(Mat from)</span> &#123;<br>Core.bitwise_not(from, from);<br>Log.d(tag, <span class="hljs-string">&quot;颜色反转完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模糊图像，参数i,j,k参考5,5,0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toGaussUnClearMat</span><span class="hljs-params">(Mat from, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span> &#123;<br>Imgproc.GaussianBlur(from, from, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(i, j), k);<br>Log.d(tag, <span class="hljs-string">&quot;高斯模糊完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在图上写字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printWordsOnMat</span><span class="hljs-params">(Mat mat, Point p, String text)</span> &#123;<br>p.x = p.x - <span class="hljs-number">100</span>;<br>Imgproc.putText(mat, text, p, <span class="hljs-number">18</span>, <span class="hljs-number">0.5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 合并直线上的点[汇总]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> points</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Point[] checkPoint(Point[] points) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">lastLength</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">thisLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>Point[] lp = points;<br>Point[] np;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>np = checkPointOnce(lp);<br>thisLength = np.length;<br><span class="hljs-keyword">if</span> (thisLength == lastLength) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>lastLength = thisLength;<br>lp = np;<br>&#125;<br>Log.d(tag, <span class="hljs-string">&quot;数组变化:&quot;</span> + points.length + <span class="hljs-string">&quot; -&gt; &quot;</span> + np.length);<br><span class="hljs-keyword">return</span> np;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 合并直线上的点[分步]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Point[] checkPointOnce(Point[] points) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> points.length;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">// 是否找到可删除点</span><br><span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">4</span>) &#123;<br><span class="hljs-keyword">return</span> points;<span class="hljs-comment">// 如果小于四个点 免了判断</span><br>&#125;<br>label: <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<span class="hljs-comment">// 得到点1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<span class="hljs-comment">// 得到点2</span><br><span class="hljs-keyword">if</span> (j == i) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; length; k++) &#123;<span class="hljs-comment">// 得到点3</span><br><span class="hljs-keyword">if</span> (k == j || k == i) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">// int slope = 0;//斜率</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> twoPointsAngel(points[i], points[j]);<span class="hljs-comment">// i,j直线角度</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> twoPointsAngel(points[i], points[k]);<span class="hljs-comment">// i,k直线角度</span><br><span class="hljs-type">double</span> <span class="hljs-variable">angelMin</span> <span class="hljs-operator">=</span> d1 - d2;<br><span class="hljs-keyword">if</span> (Math.abs(angelMin) &lt; <span class="hljs-number">10</span>) &#123;<span class="hljs-comment">// 如果倾角非常接近，删除中间的点</span><br><span class="hljs-type">int</span> <span class="hljs-variable">needDelete</span> <span class="hljs-operator">=</span> deleteMiddlePointToNull(points[i],<br>points[j], points[k]);<br><span class="hljs-keyword">if</span> (needDelete == <span class="hljs-number">1</span>) &#123;<br>points[i] = <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (needDelete == <span class="hljs-number">2</span>) &#123;<br>points[j] = <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (needDelete == <span class="hljs-number">3</span>) &#123;<br>points[k] = <span class="hljs-literal">null</span>;<br>&#125;<br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span> label;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag) &#123;<br>Point[] newPoints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>[length - <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (Point p : points) &#123;<span class="hljs-comment">// 准备一个没有空值的新数组</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != p) &#123;<br>newPoints[index] = p;<br>index++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> newPoints;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> points;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除三点中处于中间的点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteMiddlePointToNull</span><span class="hljs-params">(Point p1, Point p2, Point p3)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> p1.x + p1.y;<br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> p2.x + p2.y;<br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p3.x + p3.y;<br><span class="hljs-keyword">if</span> ((a &gt; b &amp;&amp; b &gt; c) || (a &lt; b &amp;&amp; b &lt; c)) &#123;<span class="hljs-comment">// b在中间</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((c &gt; a &amp;&amp; a &gt; b) || (c &lt; a &amp;&amp; a &lt; b)) &#123;<span class="hljs-comment">// a在中间</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过描边点得出形状</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">findShape</span><span class="hljs-params">(Point[] checkedPoints)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> checkedPoints.length;<br><span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ShapeError&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SanJiao&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;WuJiao&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length &gt; <span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;YuanXing&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">4</span>) &#123;<span class="hljs-comment">// 四边形</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], checkedPoints[<span class="hljs-number">1</span>]);<br><span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], checkedPoints[<span class="hljs-number">2</span>]);<br><span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], checkedPoints[<span class="hljs-number">3</span>]);<br>Point[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>[<span class="hljs-number">2</span>];<br><span class="hljs-comment">// 找与第一个点相邻的两个点(舍弃最远的那个点)</span><br><span class="hljs-keyword">if</span> (d1 &gt; d2 &amp;&amp; d1 &gt; d3) &#123;<span class="hljs-comment">// d1最大，舍弃下标1</span><br>p[<span class="hljs-number">0</span>] = checkedPoints[<span class="hljs-number">2</span>];<br>p[<span class="hljs-number">1</span>] = checkedPoints[<span class="hljs-number">3</span>];<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d2 &gt; d1 &amp;&amp; d2 &gt; d3) &#123;<span class="hljs-comment">// d2最大，舍弃下标2</span><br>p[<span class="hljs-number">0</span>] = checkedPoints[<span class="hljs-number">1</span>];<br>p[<span class="hljs-number">1</span>] = checkedPoints[<span class="hljs-number">3</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>p[<span class="hljs-number">0</span>] = checkedPoints[<span class="hljs-number">1</span>];<br>p[<span class="hljs-number">1</span>] = checkedPoints[<span class="hljs-number">2</span>];<br>&#125;<span class="hljs-comment">// 现在数组p中是两个最近的点</span><br><span class="hljs-type">double</span> <span class="hljs-variable">angelL1</span> <span class="hljs-operator">=</span> twoPointsAngel(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">0</span>]);<br><span class="hljs-type">double</span> <span class="hljs-variable">angelL2</span> <span class="hljs-operator">=</span> twoPointsAngel(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">1</span>]);<br><span class="hljs-type">double</span> <span class="hljs-variable">angelP</span> <span class="hljs-operator">=</span> Math.abs(angelL1 - angelL2);<br>Log.d(tag, String.format(<span class="hljs-string">&quot;四边形某顶点角度为%.2f&quot;</span>, angelP));<br><span class="hljs-keyword">if</span> (angelP &gt; <span class="hljs-number">80</span> &amp;&amp; angelP &lt; <span class="hljs-number">100</span>) &#123;<span class="hljs-comment">// 直角</span><br><span class="hljs-type">double</span> <span class="hljs-variable">dis1</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">0</span>]);<br><span class="hljs-type">double</span> <span class="hljs-variable">dis2</span> <span class="hljs-operator">=</span> twoPointsDistance(checkedPoints[<span class="hljs-number">0</span>], p[<span class="hljs-number">1</span>]);<br><span class="hljs-type">double</span> <span class="hljs-variable">distanceRatio</span> <span class="hljs-operator">=</span> dis1 / dis2;<br>Log.d(tag, String.format(<span class="hljs-string">&quot;四边形临边长度差距比为%.2f&quot;</span>, distanceRatio));<br><span class="hljs-keyword">if</span> (distanceRatio &gt; <span class="hljs-number">0.80</span> &amp;&amp; distanceRatio &lt; <span class="hljs-number">1.20</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ZhengFang&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ChangFang&quot;</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;LingXing&quot;</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ShapeError&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求两点之间距离</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">twoPointsDistance</span><span class="hljs-params">(Point p1, Point p2)</span> &#123;<br><span class="hljs-keyword">return</span> Math.sqrt(Math.pow(p1.x - p2.x, <span class="hljs-number">2</span>) + Math.pow(p1.y - p2.y, <span class="hljs-number">2</span>));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求两点所在直线水平夹角</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">twoPointsAngel</span><span class="hljs-params">(Point p1, Point p2)</span> &#123;<br><span class="hljs-keyword">if</span> (p1.y == p2.y) &#123;<br>p1.y += <span class="hljs-number">0.01</span>;<br>&#125;<br><span class="hljs-keyword">return</span> Math.toDegrees(Math.atan((p1.x - p2.x) / (p1.y - p2.y)));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将Mat对象保存到文件系统</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveMatAsPngFile</span><span class="hljs-params">(Mat mat, String filename)</span> &#123;<br>Log.d(tag, <span class="hljs-string">&quot;储存Mat&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>Imgcodecs.imwrite(Environment.getExternalStorageDirectory()<br>+ <span class="hljs-string">&quot;/CV/&quot;</span> + filename + <span class="hljs-string">&quot;.png&quot;</span>, mat);<br>Log.i(tag, <span class="hljs-string">&quot;Mat存储完成&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>Log.e(tag, <span class="hljs-string">&quot;Mat存储出错&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将Mat对象保存到文件系统</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveMatAsPngFileAndTimestamp</span><span class="hljs-params">(Mat mat, String filename)</span> &#123;<br>Log.d(tag, <span class="hljs-string">&quot;储存Mat&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>Imgcodecs.imwrite(Environment.getExternalStorageDirectory()<br>+ <span class="hljs-string">&quot;/CV/&quot;</span> + filename + System.currentTimeMillis() + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>mat);<br>Log.i(tag, <span class="hljs-string">&quot;Mat存储完成&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>Log.e(tag, <span class="hljs-string">&quot;Mat存储出错&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//private static final int[] RED = &#123; 255, 0, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] GREEN = &#123; 0, 255, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] BLUE = &#123; 0, 0, 255 &#125;;</span><br><span class="hljs-comment">//private static final int[] YELLOW = &#123; 255, 255, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] PIN = &#123; 255, 0, 255 &#125;;</span><br><span class="hljs-comment">//private static final int[] QING = &#123; 0, 255, 255 &#125;;</span><br><span class="hljs-comment">//private static final int[] BLACK = &#123; 0, 0, 0 &#125;;</span><br><span class="hljs-comment">//private static final int[] WHITE = &#123; 255, 255, 255 &#125;;</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] RED = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] GREEN = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] BLUE = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] YELLOW = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] PIN = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] QING = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] BLACK = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] WHITE = &#123; <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span> &#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;<span class="hljs-type">int</span>[]&gt; COLORS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">static</span> &#123;<br>COLORS.add(RED);<br>COLORS.add(GREEN);<br>COLORS.add(BLUE);<br>COLORS.add(YELLOW);<br>COLORS.add(PIN);<br>COLORS.add(QING);<br>COLORS.add(BLACK);<br>COLORS.add(WHITE);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 确定形状的颜色</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">findColor</span><span class="hljs-params">(Mat colorfulMat, Point[] checkedPoints)</span> &#123;<br><span class="hljs-type">Point</span> <span class="hljs-variable">centerPoint</span> <span class="hljs-operator">=</span> getCenterPoint(checkedPoints);<br><span class="hljs-type">double</span>[] colorBGR = colorfulMat.get((<span class="hljs-type">int</span>) centerPoint.y,<br>(<span class="hljs-type">int</span>) centerPoint.x);<br><span class="hljs-type">double</span> <span class="hljs-variable">maxlightR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 确定亮度增大系数</span><br><span class="hljs-type">double</span> <span class="hljs-variable">maxlightG</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">maxlightB</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; colorfulMat.height(); y++) &#123;<span class="hljs-comment">// 遍历图片 找到最亮的点做参考</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; colorfulMat.width(); x++) &#123;<br><span class="hljs-type">double</span> pixle[] = colorfulMat.get(y, x);<br><span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">0</span>] &gt; maxlightB)<br>maxlightB = pixle[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">1</span>] &gt; maxlightG)<br>maxlightG = pixle[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (pixle[<span class="hljs-number">2</span>] &gt; maxlightR)<br>maxlightR = pixle[<span class="hljs-number">2</span>];<br>&#125;<br>&#125;<span class="hljs-comment">// 用于去除亮度和色调影响</span><br>maxlightR = <span class="hljs-number">255</span> / maxlightR;<br>maxlightG = <span class="hljs-number">255</span> / maxlightG;<br>maxlightB = <span class="hljs-number">255</span> / maxlightB;<br><span class="hljs-type">int</span>[] colorRGB = &#123; (<span class="hljs-type">int</span>) (colorBGR[<span class="hljs-number">2</span>] * maxlightR),<br>(<span class="hljs-type">int</span>) (colorBGR[<span class="hljs-number">1</span>] * maxlightG),<br>(<span class="hljs-type">int</span>) (colorBGR[<span class="hljs-number">0</span>] * maxlightB) &#125;;<br><span class="hljs-type">int</span>[] missNmuber = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>missNmuber[i] = colorMiss(colorRGB, COLORS.get(i));<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">minNumb</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; missNmuber.length; i++) &#123;<br><span class="hljs-keyword">if</span> (missNmuber[i] &lt; minNumb) &#123;<br>minNumb = missNmuber[i];<br>minIndex = i;<br>&#125;<br>&#125;<br>Log.d(tag, String.format(<br><span class="hljs-string">&quot;R:%d, G:%d, B:%d, light:[%.2f * %.2f * %.2f]  =&gt;  &quot;</span>,<br>colorRGB[<span class="hljs-number">0</span>], colorRGB[<span class="hljs-number">1</span>], colorRGB[<span class="hljs-number">2</span>], maxlightR, maxlightG,<br>maxlightB));<br><span class="hljs-keyword">switch</span> (minIndex) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hong&quot;</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Lv&quot;</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Lan&quot;</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Huang&quot;</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Pin&quot;</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Qing&quot;</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hei&quot;</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bai&quot;</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ColorError&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算颜色差距</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">colorMiss</span><span class="hljs-params">(<span class="hljs-type">int</span>[] c1, <span class="hljs-type">int</span>[] c2)</span> &#123;<br><span class="hljs-keyword">return</span> Math.abs(c1[<span class="hljs-number">0</span>] - c2[<span class="hljs-number">2</span>]) + Math.abs(c1[<span class="hljs-number">1</span>] - c2[<span class="hljs-number">1</span>])<br>+ Math.abs(c1[<span class="hljs-number">2</span>] - c2[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从文件系统图片读取Mat对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Mat <span class="hljs-title function_">getImageAsFile</span><span class="hljs-params">(String filename)</span> &#123;<span class="hljs-comment">// FIXME</span><br>Log.d(tag, <span class="hljs-string">&quot;读取Mat&quot;</span>);<br><span class="hljs-type">Mat</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> Imgcodecs.imread(Environment.getExternalStorageDirectory()<br>+ <span class="hljs-string">&quot;/CV/&quot;</span> + filename);<br>Log.i(tag, <span class="hljs-string">&quot;Mat读取完成&quot;</span>);<br><span class="hljs-keyword">return</span> image;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="调用方法"><a href="#调用方法" class="headerlink" title="#调用方法"></a>#调用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">colorAndShape</span><span class="hljs-params">()</span> &#123;<br>timer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br><span class="hljs-type">OpenCvUtils</span> <span class="hljs-variable">cvut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenCvUtils</span>();<br>ArrayList&lt;ColorShapeInfo&gt; resultList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">int</span> <span class="hljs-variable">erzhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">130</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">// timer线程</span><br>Log.d(<span class="hljs-string">&quot;pzj&quot;</span>, <span class="hljs-string">&quot;in to cv !!&quot;</span>);<br><span class="hljs-comment">// new FileService().savePhoto(bitmap, &quot;CV/doit.png&quot;);</span><br><span class="hljs-comment">// Mat image = cvut.getImageAsFile(&quot;CV/doit.png&quot;);</span><br><span class="hljs-type">Mat</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> cvut.bitmapToMat(bitmap);<br><span class="hljs-type">Mat</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> cvut.cloneMat(image);<br><span class="hljs-type">Mat</span> <span class="hljs-variable">declarMat</span> <span class="hljs-operator">=</span> cvut.cloneMat(image);<br>cvut.toReverseColorMat(image);<span class="hljs-comment">// 反色</span><br>cvut.toGaussUnClearMat(declarMat, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>);<span class="hljs-comment">// 模糊图像，用于推测颜色</span><br><span class="hljs-type">Mat</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> cvut.cloneMat(declarMat);<br><span class="hljs-type">Mat</span> <span class="hljs-variable">srcWrite</span> <span class="hljs-operator">=</span> cvut.cloneMat(declarMat);<br>cvut.toDilate(image, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 膨胀</span><br>cvut.toGrayMat(image);<span class="hljs-comment">// 灰度化</span><br><span class="hljs-type">Mat</span> <span class="hljs-variable">binary</span> <span class="hljs-operator">=</span> cvut.cloneMat(image);<br>cvut.toBinaryMat(binary, erzhi, <span class="hljs-number">255</span>);<span class="hljs-comment">// 二值化</span><br>cvut.coverBackGroundToBlack(binary);<span class="hljs-comment">// 背景变黑</span><br>cvut.saveMatAsPngFileAndTimestamp(binary, <span class="hljs-string">&quot;binary&quot;</span>);<span class="hljs-comment">// SAVE</span><br>List&lt;MatOfPoint&gt; contoursList = cvut.findContoursList(binary);<span class="hljs-comment">// 找到轮廓</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; contoursList.size()<br>&amp;&amp; contoursList.size() &lt;= <span class="hljs-number">9</span>; i++) &#123;<span class="hljs-comment">// 处理单个轮廓</span><br><span class="hljs-type">Mat</span> <span class="hljs-variable">mat</span> <span class="hljs-operator">=</span> cvut.makeBGRMat(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">// 黑色背景</span><br>cvut.drawContoursToMat(mat, contoursList, i, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 白色描边</span><br>Point[] points = cvut.findp(mat);<span class="hljs-comment">// 找到描边点</span><br>Point[] checkedPoints = cvut.checkPoint(points);<span class="hljs-comment">// 清除同一条直线上的点</span><br><span class="hljs-comment">//ColorShapeInfo csi = ;</span><br><span class="hljs-comment">//String shape = cvut.findShape(checkedPoints);// 确定形状</span><br><span class="hljs-comment">//String color = cvut.findColor(declarMat, checkedPoints);// 确定颜色</span><br>resultList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ColorShapeInfo</span>(cvut.findColor(declarMat, checkedPoints), cvut.findShape(checkedPoints)));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; checkedPoints.length; j++) &#123;<br>cvut.drawCircleByPoint(mat, checkedPoints[j]);<br>&#125;<br>cvut.saveMatAsPngFile(mat, <span class="hljs-string">&quot;Shape&quot;</span> + i);<br>&#125;<br><span class="hljs-keyword">if</span> (resultList.size() != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//结果resultList通过Log打印出来了</span><br>Log.d(<span class="hljs-string">&quot;CvResoult&quot;</span>, Arrays.toString(resultList.toArray()));<br>cvut.saveMatAsPngFileAndTimestamp(m2, <span class="hljs-string">&quot;declar&quot;</span>);<span class="hljs-comment">// SAVE</span><br>cvut.saveMatAsPngFileAndTimestamp(m1, <span class="hljs-string">&quot;image&quot;</span>);<span class="hljs-comment">// SAVE</span><br>timer.cancel();<br><span class="hljs-built_in">this</span>.cancel();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>resultList.clear();<br><span class="hljs-keyword">if</span> (erzhi &lt;= <span class="hljs-number">180</span>) &#123;<br>erzhi += <span class="hljs-number">5</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>erzhi = <span class="hljs-number">150</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Security基础</title>
    <link href="/Nroma/2020/02/01/Security/"/>
    <url>/Nroma/2020/02/01/Security/</url>
    
    <content type="html"><![CDATA[<h2 id="Security学习日志"><a href="#Security学习日志" class="headerlink" title="Security学习日志"></a>Security学习日志</h2><h2 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h2><p>设置权限，不同地账户可以有不同地权限，看到不同地页面内容</p><p>思路</p><p>第一步必然是导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring boot web --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--spring boot test--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--spring-boot-starter-security--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--thymeleaf整合spring security--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--security test--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入jar包后应该是创建Configuration来托管Springboot的配置，通过@EnableWebSecurity来启动Security</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> <br></code></pre></td></tr></table></figure><p>重写configure：httpSecurity方法，这个方法通过切入http请求来增加Security的横切配置，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/leven1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;A&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/leven2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;B&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/leven3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;C&quot;</span>);<br></code></pre></td></tr></table></figure><p>确切的说，就是通过增加不同url的访问权限字符串来让携带权限字符串的用户进入，没有携带的用户无法进入</p><p>但是通过源码可知hasRole在进行权限判断时会被追加前缀ROLE_</p><p>所以如非必须推荐hasAuthority来进行判断，故hasRole可以替换为hasAuthority</p><p>再说一下Security的跨域保护</p><p>一些框架通过验证用户的session处理无效的csrf token，这会导致一些问题，如果想要关闭默认打开的crsf protection,可以这样来写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http.csrf().disable();<br></code></pre></td></tr></table></figure><p>也可以指定一个默认的login页面和logout页面</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http.formLogin()<span class="hljs-comment">;</span><br>http.logout()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>login可以指定自己的page请求，并读取username（name属性一致），password（name属性一致） 且form表单提交url（POST需定义）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">http.formLogin().loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>)<br>                .usernameParameter(<span class="hljs-string">&quot;ugh&quot;</span>)<br>                .passwordParameter(<span class="hljs-string">&quot;upwd&quot;</span>)<br>                .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br></code></pre></td></tr></table></figure><p>以及logout之后的重定向页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure><p>开启记住我功能，通过Chrome查看分析，记住我的实质是添加一个cookie，点击注销后删除cookie</p><p>之后可以绑定自己的checkbox的name，名字对应就OK</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">http.remember<span class="hljs-constructor">Me()</span>.remember<span class="hljs-constructor">MeParameter(<span class="hljs-string">&quot;rememberMe&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><p>当然，以上部分仅仅是切面的配置，</p><p>那么，如何让用户携带权限字符串呢，</p><p>对于每个用户的权限，可以通过重写configure：auth来配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>()).<br>                withUser(<span class="hljs-string">&quot;ababab&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123123&quot;</span>)).roles(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>).<br>                and().<br>                withUser(<span class="hljs-string">&quot;cdcdcd&quot;</span>).password(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123123&quot;</span>)).roles(<span class="hljs-string">&quot;A&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过withUser来增加用户，密码通过password来设置，这个用户可以通过数据库传递过来，然而Security的安全机制非常严格，普通的密码字符串无法部署，必须是加密之后才可以，所以需要通过BCryptPasswordEncoder来加密password，然后通过roles来赋予权限字符串，</p><p><strong>同上</strong> 也可以通过hasAuthority来赋予，相比roles来说，更好用。</p><p>那么，如何让模块在不同的权限字符串下有不同的显示呢，</p><p>Security和Thymeleaf有一个整合的jar包，通过th空间控制，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right menu&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--如果没有登录--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;!isAuthenticated()&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;address card icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登录<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--如果登录：用户名，注销--&gt;</span><br>                    <span class="hljs-comment">&lt;!--注销--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        角色：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">sec:authentication</span>=<span class="hljs-string">&quot;authorities&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;isAuthenticated()&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--如果登录：用户名，注销--&gt;</span><br>                    <span class="hljs-comment">&lt;!--注销--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sign-out icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 注销<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>比如通过isAuthenticated来判断是否登录，来显示不同的页面效果</p><p>但是这并不是重点，因为它可以通过很多方式完成，重点是在不同权限字符串下，页面的显示与隐藏，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span>=<span class="hljs-string">&quot;hasRole(&#x27;A&#x27;)&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 1<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过hasRole来判断权限字符串，同上，仍然可以通过hasAuthority来判断，更推荐</p><p>如果当前用户没有携带这个权限字符串，就看不到这个div块。</p><p>这个隐藏是极其强大的，通过Chrome浏览器的检查可以看到，在代码编写时候的条件判断和内容都被完全隐藏了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>              <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>               <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx记录</title>
    <link href="/Nroma/2020/01/22/Nginx/"/>
    <url>/Nroma/2020/01/22/Nginx/</url>
    
    <content type="html"><![CDATA[<p>常用命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">nginx  启动<br>nginx -s stop  停止<br>nginx -s <span class="hljs-keyword">quit</span>  安全退出<br>nginx -s <span class="hljs-keyword">reload</span>  重新加载配置文件<br>taskkill <span class="hljs-string">/f</span> <span class="hljs-string">/t</span> <span class="hljs-string">/im</span> nginx.exe<br></code></pre></td></tr></table></figure><p>nginx的三大功能</p><p>一、反向代理</p><p>修改nginx.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs conf">http &#123;<br>   upstream xxx&#123;<br>        server localhost:8080 weight=1;<br>        server localhost:8080 weight=1;<br>   &#125;<br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        #charset koi8-r;<br><br>        #access_log  logs/host.access.log  main;<br><br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>            proxy_pass http://localhost:8000;<br>        &#125;<br></code></pre></td></tr></table></figure><p>server_name为用户输入网址，listen为监听端口，当用户输入之后通过proxy_pass来重定向到新网址，从而实现反向代理。</p><p>二、负载均衡</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>   <span class="hljs-section">upstream</span> xxx&#123;<br>        <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">8080</span> weight=<span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">server</span> localhost:<span class="hljs-number">8080</span> weight=<span class="hljs-number">1</span>;<br>   &#125;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>            <span class="hljs-attribute">proxy_pass</span> http://xxx;<br>        &#125;<br></code></pre></td></tr></table></figure><p>在反向代理的基础上，增加upstream，可实现不同的负载均衡策略</p><p>三、动静分离</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小小的思考</title>
    <link href="/Nroma/2020/01/22/%E8%BF%91%E6%9C%9F%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/Nroma/2020/01/22/%E8%BF%91%E6%9C%9F%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>idea的第一次接触是19年6月，一直以来我都没有把它当正式的开发工具，一直以来就摸索着玩，使用它的基础建立在android studio上，不得不说，两者非常相似。官方解释如下:</p><blockquote><p>Android Studio and the Android plugin for IntelliJ IDEA are built from the same code, and all of the changes in Android Studio are, and will continue to be, available in IntelliJ IDEA releases.</p></blockquote><p>由于一些Eclipse的使用习惯，尽管idea的各个方面非常优秀，但开发中遇到的问题非常多，不过解决一些问题还是比较容易的。</p><p>常常想它如果像eclipse一样，所有project都在一个workspace里面就好了。</p><p>最近看到android studio的module，就想到了idea的module，官方解释如下：</p><blockquote><p>A module is a part of a project that you can compile, run, test and debug independently.Modules are a way to reduce complexity of large projects while maintaining a common (project) configuration.<br>Modules are reusable: if necessary, a module can be included in more than one project.</p></blockquote><p>Project是一个顶级的结构单元，类似于eclipse的workspace，而module类似与eclipse的project，一个项目包含多个module。</p><p>虽然它可以嵌套，但最好单个Project只放相关的module，用着比较合适。</p><p>当然也不是这么简单的一笔带过，它更像maven下的继承 ，Project为父工程 module为子工程，</p><p>idea在创建module时会继承父pom的一些元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.nroma<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>类似这样继承，它可以继承父亲的<br>很多标签但我认为最重要的是在练习时可以避免导入重复的包或<code>dependencies</code>,很适合练习时使用。</p><blockquote><p>TODO </p><p>最后编辑于2021&#x2F;3&#x2F;22&#x2F;20:48</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android嵌入式项目讲义</title>
    <link href="/Nroma/2019/11/01/android1/"/>
    <url>/Nroma/2019/11/01/android1/</url>
    
    <content type="html"><![CDATA[<h1 id="android-目录结构-重要"><a href="#android-目录结构-重要" class="headerlink" title="android 目录结构(重要)"></a>android 目录结构(重要)</h1><span id="more"></span><p>rsc：java源码存放位置</p><p>assets：可以存放资源，但不会生成资源ID，通过AssetManager以二进制流的形式访问。</p><p>res：存放应用到的所有资源，如界面布局，主题样式，字符串，图片，多媒体资源。</p><p>res&#x2F;layout&#x2F;：界面布局文件</p><p>res&#x2F;menu&#x2F;：选项菜单文件</p><p>res&#x2F;values&#x2F;：存放字符串，主题样式资源。</p><p>AndroidManifest.xml：配置清单，配置与应用相关的重要信息，包括权限，程序组件等。</p><h1 id="Android-四大组件"><a href="#Android-四大组件" class="headerlink" title="Android 四大组件"></a>Android 四大组件</h1><p>1.Activity(活动)：</p><p>​显示android程序界面，一个应用可以有多个界面。</p><p>2.Service(服务):</p><p>​没有界面的后台服务。</p><p>3.BroadCastReceiver(广播接收器):</p><p>4.ContentProvider(内容提供者)：</p><h1 id="UI概念"><a href="#UI概念" class="headerlink" title="UI概念"></a>UI概念</h1><p>ViewGroup  和 View</p><h1 id="android-原有项目说明-or-通信协议"><a href="#android-原有项目说明-or-通信协议" class="headerlink" title="android 原有项目说明 or 通信协议"></a>android 原有项目说明 or 通信协议</h1><pre><code class="hljs">Fragment:简称碎片，是Android 3.0（API 11）提出的。它过去support-v4库是一个jar包，24.2.0版本开始，将support-v4库模块化为多个jar包，包含：support-fragment, support-ui, support-media-compat等，这么做是为了减少APK包大小，你需要用哪个模块就引入哪个模块。如果想引入整个support-v4库，则compile &#39;com.android.support:support-v4:24.2.1&#39;，如果只想引入support-fragment库，则com.android.support:support-fragment:24.2.1。Fragment是依赖于Activity的，不能独立存在的。一个Activity里可以有多个Fragment。一个Fragment可以被多个Activity重用。Fragment有自己的生命周期，并能接收输入事件。我们能在Activity运行时动态地添加或删除Fragment。</code></pre><p>​<br>​Activity:<br>​Activity是什么?<br>​Activity是一个Android应用程序组件(也称为Android四大组件之一)，<br>​它提供了一个屏幕，用户可以通过该屏幕进行交互以执行某些操作，<br>​<br>​Android应用程序通常由多个彼此松散绑定的Activity组成。<br>​通常，应用程序中的一个Activity被指定为“主要”Activity，<br>​该Activity在首次启动应用程序时呈现给用户。<br>​然后，每个Activity可以启动另一个Activity以执行不同的操作。<br>​每次新Activity开始时，前一个Activity都会停止，<br>​但系统会将Activity保留在后台堆栈中（“后堆栈”）。<br>​当一个新的Activity开始时，它会被推到后面的堆栈上，<br>​并引起用户的注意。后栈遵循基本的“ 后进先出”堆栈机制，<br>​因此，当用户完成当前活动并按下”后退按钮”时，<br>​它从堆栈弹出（并销毁），之前的活动恢复。</p><p>​<br>​<br>​</p><pre><code class="hljs">登录左Fragment:图片的读取，右Fragment:数据的发送和接收，通信协议</code></pre><h2 id="Activity-和-Fragment-生命周期"><a href="#Activity-和-Fragment-生命周期" class="headerlink" title="Activity 和 Fragment 生命周期"></a>Activity 和 Fragment 生命周期</h2><p><img src="https://cdn.jsdelivr.net/gh/moonris/IMG@v1.1.3/img/Acivity.webp" alt="avatar"></p><p>onCreate():Activity第一次启动时调用。创建布局，组件。</p><p>onStart():onCreate()被调用之后调用，或者是当执行完onRestart（）后Activity用户重新可见时调用。</p><p>onResume():在onRestoreInstanceState(),onRestart(),或者onPause() 被调用后，该方法用来处理与用户的交互。也就是获得用户焦点。</p><p>onPause():</p><p>onStop():</p><p>onDestory():</p><p>onRestart():</p><h2 id="android-项目运行时图片"><a href="#android-项目运行时图片" class="headerlink" title="android 项目运行时图片"></a>android 项目运行时图片</h2><p><img src="https://cdn.jsdelivr.net/gh/moonris/IMG@v1.1.3/img/car.png" alt="avatar"></p><h1 id="android-新增方法位置说明及思路"><a href="#android-新增方法位置说明及思路" class="headerlink" title="android 新增方法位置说明及思路"></a>android 新增方法位置说明及思路</h1><pre><code class="hljs">车牌识别的思路交通灯思路图像识别思路二维码思路</code></pre><h1 id="Debug（测试重点一）"><a href="#Debug（测试重点一）" class="headerlink" title="Debug（测试重点一）"></a>Debug（测试重点一）</h1><pre><code class="hljs">如何调试Android程序</code></pre><h1 id="Toast（测试重点二）"><a href="#Toast（测试重点二）" class="headerlink" title="Toast（测试重点二）"></a>Toast（测试重点二）</h1><p>提示信息</p><p>一般步骤</p><p>1.调用Toast的静态方法makeText()。</p><p>2.添加文本和显示时长</p><p>格式：</p><p>​Toast.makeText(getApplicayionContext,显示文本，显示时长);</p><p>3,。调用Toast的show()方法显示提示信息。</p><h1 id="Log（测试重点三）"><a href="#Log（测试重点三）" class="headerlink" title="Log（测试重点三）"></a>Log（测试重点三）</h1><p>Log（android.util.log）是Android Studio中的日志工具类,熟练使用log会对你以后的Android开发之旅有很大的帮助。 </p><ul><li><p>log类有五个方法，分别是（级别由低到高）：</p><p>​1.Log.v()：打印一些最为繁琐、意义不大的日志信息<br>​2.Log.d()：打印一些调试信息(logd+tab)<br>​3.Log.i()：打印一些比较重要的数据，可帮助你分析用户行为数据<br>​4.Log.w()：打印一些警告信息，提示程序该处可能存在的风险<br>​5.Log.e()：打印程序中的错误信息<br>​（这五个方法都可以进行重载） </p><p>Log的所有打印方法都要传入一个tag参数，每次都写一遍显然太麻烦，这里有个小技巧：在onCreate()方法的外面输入logt，然后按下Tab键，这时就会以当前的类名作为值产生一个tag常量。</p></li><li><p>Log是理解程序，分析程序Bug的神兵利器。 熟用AS的日志工具log能使你在Android开发的旅途中事半功倍。log的重要性会在软件项目的测试阶段体现得尽致。</p></li></ul><h1 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h1><pre><code class="hljs">安卓软件开发包，全称为Android software development kit</code></pre><h1 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h1><pre><code class="hljs">Native Development Kit帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。这些工具对开发者的帮助是巨大的。NDK集成了交叉编译器，并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要编译”、“编译特性要求”等），就可以创建出so。NDK可以自动地将so和Java应用一起打包，极大地减轻了开发人员的打包工作比如android一些复杂的数学运算，这些复杂的操作基本都是放在底层的库中运行的，而且不是通过java语言写出来的，因为java是基于虚拟机的，比C直接面向CPU的执行效率要低很多。所以在Android架构中，底层代码是以C语言，库的形式来完成，优点：1.运行效率高2.利于充分发挥软硬件优势3.利于代码复用4.降低版本控制成本5.降低开发成本缺点：1.开发难度较高2.调试难度较高(以库的形式存在)3.增加开发团队规模</code></pre><h1 id="Android-项目权限说明"><a href="#Android-项目权限说明" class="headerlink" title="Android 项目权限说明"></a>Android 项目权限说明</h1><pre><code class="hljs">网络权限文件读写权限</code></pre><h1 id="Gradle-说明"><a href="#Gradle-说明" class="headerlink" title="Gradle 说明"></a>Gradle 说明</h1><pre><code class="hljs">java构建技术世界里具有巨大突破性的构建工具。Gradle具有如下特性：A very flexible general purpose build tool like Ant.&lt;翻译&gt;一个像Ant一样灵活且通用的构建工具。Switchable, build-by-convention frameworks a la Maven. But we never lock you in!&lt;翻译&gt;一种可切换的，像Maven一样的基于约定的构建框架，却又从不约束你（约定优于配置）。Very powerful support for multi-project builds.&lt;翻译&gt;对多项目构建的强力支持。Very powerful dependency management (based on Apache Ivy).&lt;翻译&gt;对依赖管理的强力支持（基于Apache Ivy）。Full support for your existing Maven or Ivy repository infrastructure.&lt;翻译&gt;对已有的Maven和Ivy仓库有着全面的支持。Support for transitive dependency management without the need for remote repositories or pom.xml and ivy.xml files.&lt;翻译&gt;支持可传递性的依赖管理，而不需要远程仓库或者pom.xml和ivy.xml配置文件。Ant tasks and builds as first class citizens.&lt;翻译&gt;Gradle能够很好地支持Ant任务和构建 。Groovy build scripts.&lt;翻译&gt;支持用Groovy语言编写Gradle的脚本。A rich domain model for describing your build.&lt;翻译&gt;拥有丰富的领域模型来构建你的脚本。</code></pre><h1 id="Android-Studio-介绍"><a href="#Android-Studio-介绍" class="headerlink" title="Android Studio 介绍"></a>Android Studio 介绍</h1><pre><code class="hljs">完成安装和设置开发环境,然后你就可以开始学习android。首先,你将安装被称为Java开发工具包(JDK)的必要组件。然后你要下载和安装Android Studio以及Android软件开发工具包(SDK),这些都是开发Android应用程序所必需的工具。接着，我将向你展示如何使用新建项目向导来创建一个简单的项目HelloWorld。最后，我们将向你展示怎样连接Android虚拟设备（AVD）和Android物理设备。在结束的时候，你将在Android Studio中拥有开发Android应用程序的一切东西。</code></pre><h1 id="Using-Code-Generation"><a href="#Using-Code-Generation" class="headerlink" title="Using Code Generation"></a>Using Code Generation</h1><pre><code class="hljs">恰当的使用代码生成功能，这一特色将为你节约大量的时间，代码生成是生成各种方法的的强大功能，包括了构造，getters, setters, equals()，hashCode(), toString(),方法等等。在你使用代码生成之前，确认Android Studio 是配置好了，可以忽略成员名称的前缀，如m和s，点击File ➤ Settings ➤ Code Style ➤ Java ➤ Code Generation将得到设置对话框，将会出现代码生成的标签页，如果域和静态域文本框不包含m和s，则键入他们并点击”应用“和”确定“Getters/Setters&lt;翻译&gt;Getters/SettersJava类通常是封装好的,这意味着类成员通常声明为私有的,并且访问这些成员的公共接口是通过公有访问器(getter)和公有修改器(setter)方法爱提供的。在Sandbox.java类域范围内点击你的鼠标。并且按Alt+insert（ Cmd + N）。你会注意到有一个选项是Getter,一个为Setter，还有Getter和Setter的组合。Getter和setter方法一般都是成对出现的,除非你有一个很好的理由要省略其中一个或着另一个,否则最好是生成后面的组合选项。从列表中选择Getter and Setter, 在随后的选择字段生成getter和setter对话框中,从列表中选择mGreetings:List&lt;String&gt;列表并点击OK。你的类现在为变量mGreeting有了getter和setter,请注意,生成的代码忽略了m前缀，在生成方法名称的时候,因为你在之前的设置中把m和s设置为了前缀。Override Methods&lt;翻译&gt;方法重载代码生成是理解类继承结构的,所以你可以覆盖包含在任何父类或接口实现的方法。Sandbox.java 是一个简单的普通java对象(POJO)。现在你修改Sandbox类来继承RectShape。当你输入继承RectShape时,这个词RectShape可能以红色突出显示。如果适合你需要的情景,按Alt + Enter来导入RectShape类。toString( ) Method&lt;翻译&gt;toString( )方法Android Studio 可以为你生成toString()方法。让我们为Sandbox创建一个toString()方法,同时也包括mGreetings成员。按Alt +Insert| Cmd + N并选择toString()。选择你的唯一成员——mGreetings,并单击OK。Android Studio生成一个返回字符串,如“Sandbox&#123;“+”mGreetings = &quot; + mGreetings +‘&#125;’。如果在类中有多个成员,可选择他们,他们也会被附加到这个方法的返回字符串。当然toString()方法生成的代码并不是一成不变的,这个方法是可以改变为任何你想要的,只要它返回是一个字符串。</code></pre><h1 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h1><p>​</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
